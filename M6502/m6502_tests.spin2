{
    MOS6502 Emulator Tests
    Written by Marco Maccaferri <macca@maccasoft.com>
}

CON
    _CLKFREQ = 160_000_000

VAR

    long REG_A  ' 8-bit working registers
    long REG_X
    long REG_Y
    long REG_S  ' 8-bit stack pointer
    long REG_P  ' 8-bit flag register
    long REG_PC ' 16-bit program counter
    long CPU_T  ' cpu cycles

OBJ

    cpu : "m6502"
    ser : "com.serial"

PUB main() | cog, prevPC

    ser.start(115_200)
    ser.rx()

    cpu.pokew($FFFC, $200)
    cpu.start(@REG_A)

    test_lda()
    test_ldx()
    test_ldy()

    test_zpg_addressing()
    test_abs_addressing()
    test_abs_x_addressing()
    test_abs_y_addressing()
    test_ind_x_addressing()
    test_ind_y_addressing()
    test_zpg_x_addressing()

    test_adc()
    test_adc_dec()
    test_sbc()
    test_sbc_dec()

    test_inc()
    test_dec()

    test_and()
    test_ora()
    test_eor()
    test_bit()
    test_cmp()

    test_asl()
    test_rol()

    test_pha()
    test_php()

    test_bcc()
    test_bcs()
    test_beq()
    test_bne()
    test_bmi()
    test_bpl()
    test_bvc()
    test_bvs()

    test_clear_flags()
    test_set_flags()

    test_jsr()
    test_brk()

    test_stx_all()

    test_cycles()

    ser.str(string("done!", 13, 10))
    repeat
        waitct(0)

PUB test_lda()

    ser.str(string("test_lda ... "))

    REG_P := %00000000
    REG_A := REG_X := REG_Y := $00
    exec2($A9, $1A) ' LDA #$1A
    if \assertEquals($1A, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($A9, $00) ' LDA #$00
    if \assertEquals($00, REG_A) or \assertBinEquals(%00000010, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($A9, $8A) ' LDA #$8A
    if \assertEquals($8A, REG_A) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_ldx()

    ser.str(string("test_ldx ... "))

    REG_P := %00000000
    REG_A := REG_X := REG_Y := $00
    exec2($A2, $1A) ' LDX #$1A
    if \assertEquals($1A, REG_X) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($A2, $00) ' LDX #$00
    if \assertEquals($00, REG_X) or \assertBinEquals(%00000010, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($A2, $8A) ' LDX #$8A
    if \assertEquals($8A, REG_X) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_ldy()

    ser.str(string("test_ldy ... "))

    REG_P := %00000000
    REG_A := REG_X := REG_Y := $00
    exec2($A0, $1A) ' LDY #$1A
    if \assertEquals($1A, REG_Y) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($A0, $00) ' LDY #$00
    if \assertEquals($00, REG_Y) or \assertBinEquals(%00000010, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($A0, $8A) ' LDY #$8A
    if \assertEquals($8A, REG_Y) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_zpg_addressing() | addr

    ser.str(string("test_zpg_addressing ... "))

    REG_A := $00
    cpu.poke($14, $1A)

    exec2($A5, $14) ' LDA $14
    if \assertEquals($1A, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_abs_addressing() | addr

    ser.str(string("test_abs_addressing ... "))

    REG_A := $00
    cpu.poke($2010, $1B)

    exec3($AD, $10, $20) ' LDA $2010
    if \assertEquals($1B, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_abs_x_addressing() | addr

    ser.str(string("test_abs_x_addressing ... "))

    REG_A := REG_Y := $00
    REG_X := $05
    cpu.poke($2010 + REG_X, $1C)

    exec3($BD, $10, $20) ' LDA $2010,X
    if \assertEquals($1C, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_abs_y_addressing() | addr

    ser.str(string("test_abs_y_addressing ... "))

    REG_A := REG_X := $00
    REG_Y := $06
    cpu.poke($2010 + REG_Y, $1D)

    exec3($B9, $10, $20) ' LDA $2010,Y
    if \assertEquals($1D, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_ind_x_addressing() | addr

    ser.str(string("test_ind_x_addressing ... "))

    REG_A := REG_Y := $00
    REG_X := $15
    cpu.pokew(REG_X + $10, $2080)
    cpu.poke($2080, $1D)

    exec2($A1, $10) ' LDA ($10,X)
    if \assertEquals($1D, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_ind_y_addressing() | addr

    ser.str(string("test_ind_y_addressing ... "))

    REG_A := REG_X := $00
    REG_Y := $16
    cpu.pokew($20, $2090 - REG_Y)
    cpu.poke($2090, $1E)

    exec2($B1, $20) ' LDA ($20),Y
    if \assertEquals($1E, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_zpg_x_addressing() | addr

    ser.str(string("test_zpg_x_addressing ... "))

    REG_A := REG_Y := $00
    REG_X := $15
    cpu.poke($20 + REG_X, $1F)

    exec2($B5, $20) ' LDA $20,X
    if \assertEquals($1F, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_adc()

    ser.str(string("test_adc ... "))

    REG_P := $00
    REG_A := $00
    exec2($69, $01) ' ADC #$01
    if \assertEquals($01, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($69, $7F) ' ADC #$7F
    if \assertEquals($80, REG_A) or \assertBinEquals(%11000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($69, $80) ' ADC #$80
    if \assertEquals($00, REG_A) or \assertBinEquals(%01000011, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_adc_dec()

    ser.str(string("test_adc_dec ... "))

    REG_P := $08
    REG_A := $08
    exec2($69, $12) ' ADC #$12
    if \assertEquals($20, REG_A) or \assertBinEquals(%00001000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($69, $49) ' ADC #$49
    if \assertEquals($69, REG_A) or \assertBinEquals(%00001000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($69, $50) ' ADC #$50
    if \assertEquals($19, REG_A) or \assertBinEquals(%11001001, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_sbc()

    ser.str(string("test_sbc ... "))

    REG_P := $00
    REG_A := $00
    exec2($E9, $01) ' SBC #$01
    if \assertEquals($FE, REG_A) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($E9, $7F) ' SBC #$7F
    if \assertEquals($7E, REG_A) or \assertBinEquals(%01000001, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($E9, $80) ' SBC #$80
    if \assertEquals($FE, REG_A) or \assertBinEquals(%11000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_sbc_dec()

    ser.str(string("test_sbc_dec ... "))

    REG_A := $09
    REG_P := $09
    exec2($E9, $20) ' SBC #$20
    if \assertEquals($89, REG_A) or \assertBinEquals(%10001000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($E9, $49) ' SBC #$49
    if \assertEquals($39, REG_A) or \assertBinEquals(%01001001, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($E9, $50) ' SBC #$50
    if \assertEquals($89, REG_A) or \assertBinEquals(%10001000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_inc()

    ser.str(string("test_inc abs ... "))

    REG_P := $00
    cpu.poke($1020, $10)
    exec3($EE, $20, $10)
    if \assertEquals($11, cpu.peek($1020))
        disassemble()
        registers()
        abort(0)

    ser.str(string("zpg ... "))

    REG_P := $00
    cpu.poke($10, $10)
    exec2($E6, $10)
    if \assertEquals($11, cpu.peek($10))
        disassemble()
        registers()
        abort(0)

    ser.str(string("abs_x ... "))

    REG_P := $00
    REG_X := $05
    cpu.poke($1020 + REG_X, $10)
    exec3($FE, $20, $10)
    if \assertEquals($11, cpu.peek($1020 + REG_X))
        disassemble()
        registers()
        abort(0)

    ser.str(string("zpg_x ... "))

    REG_P := $00
    REG_X := $05
    cpu.poke($10 + REG_X, $10)
    exec2($F6, $10)
    if \assertEquals($11, cpu.peek($10 + REG_X))
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_dec()

    ser.str(string("test_dec abs ... "))

    REG_P := $00
    cpu.poke($1020, $10)
    exec3($CE, $20, $10)
    if \assertEquals($0F, cpu.peek($1020))
        disassemble()
        registers()
        abort(0)

    ser.str(string("zpg ... "))

    REG_P := $00
    cpu.poke($10, $10)
    exec2($C6, $10)
    if \assertEquals($0F, cpu.peek($10))
        disassemble()
        registers()
        abort(0)

    ser.str(string("abs_x ... "))

    REG_P := $00
    REG_X := $05
    cpu.poke($1020 + REG_X, $10)
    exec3($DE, $20, $10)
    if \assertEquals($0F, cpu.peek($1020 + REG_X))
        disassemble()
        registers()
        abort(0)

    ser.str(string("zpg_x ... "))

    REG_P := $00
    REG_X := $05
    cpu.poke($10 + REG_X, $10)
    exec2($D6, $10)
    if \assertEquals($0F, cpu.peek($10 + REG_X))
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_and()

    ser.str(string("test_and ... "))

    REG_P := $00
    REG_A := %01010101
    exec2($29, %01100110) ' AND
    if \assertBinEquals(%01000100, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_A := %11111111
    exec2($29, %00000000) ' AND
    if \assertBinEquals(%00000000, REG_A) or \assertBinEquals(%00000010, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_A := %11111111
    exec2($29, %10000000) ' AND
    if \assertBinEquals(%10000000, REG_A) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_ora()

    ser.str(string("test_ora ... "))

    REG_P := $00
    REG_A := %01010101
    exec2($09, %01100110) ' ORA
    if \assertBinEquals(%01110111, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_A := %00000000
    exec2($09, %00000000) ' ORA
    if \assertBinEquals(%00000000, REG_A) or \assertBinEquals(%00000010, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_A := %00000000
    exec2($09, %10000000) ' ORA
    if \assertBinEquals(%10000000, REG_A) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_eor()

    ser.str(string("test_eor ... "))

    REG_P := $00
    REG_A :=   %01010101
    exec2($49, %01100110) ' EOR
    if \assertBinEquals(%0011_0011, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_A :=   %10000000
    exec2($49, %10000000) ' EOR
    if \assertBinEquals(%00000000, REG_A) or \assertBinEquals(%00000010, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_A :=   %00000001
    exec2($49, %10000001) ' EOR
    if \assertBinEquals(%10000000, REG_A) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bit()

    ser.str(string("test_bit zpg ... "))

    REG_P := $00
    REG_A := $01

    cpu.poke($10, $01)
    exec2($24, $10) ' BIT
    if \assertEquals($01, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    cpu.poke($10, $80)
    exec2($24, $10) ' BIT
    if \assertEquals($01, REG_A) or \assertBinEquals(%10000010, REG_P)
        disassemble()
        registers()
        abort(0)

    cpu.poke($10, $40)
    exec2($24, $10) ' BIT
    if \assertEquals($01, REG_A) or \assertBinEquals(%01000010, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("abs ... "))

    REG_P := $00
    REG_A := $02

    cpu.poke($1020, $02)
    exec3($2C, $20, $10) ' BIT
    if \assertEquals($02, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    cpu.poke($1020, $80)
    exec3($2C, $20, $10) ' BIT
    if \assertEquals($02, REG_A) or \assertBinEquals(%10000010, REG_P)
        disassemble()
        registers()
        abort(0)

    cpu.poke($1020, $40)
    exec3($2C, $20, $10) ' BIT
    if \assertEquals($02, REG_A) or \assertBinEquals(%01000010, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_cmp()

    ser.str(string("test_cmp ... "))

    REG_A := $10

    REG_P := $00
    exec2($C9, $00) ' CMP #$00
    if \assertEquals($10, REG_A) or \assertBinEquals(%00000001, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_P := $00
    exec2($C9, $10) ' CMP #$10
    if \assertEquals($10, REG_A) or \assertBinEquals(%00000011, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_P := $00
    exec2($C9, $20) ' CMP #$20
    if \assertEquals($10, REG_A) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_asl()

    ser.str(string("test_asl ... "))

    REG_P := %00000000
    REG_A := %10000010
    exec1($0A) ' ASL
    if \assertEquals(%00000100, REG_A) or \assertBinEquals(%00000001, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_P := %00000001
    REG_A := %00000010
    exec1($0A) ' ASL
    if \assertEquals(%00000100, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_rol()

    ser.str(string("test_rol ... "))

    REG_P := %00000000
    REG_A := %10000010
    exec1($2A) ' ROL
    if \assertEquals(%00000100, REG_A) or \assertBinEquals(%00000001, REG_P)
        disassemble()
        registers()
        abort(0)

    REG_P := %00000001
    REG_A := %00000010
    exec1($2A) ' ROL
    if \assertEquals(%00000101, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_pha() | addr

    ser.str(string("test_pha ... "))

    REG_A := $83
    REG_S := $FF
    exec1($48) ' PHA
    if \assertEquals(cpu.peek($1FF), REG_A) or \assertEquals($FE, REG_S)
        disassemble()
        registers()
        abort(0)

    REG_A := $00
    exec1($68) ' PLA
    if \assertEquals(cpu.peek($1FF), REG_A) or \assertEquals($FF, REG_S)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_php() | addr

    ser.str(string("test_php ... "))

    REG_P := $C1
    REG_S := $FF
    exec1($08) ' PHP
    if \assertEquals(cpu.peek($1FF), REG_P) or \assertEquals($FE, REG_S)
        disassemble()
        registers()
        abort(0)

    REG_P := $00
    exec1($28) ' PLP
    if \assertEquals(cpu.peek($1FF) | %00110000, REG_P) or \assertEquals($FF, REG_S)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bcc() | addr

    ser.str(string("test_bcc ... "))

    REG_P := %00000000

    REG_PC := $0200
    cpu.exec2($90, $10) ' BCC
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($B0, $10) ' BCS
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bcs() | addr

    ser.str(string("test_bcs ... "))

    REG_P := %00000001

    REG_PC := $0200
    cpu.exec2($90, $10) ' BCC
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($B0, $10) ' BCS
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_beq() | addr

    ser.str(string("test_beq ... "))

    REG_P := %00000010

    REG_PC := $0200
    cpu.exec2($F0, $10) ' BEQ
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($D0, $10) ' BNE
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bne() | addr

    ser.str(string("test_bne ... "))

    REG_P := %00000000

    REG_PC := $0200
    cpu.exec2($F0, $10) ' BEQ
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($D0, $10) ' BNE
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bmi() | addr

    ser.str(string("test_bmi ... "))

    REG_P := %10000000

    REG_PC := $0200
    cpu.exec2($30, $10) ' BMI
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($10, $10) ' BPL
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bpl() | addr

    ser.str(string("test_bpl ... "))

    REG_P := %00000000

    REG_PC := $0200
    cpu.exec2($30, $10) ' BMI
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($10, $10) ' BPL
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bvc() | addr

    ser.str(string("test_bvc ... "))

    REG_P := %00000000

    REG_PC := $0200
    cpu.exec2($50, $10) ' BVC
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($70, $10) ' BVS
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_bvs() | addr

    ser.str(string("test_bvs ... "))

    REG_P := %01000000

    REG_PC := $0200
    cpu.exec2($50, $10) ' BVC
    if \assertWordEquals($0202, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    REG_PC := $0200
    cpu.exec2($70, $10) ' BVS
    if \assertWordEquals($0202 + $10, REG_PC)
        REG_PC := $0200
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_clear_flags() | addr

    ser.str(string("test_clear_flags ... "))

    REG_P := %11111111
    exec1($18) ' CLC
    if \assertBinEquals(%11111110, REG_P)
        registers()
        disassemble()
        abort(0)

    REG_P := %11111111
    exec1($D8) ' CLD
    if \assertBinEquals(%11110111, REG_P)
        registers()
        disassemble()
        abort(0)

    REG_P := %11111111
    exec1($58) ' CLI
    if \assertBinEquals(%11111011, REG_P)
        registers()
        disassemble()
        abort(0)

    REG_P := %11111111
    exec1($B8) ' CLV
    if \assertBinEquals(%10111111, REG_P)
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_set_flags() | addr

    ser.str(string("test_set_flags ... "))

    REG_P := %00000000
    exec1($38) ' SEC
    if \assertBinEquals(%00000001, REG_P)
        registers()
        disassemble()
        abort(0)

    REG_P := %00000000
    exec1($F8) ' SED
    if \assertBinEquals(%00001000, REG_P)
        registers()
        disassemble()
        abort(0)

    REG_P := %00000000
    exec1($78) ' SEI
    if \assertBinEquals(%00000100, REG_P)
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_jsr() | addr

    ser.str(string("test_jsr ... "))

    REG_PC := $210
    REG_S := $FF
    cpu.exec3($20, $30, $40) ' JSR $4030
    if \assertWordEquals($4030, REG_PC) or \assertWordEquals($0212, cpu.peekw($1FE)) or \assertEquals($FD, REG_S)
        REG_PC := $0210
        registers()
        disassemble()
        abort(0)

    ser.str(string("rts ... "))

    cpu.exec1($60) ' RTS
    if \assertWordEquals($213, REG_PC) or \assertEquals($FF, REG_S)
        REG_PC := $4030
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_brk() | addr

    ser.str(string("test_brk ... "))

    REG_PC := $210
    REG_S := $FF
    REG_P := $81
    cpu.pokew($FFFE, $1250)
    cpu.exec1($00) ' BRK
    if \assertWordEquals($1250, REG_PC) or \assertEquals($81 + $10, cpu.peek($1FD)) or \assertWordEquals(cpu.peekw($1FE), $0212) or \assertEquals($FC, REG_S)
        REG_PC := $0210
        registers()
        disassemble()
        abort(0)

    ser.str(string("rti ... "))

    REG_P := $00
    cpu.exec1($40) ' RTI
    if \assertEquals($81 + $10, REG_P) or \assertWordEquals($0212, REG_PC) or \assertEquals($FF, REG_S)
        REG_PC := $1250
        registers()
        disassemble()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_stx_all()

    ser.str(string("test_stx ... "))

    REG_Y := $05
    REG_X := $1C
    cpu.poke($1020, $00)

    exec3($8E, $20, $10) ' STX $1020
    if \assertEquals(REG_X, cpu.peek($1020))
        disassemble()
        registers()
        abort(0)

    ser.str(string("zpg ... "))

    REG_Y := $05
    REG_X := $1C
    cpu.poke($10, $00)

    exec2($86, $10) ' STX $10
    if \assertEquals(REG_X, cpu.peek($10))
        disassemble()
        registers()
        abort(0)

    ser.str(string("zpg,y ... "))

    REG_Y := $05
    REG_X := $1C
    cpu.poke($10 + REG_Y, $00)

    exec2($96, $10) ' STX $10,Y
    if \assertEquals(REG_X, cpu.peek($10 + REG_Y))
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_cycles()

    ser.str(string("test_cycles abs_x ... "))

    CPU_T := 0
    REG_X := $10
    exec3($BD, $80, $10) ' LDA $1080,X
    if \assertEquals(4, CPU_T)
        disassemble()
        registers()
        abort(0)

    ser.str(string("abs_x (cross)... "))

    CPU_T := 0
    REG_X := $FF
    exec3($BD, $80, $10) ' LDA $1080,X
    if \assertEquals(4 + 1, CPU_T)
        disassemble()
        registers()
        abort(0)

    ser.str(string("abs_y ... "))

    CPU_T := 0
    REG_Y := $10
    exec3($B9, $80, $10) ' LDA $1080,X
    if \assertEquals(4, CPU_T)
        disassemble()
        registers()
        abort(0)

    ser.str(string("abs_y (cross)... "))

    CPU_T := 0
    REG_Y := $FF
    exec3($B9, $80, $10) ' LDA $1080,X
    if \assertEquals(4 + 1, CPU_T)
        disassemble()
        registers()
        abort(0)

    ser.str(string("ind_y ... "))

    CPU_T := 0
    REG_Y := $00
    cpu.pokew($00, $1080)
    exec2($B1, $00) ' LDA ($00),Y
    if \assertEquals(5, CPU_T)
        disassemble()
        registers()
        abort(0)

    ser.str(string("ind_y (cross) ... "))

    CPU_T := 0
    REG_Y := $80
    cpu.pokew($00, $1080)
    exec2($B1, $00) ' LDA ($00),Y
    if \assertEquals(5 + 1, CPU_T)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PRI exec1(b1) | pc

    pc := REG_PC
    cpu.exec1(b1)
    REG_PC := pc

PRI exec2(b1, b2) | pc

    pc := REG_PC
    cpu.exec2(b1, b2)
    REG_PC := pc

PRI exec3(b1, b2, b3) | pc

    pc := REG_PC
    cpu.exec3(b1, b2, b3)
    REG_PC := pc

PRI assertEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=$%2.2x, actual=$%2.2x", 13, 10), expected, actual)
        abort(1)

PRI assertWordEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=$%4.4x, actual=$%4.4x", 13, 10), expected, actual)
        abort(1)

PRI assertBinEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=\%%8.8b, actual=\%%8.8b", 13, 10), expected, actual)
        abort(1)

PRI registers()

    ser.fstr1(string("PC: $%4.4x"), REG_PC)
    ser.fstr1(string(" A: $%2.2x"), REG_A)
    ser.fstr1(string(" X: $%2.2x"), REG_X)
    ser.fstr1(string(" Y: $%2.2x"), REG_Y)
    ser.fstr1(string(" S: $%2.2x"), REG_S)
    ser.str(string(" P: "))
    ser.tx((REG_P & $80) <> 0 ? "N" : "-")
    ser.tx((REG_P & $40) <> 0 ? "V" : "-")
    ser.tx((REG_P & $20) <> 0 ? "1" : "-")
    ser.tx((REG_P & $10) <> 0 ? "B" : "-")
    ser.tx((REG_P & $08) <> 0 ? "D" : "-")
    ser.tx((REG_P & $04) <> 0 ? "I" : "-")
    ser.tx((REG_P & $02) <> 0 ? "Z" : "-")
    ser.tx((REG_P & $01) <> 0 ? "C" : "-")
    ser.fstr1(string(" T: %d"), CPU_T)
    ser.str(string(13, 10))

PRI disassemble()

    ser.str(string("    "))
    case cpu.peek(REG_PC)

        $6D: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $65: dump(REG_PC, 2)
             ser.fstr1(string("ADC $%2.2x"), cpu.peek(REG_PC+1))
        $69: dump(REG_PC, 2)
             ser.fstr1(string("ADC #$%2.2x"), cpu.peek(REG_PC+1))
        $7D: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $79: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $61: dump(REG_PC, 2)
             ser.fstr1(string("ADC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $71: dump(REG_PC, 2)
             ser.fstr1(string("ADC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $75: dump(REG_PC, 2)
             ser.fstr1(string("ADC $%2.2x,X"), cpu.peek(REG_PC+1))

        $2D: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $25: dump(REG_PC, 2)
             ser.fstr1(string("AND $%2.2x"), cpu.peek(REG_PC+1))
        $29: dump(REG_PC, 2)
             ser.fstr1(string("AND #$%2.2x"), cpu.peek(REG_PC+1))
        $3D: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $39: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $21: dump(REG_PC, 2)
             ser.fstr1(string("AND ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $31: dump(REG_PC, 2)
             ser.fstr1(string("AND ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $35: dump(REG_PC, 2)
             ser.fstr1(string("AND $%2.2x,X"), cpu.peek(REG_PC+1))

        $0A: dump(REG_PC, 1)
             ser.fstr0(string("ASL"))
        $0E: dump(REG_PC, 3)
             ser.fstr2(string("ASL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $06: dump(REG_PC, 2)
             ser.fstr1(string("ASL $%2.2x"), cpu.peek(REG_PC+1))
        $1E: dump(REG_PC, 3)
             ser.fstr2(string("ASL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $16: dump(REG_PC, 2)
             ser.fstr1(string("ASL $%2.2x,X"), cpu.peek(REG_PC+1))

        $90: dump(REG_PC, 2)
             ser.fstr1(string("BCC $%4.4x"), REG_PC+2 + signed(cpu.peek(REG_PC+1)))
        $B0: dump(REG_PC, 2)
             ser.fstr1(string("BCS $%4.4x"), REG_PC+2 + signed(cpu.peek(REG_PC+1)))

        $F0: dump(REG_PC, 3)
             ser.fstr2(string("BEQ $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $2C: dump(REG_PC, 3)
             ser.fstr2(string("BIT $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
             ser.fstr1(string(" ($%2.2x)"), cpu.peek((cpu.peek(REG_PC+2) << 8) | cpu.peek(REG_PC+1)))
        $24: dump(REG_PC, 2)
             ser.fstr1(string("BIT $%2.2x"), cpu.peek(REG_PC+1))

        $30: dump(REG_PC, 3)
             ser.fstr2(string("BMI $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $D0: dump(REG_PC, 3)
             ser.fstr2(string("BNE $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $10: dump(REG_PC, 3)
             ser.fstr2(string("BPL $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $00: dump(REG_PC, 1)
             ser.fstr0(string("BRK"))

        $50: dump(REG_PC, 3)
             ser.fstr2(string("BVC $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $70: dump(REG_PC, 3)
             ser.fstr2(string("BVS $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $18: dump(REG_PC, 1)
             ser.fstr0(string("CLC"))
        $D8: dump(REG_PC, 1)
             ser.fstr0(string("CLD"))
        $58: dump(REG_PC, 1)
             ser.fstr0(string("CLI"))
        $B8: dump(REG_PC, 1)
             ser.fstr0(string("CLV"))

        $CD: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C5: dump(REG_PC, 2)
             ser.fstr1(string("CMP $%2.2x"), cpu.peek(REG_PC+1))
        $C9: dump(REG_PC, 2)
             ser.fstr1(string("CMP #$%2.2x"), cpu.peek(REG_PC+1))
        $DD: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $D9: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C1: dump(REG_PC, 2)
             ser.fstr1(string("CMP ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D1: dump(REG_PC, 2)
             ser.fstr1(string("CMP ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $D5: dump(REG_PC, 2)
             ser.fstr1(string("CMP $%2.2x,X"), cpu.peek(REG_PC+1))

        $EC: dump(REG_PC, 3)
             ser.fstr2(string("CPX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E4: dump(REG_PC, 2)
             ser.fstr1(string("CPX $%2.2x"), cpu.peek(REG_PC+1))
        $E0: dump(REG_PC, 2)
             ser.fstr1(string("CPX #$%2.2x"), cpu.peek(REG_PC+1))

        $CC: dump(REG_PC, 3)
             ser.fstr2(string("CPY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C4: dump(REG_PC, 2)
             ser.fstr1(string("CPY $%2.2x"), cpu.peek(REG_PC+1))
        $C0: dump(REG_PC, 2)
             ser.fstr1(string("CPY #$%2.2x"), cpu.peek(REG_PC+1))

        $CE: dump(REG_PC, 3)
             ser.fstr2(string("DEC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C6: dump(REG_PC, 2)
             ser.fstr1(string("DEC $%2.2x"), cpu.peek(REG_PC+1))
        $DE: dump(REG_PC, 2)
             ser.fstr1(string("DEC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D6: dump(REG_PC, 2)
             ser.fstr1(string("DEC $%2.2x,X"), cpu.peek(REG_PC+1))

        $CA: dump(REG_PC, 1)
             ser.fstr0(string("DEX"))

        $88: dump(REG_PC, 1)
             ser.fstr0(string("DEY"))

        $4D: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $45: dump(REG_PC, 2)
             ser.fstr1(string("EOR $%2.2x"), cpu.peek(REG_PC+1))
        $49: dump(REG_PC, 2)
             ser.fstr1(string("EOR #$%2.2x"), cpu.peek(REG_PC+1))
        $5D: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $59: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $41: dump(REG_PC, 2)
             ser.fstr1(string("EOR ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $51: dump(REG_PC, 2)
             ser.fstr1(string("EOR ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $55: dump(REG_PC, 2)
             ser.fstr1(string("EOR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EE: dump(REG_PC, 3)
             ser.fstr2(string("INC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E6: dump(REG_PC, 2)
             ser.fstr1(string("INC $%2.2x"), cpu.peek(REG_PC+1))
        $FE: dump(REG_PC, 2)
             ser.fstr1(string("INC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F6: dump(REG_PC, 2)
             ser.fstr1(string("INC $%2.2x,X"), cpu.peek(REG_PC+1))

        $E8: dump(REG_PC, 1)
             ser.fstr0(string("INX"))

        $C8: dump(REG_PC, 1)
             ser.fstr0(string("INY"))

        $4C: dump(REG_PC, 3)
             ser.fstr2(string("JMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $6C: dump(REG_PC, 3)
             ser.fstr2(string("JMP ($%2.2x%2.2x)"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $20: dump(REG_PC, 3)
             ser.fstr2(string("JSR #$%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $AD: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A5: dump(REG_PC, 2)
             ser.fstr1(string("LDA $%2.2x"), cpu.peek(REG_PC+1))
        $A9: dump(REG_PC, 2)
             ser.fstr1(string("LDA #$%2.2x"), cpu.peek(REG_PC+1))
        $BD: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B9: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A1: dump(REG_PC, 2)
             ser.fstr1(string("LDA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $B1: dump(REG_PC, 2)
             ser.fstr1(string("LDA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $B5: dump(REG_PC, 2)
             ser.fstr1(string("LDA $%2.2x,X"), cpu.peek(REG_PC+1))

        $AE: dump(REG_PC, 3)
             ser.fstr2(string("LDX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A6: dump(REG_PC, 2)
             ser.fstr1(string("LDX $%2.2x"), cpu.peek(REG_PC+1))
        $A2: dump(REG_PC, 2)
             ser.fstr1(string("LDX #$%2.2x"), cpu.peek(REG_PC+1))
        $BE: dump(REG_PC, 3)
             ser.fstr2(string("LDX $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B6: dump(REG_PC, 2)
             ser.fstr1(string("LDX $%2.2x,Y"), cpu.peek(REG_PC+1))

        $AC: dump(REG_PC, 3)
             ser.fstr2(string("LDY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A4: dump(REG_PC, 2)
             ser.fstr1(string("LDY $%2.2x"), cpu.peek(REG_PC+1))
        $A0: dump(REG_PC, 2)
             ser.fstr1(string("LDY #$%2.2x"), cpu.peek(REG_PC+1))
        $BC: dump(REG_PC, 3)
             ser.fstr2(string("LDY $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B4: dump(REG_PC, 2)
             ser.fstr1(string("LDY $%2.2x,X"), cpu.peek(REG_PC+1))

        $4A: dump(REG_PC, 1)
             ser.fstr0(string("LSR"))
        $4E: dump(REG_PC, 3)
             ser.fstr2(string("LSR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $46: dump(REG_PC, 2)
             ser.fstr1(string("LSR $%2.2x"), cpu.peek(REG_PC+1))
        $5E: dump(REG_PC, 3)
             ser.fstr2(string("LSR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $56: dump(REG_PC, 2)
             ser.fstr1(string("LSR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EA: dump(REG_PC, 1)
             ser.fstr0(string("NOP"))

        $0D: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $05: dump(REG_PC, 2)
             ser.fstr1(string("ORA $%2.2x"), cpu.peek(REG_PC+1))
        $09: dump(REG_PC, 2)
             ser.fstr1(string("ORA #$%2.2x"), cpu.peek(REG_PC+1))
        $1D: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $19: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $01: dump(REG_PC, 2)
             ser.fstr1(string("ORA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $11: dump(REG_PC, 2)
             ser.fstr1(string("ORA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $15: dump(REG_PC, 2)
             ser.fstr1(string("ORA $%2.2x,X"), cpu.peek(REG_PC+1))

        $48: dump(REG_PC, 1)
             ser.fstr0(string("PHA"))
        $08: dump(REG_PC, 1)
             ser.fstr0(string("PHP"))
        $68: dump(REG_PC, 1)
             ser.fstr0(string("PLA"))
        $28: dump(REG_PC, 1)
             ser.fstr0(string("PLP"))

        $2A: dump(REG_PC, 1)
             ser.fstr0(string("ROL"))
        $2E: dump(REG_PC, 3)
             ser.fstr2(string("ROL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $26: dump(REG_PC, 2)
             ser.fstr1(string("ROL $%2.2x"), cpu.peek(REG_PC+1))
        $3E: dump(REG_PC, 3)
             ser.fstr2(string("ROL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $36: dump(REG_PC, 2)
             ser.fstr1(string("ROL $%2.2x,X"), cpu.peek(REG_PC+1))

        $6A: dump(REG_PC, 1)
             ser.fstr0(string("ROR"))
        $6E: dump(REG_PC, 3)
             ser.fstr2(string("ROR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $66: dump(REG_PC, 2)
             ser.fstr1(string("ROR $%2.2x"), cpu.peek(REG_PC+1))
        $7E: dump(REG_PC, 3)
             ser.fstr2(string("ROR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $76: dump(REG_PC, 2)
             ser.fstr1(string("ROR $%2.2x,X"), cpu.peek(REG_PC+1))

        $40: dump(REG_PC, 1)
             ser.fstr0(string("RTI"))
        $60: dump(REG_PC, 1)
             ser.fstr0(string("RTS"))

        $ED: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E5: dump(REG_PC, 2)
             ser.fstr1(string("SBC $%2.2x"), cpu.peek(REG_PC+1))
        $E9: dump(REG_PC, 2)
             ser.fstr1(string("SBC #$%2.2x"), cpu.peek(REG_PC+1))
        $FD: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $F9: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E1: dump(REG_PC, 2)
             ser.fstr1(string("SBC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F1: dump(REG_PC, 2)
             ser.fstr1(string("SBC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $F5: dump(REG_PC, 2)
             ser.fstr1(string("SBC $%2.2x,X"), cpu.peek(REG_PC+1))

        $38: dump(REG_PC, 1)
             ser.fstr0(string("SEC"))
        $F8: dump(REG_PC, 1)
             ser.fstr0(string("SED"))
        $78: dump(REG_PC, 1)
             ser.fstr0(string("SEI"))

        $8D: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $85: dump(REG_PC, 2)
             ser.fstr1(string("STA $%2.2x"), cpu.peek(REG_PC+1))
        $9D: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $99: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $81: dump(REG_PC, 2)
             ser.fstr1(string("STA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $91: dump(REG_PC, 2)
             ser.fstr1(string("STA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $95: dump(REG_PC, 2)
             ser.fstr1(string("STA $%2.2x,X"), cpu.peek(REG_PC+1))

        $8E: dump(REG_PC, 3)
             ser.fstr2(string("STX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $86: dump(REG_PC, 2)
             ser.fstr1(string("STX $%2.2x"), cpu.peek(REG_PC+1))
        $9E: dump(REG_PC, 2)
             ser.fstr1(string("STX $%2.2x,Y"), cpu.peek(REG_PC+1))

        $8C: dump(REG_PC, 3)
             ser.fstr2(string("STY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $84: dump(REG_PC, 2)
             ser.fstr1(string("STY $%2.2x"), cpu.peek(REG_PC+1))
        $94: dump(REG_PC, 2)
             ser.fstr1(string("STY $%2.2x,X"), cpu.peek(REG_PC+1))

        $AA: dump(REG_PC, 1)
             ser.fstr0(string("TAX"))
        $A8: dump(REG_PC, 1)
             ser.fstr0(string("TAY"))
        $BA: dump(REG_PC, 1)
             ser.fstr0(string("TSX"))
        $8A: dump(REG_PC, 1)
             ser.fstr0(string("TXA"))
        $9A: dump(REG_PC, 1)
             ser.fstr0(string("TXS"))
        $98: dump(REG_PC, 1)
             ser.fstr0(string("TIA"))

        other: dump(REG_PC, 3)
    ser.str(string(13, 10))

PRI dump(addr, count)

    repeat count
        ser.fstr1(string("$%2.2x "), cpu.peek(addr++))
    if count < 3
        repeat 3 - count
             ser.str(string("    "))

PRI signed(n) : rc

    rc := n < $80 ? n : -(256 - n)