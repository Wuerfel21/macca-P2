{
    MOS6502 Emulator Tests
    Written by Marco Maccaferri <macca@maccasoft.com>
}

CON
    _CLKFREQ = 160_000_000

VAR

    long REG_A  ' 8-bit working registers
    long REG_X
    long REG_Y
    long REG_S  ' 8-bit stack pointer
    long REG_P  ' 8-bit flag register
    long REG_PC ' 16-bit program counter
    long CPU_T  ' cpu cycles

OBJ

    cpu : "m6502"
    ser : "com.serial"

PUB main()

    ser.Start(115_200)
    waitms(100)

    test_ld_imm()

    ser.str(string(13, 10, "done!", 13, 10))

PUB test_ld_imm() | addr

    ser.str(string(13, 10, "test_ld_imm", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)
    cpu.poke(addr++, $A9)   ' LDA #$1A
    cpu.poke(addr++, $1A)
    cpu.poke(addr++, $A2)   ' LDX #$2B
    cpu.poke(addr++, $2B)
    cpu.poke(addr++, $A0)   ' LDY #$3C
    cpu.poke(addr++, $3C)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($1A, REG_A)
    assertEquals($2B, REG_X)
    assertEquals($3C, REG_Y)
    ser.str(string("Ok", 13, 10))

PRI run() | cog

    cog := cpu.start(@REG_A)
    repeat while cogchk(cog)
        if pollatn()
            registers()
            disassemble()
            cogatn(1 << cog)
        waitms(1)

PRI assertEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=%2.2x, actual=%2.2x", 13, 10), expected, actual)
        abort(0)

PRI assertBinEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=%8.8b, actual=%8.8b", 13, 10), expected, actual)
        abort(0)

PRI registers()

    ser.fstr1(string("PC: $%4.4x"), REG_PC)
    ser.fstr1(string(" A: $%2.2x"), REG_A)
    ser.fstr1(string(" X: $%2.2x"), REG_X)
    ser.fstr1(string(" Y: $%2.2x"), REG_Y)
    ser.fstr1(string(" S: $%2.2x"), REG_S)
    ser.str(string(" P: "))
    ser.tx((REG_P & $80) <> 0 ? "N" : "-")
    ser.tx((REG_P & $40) <> 0 ? "V" : "-")
    ser.tx((REG_P & $20) <> 0 ? "1" : "-")
    ser.tx((REG_P & $10) <> 0 ? "B" : "-")
    ser.tx((REG_P & $08) <> 0 ? "D" : "-")
    ser.tx((REG_P & $04) <> 0 ? "I" : "-")
    ser.tx((REG_P & $02) <> 0 ? "Z" : "-")
    ser.tx((REG_P & $01) <> 0 ? "C" : "-")
    ser.fstr1(string(" T: %d"), CPU_T)
    ser.str(string(13, 10))

PRI disassemble()

    ser.str(string("    "))
    case cpu.peek(REG_PC)

        $6D: ser.fstr2(string("ADC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $65: ser.fstr1(string("ADC $%2.2x"), cpu.peek(REG_PC+1))
        $69: ser.fstr1(string("ADC #$%2.2x"), cpu.peek(REG_PC+1))
        $7D: ser.fstr2(string("ADC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $79: ser.fstr2(string("ADC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $61: ser.fstr1(string("ADC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $71: ser.fstr1(string("ADC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $75: ser.fstr1(string("ADC $%2.2x,X"), cpu.peek(REG_PC+1))

        $2D: ser.fstr2(string("AND $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $25: ser.fstr1(string("AND $%2.2x"), cpu.peek(REG_PC+1))
        $29: ser.fstr1(string("AND #$%2.2x"), cpu.peek(REG_PC+1))
        $3D: ser.fstr2(string("AND $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $39: ser.fstr2(string("AND $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $21: ser.fstr1(string("AND ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $31: ser.fstr1(string("AND ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $35: ser.fstr1(string("AND $%2.2x,X"), cpu.peek(REG_PC+1))

        $0A: ser.fstr0(string("ASL"))
        $0E: ser.fstr2(string("ASL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $06: ser.fstr1(string("ASL $%2.2x"), cpu.peek(REG_PC+1))
        $1E: ser.fstr2(string("ASL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $16: ser.fstr1(string("ASL $%2.2x,X"), cpu.peek(REG_PC+1))

        $90: ser.fstr0(string("BCC"))
        $B0: ser.fstr0(string("BCS"))

        $F0: ser.fstr2(string("BEQ $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $2C: ser.fstr2(string("BIT $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $24: ser.fstr1(string("BIT $%2.2x"), cpu.peek(REG_PC+1))

        $30: ser.fstr2(string("BMI $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $D0: ser.fstr2(string("BNE $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $10: ser.fstr2(string("BPL $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $00: ser.fstr0(string("BRK"))

        $50: ser.fstr2(string("BVC $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $70: ser.fstr2(string("BVS $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $18: ser.fstr0(string("CLC"))
        $D8: ser.fstr0(string("CLD"))
        $58: ser.fstr0(string("CLI"))
        $B8: ser.fstr0(string("CLV"))

        $CD: ser.fstr2(string("CMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C5: ser.fstr1(string("CMP $%2.2x"), cpu.peek(REG_PC+1))
        $C9: ser.fstr1(string("CMP #$%2.2x"), cpu.peek(REG_PC+1))
        $DD: ser.fstr2(string("CMP $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $D9: ser.fstr2(string("CMP $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C1: ser.fstr1(string("CMP ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D1: ser.fstr1(string("CMP ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $D5: ser.fstr1(string("CMP $%2.2x,X"), cpu.peek(REG_PC+1))

        $EC: ser.fstr2(string("CPX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E4: ser.fstr1(string("CPX $%2.2x"), cpu.peek(REG_PC+1))
        $E0: ser.fstr1(string("CPX #$%2.2x"), cpu.peek(REG_PC+1))

        $CC: ser.fstr2(string("CPY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C4: ser.fstr1(string("CPY $%2.2x"), cpu.peek(REG_PC+1))
        $C0: ser.fstr1(string("CPY #$%2.2x"), cpu.peek(REG_PC+1))

        $CE: ser.fstr2(string("DEC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C6: ser.fstr1(string("DEC $%2.2x"), cpu.peek(REG_PC+1))
        $DE: ser.fstr1(string("DEC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D6: ser.fstr1(string("DEC $%2.2x,X"), cpu.peek(REG_PC+1))

        $CA: ser.fstr0(string("DEX"))

        $88: ser.fstr0(string("DEY"))

        $4D: ser.fstr2(string("EOR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $45: ser.fstr1(string("EOR $%2.2x"), cpu.peek(REG_PC+1))
        $49: ser.fstr1(string("EOR #$%2.2x"), cpu.peek(REG_PC+1))
        $5D: ser.fstr2(string("EOR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $59: ser.fstr2(string("EOR $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $41: ser.fstr1(string("EOR ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $51: ser.fstr1(string("EOR ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $55: ser.fstr1(string("EOR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EE: ser.fstr2(string("INC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E6: ser.fstr1(string("INC $%2.2x"), cpu.peek(REG_PC+1))
        $FE: ser.fstr1(string("INC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F6: ser.fstr1(string("INC $%2.2x,X"), cpu.peek(REG_PC+1))

        $E8: ser.fstr0(string("INX"))

        $C8: ser.fstr0(string("INY"))

        $4C: ser.fstr2(string("JMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $6C: ser.fstr2(string("JMP ($%2.2x%2.2x)"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $20: ser.fstr2(string("JSR #$%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $AD: ser.fstr2(string("LDA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A5: ser.fstr1(string("LDA $%2.2x"), cpu.peek(REG_PC+1))
        $A9: ser.fstr1(string("LDA #$%2.2x"), cpu.peek(REG_PC+1))
        $BD: ser.fstr2(string("LDA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B9: ser.fstr2(string("LDA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A1: ser.fstr1(string("LDA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $B1: ser.fstr1(string("LDA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $B5: ser.fstr1(string("LDA $%2.2x,X"), cpu.peek(REG_PC+1))

        $AE: ser.fstr2(string("LDX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A6: ser.fstr1(string("LDX $%2.2x"), cpu.peek(REG_PC+1))
        $A2: ser.fstr1(string("LDX #$%2.2x"), cpu.peek(REG_PC+1))
        $BE: ser.fstr2(string("LDX $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B6: ser.fstr1(string("LDX $%2.2x,Y"), cpu.peek(REG_PC+1))

        $AC: ser.fstr2(string("LDY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A4: ser.fstr1(string("LDY $%2.2x"), cpu.peek(REG_PC+1))
        $A0: ser.fstr1(string("LDY #$%2.2x"), cpu.peek(REG_PC+1))
        $BC: ser.fstr2(string("LDY $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B4: ser.fstr1(string("LDY $%2.2x,X"), cpu.peek(REG_PC+1))

        $4A: ser.fstr0(string("LSR"))
        $4E: ser.fstr2(string("LSR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $46: ser.fstr1(string("LSR $%2.2x"), cpu.peek(REG_PC+1))
        $5E: ser.fstr2(string("LSR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $56: ser.fstr1(string("LSR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EA: ser.fstr0(string("NOP"))

        $0D: ser.fstr2(string("ORA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $05: ser.fstr1(string("ORA $%2.2x"), cpu.peek(REG_PC+1))
        $09: ser.fstr1(string("ORA #$%2.2x"), cpu.peek(REG_PC+1))
        $1D: ser.fstr2(string("ORA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $19: ser.fstr2(string("ORA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $01: ser.fstr1(string("ORA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $11: ser.fstr1(string("ORA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $15: ser.fstr1(string("ORA $%2.2x,X"), cpu.peek(REG_PC+1))

        $48: ser.fstr0(string("PHA"))
        $08: ser.fstr0(string("PHP"))
        $68: ser.fstr0(string("PLA"))
        $28: ser.fstr0(string("PLP"))

        $2A: ser.fstr0(string("ROL"))
        $2E: ser.fstr2(string("ROL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $26: ser.fstr1(string("ROL $%2.2x"), cpu.peek(REG_PC+1))
        $3E: ser.fstr2(string("ROL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $36: ser.fstr1(string("ROL $%2.2x,X"), cpu.peek(REG_PC+1))

        $6A: ser.fstr0(string("ROR"))
        $6E: ser.fstr2(string("ROR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $66: ser.fstr1(string("ROR $%2.2x"), cpu.peek(REG_PC+1))
        $7E: ser.fstr2(string("ROR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $76: ser.fstr1(string("ROR $%2.2x,X"), cpu.peek(REG_PC+1))

        $40: ser.fstr0(string("RTI"))
        $60: ser.fstr0(string("RTS"))

        $ED: ser.fstr2(string("SBC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E5: ser.fstr1(string("SBC $%2.2x"), cpu.peek(REG_PC+1))
        $E9: ser.fstr1(string("SBC #$%2.2x"), cpu.peek(REG_PC+1))
        $FD: ser.fstr2(string("SBC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $F9: ser.fstr2(string("SBC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E1: ser.fstr1(string("SBC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F1: ser.fstr1(string("SBC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $F5: ser.fstr1(string("SBC $%2.2x,X"), cpu.peek(REG_PC+1))

        $38: ser.fstr0(string("SEC"))
        $F8: ser.fstr0(string("SED"))
        $78: ser.fstr0(string("SEI"))

        $8D: ser.fstr2(string("STA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $85: ser.fstr1(string("STA $%2.2x"), cpu.peek(REG_PC+1))
        $9D: ser.fstr2(string("STA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $99: ser.fstr2(string("STA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $81: ser.fstr1(string("STA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $91: ser.fstr1(string("STA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $95: ser.fstr1(string("STA $%2.2x,X"), cpu.peek(REG_PC+1))

        $8E: ser.fstr2(string("STX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $86: ser.fstr1(string("STX $%2.2x"), cpu.peek(REG_PC+1))
        $9E: ser.fstr1(string("STX ($%2.2x),Y"), cpu.peek(REG_PC+1))

        $8C: ser.fstr2(string("STY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $84: ser.fstr1(string("STY $%2.2x"), cpu.peek(REG_PC+1))
        $94: ser.fstr1(string("STY ($%2.2x),X"), cpu.peek(REG_PC+1))

        $AA: ser.fstr0(string("TAX"))
        $A8: ser.fstr0(string("TAI"))
        $BA: ser.fstr0(string("TSX"))
        $8A: ser.fstr0(string("TXA"))
        $9A: ser.fstr0(string("TXS"))
        $98: ser.fstr0(string("TIA"))

        other: ser.fstr3(string("$%2.2x $%2.2x $%2.2x"), cpu.peek(REG_PC), cpu.peek(REG_PC+1), cpu.peek(REG_PC+2))
    ser.str(string(13, 10))

PRI signed(n) : rc

    rc := n < $80 ? n : -(256 - n)
