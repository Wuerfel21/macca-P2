{
    MOS6502 Emulator Tests
    Written by Marco Maccaferri <macca@maccasoft.com>
}

CON
    _CLKFREQ = 160_000_000

VAR

    long REG_A  ' 8-bit working registers
    long REG_X
    long REG_Y
    long REG_S  ' 8-bit stack pointer
    long REG_P  ' 8-bit flag register
    long REG_PC ' 16-bit program counter
    long CPU_T  ' cpu cycles

OBJ

    cpu : "m6502"
    ser : "com.serial"

PUB main()

    ser.start(115_200)
    ser.rx()

    cpu.pokew($FFFC, $200)
    cpu.start(@REG_A)

    test_adc()
    test_adc_dec()
    test_sbc()
    test_sbc_dec()
    test_lda()
    test_sta()
    test_rol()
    test_push()

    ser.str(string("done!", 13, 10))
    repeat
        waitct(0)

PUB test_adc()

    ser.str(string("test_adc ... "))

    REG_P := $00
    REG_A := $00
    exec2($69, $01) ' ADC #$01
    if \assertEquals($01, REG_A) or \assertBinEquals(%00000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($69, $7F) ' ADC #$7F
    if \assertEquals($80, REG_A) or \assertBinEquals(%11000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($69, $80) ' ADC #$80
    if \assertEquals($00, REG_A) or \assertBinEquals(%01000011, REG_P)
        disassemble()
        registers()
        abort(0)

{
    REG_P := $01
    REG_A := $1F
    exec2($69, $01) ' ADC #$01
    if \assertEquals($21, REG_A)
        disassemble()
        registers()
        abort(0)

    REG_P := $00
    REG_A := $10
    cpu.poke($2010, $02)
    exec3($6D, $10, $20) ' ADC $2010
    if \assertEquals($12, REG_A)
        disassemble()
        registers()
        abort(0)

    REG_P := $00
    REG_A := $10
    cpu.poke($20, $03)
    exec2($65, $20) ' ADC $20
    if \assertEquals($13, REG_A)
        disassemble()
        registers()
        abort(0)

    REG_P := $00
    REG_A := $10
    REG_X := $05
    cpu.poke($2010 + REG_X, $04)
    exec3($7D, $10, $20) ' ADC $2010,X
    if \assertEquals($14, REG_A)
        disassemble()
        registers()
        abort(0)

    REG_P := $00
    REG_A := $10
    REG_Y := $06
    cpu.poke($2010 + REG_Y, $05)
    exec3($79, $10, $20) ' ADC $2010,Y
    if \assertEquals($15, REG_A)
        disassemble()
        registers()
        abort(0)
}

    ser.str(string("Ok", 13, 10))

PUB test_adc_dec()

    ser.str(string("test_adc_dec ... "))

    REG_A := $09
    REG_P := $08
    exec2($69, $03) ' ADC #$03
    if \assertEquals($12, REG_A)
        disassemble()
        registers()
        abort(0)

    REG_A := $09
    REG_P := $09
    exec2($69, $03) ' ADC #$03
    if \assertEquals($13, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_sbc()

    ser.str(string("test_sbc ... "))

    REG_P := $00
    REG_A := $00
    exec2($E9, $01) ' SBC #$01
    if \assertEquals($FE, REG_A) or \assertBinEquals(%10000000, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($E9, $7F) ' SBC #$7F
    if \assertEquals($7E, REG_A) or \assertBinEquals(%01000001, REG_P)
        disassemble()
        registers()
        abort(0)

    exec2($E9, $80) ' SBC #$80
    if \assertEquals($FE, REG_A) or \assertBinEquals(%11000000, REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_sbc_dec()

    ser.str(string("test_sbc_dec ... "))

    REG_A := $20
    REG_P := $08
    exec2($E9, $03) ' SBC #$03
    if \assertEquals($16, REG_A)
        disassemble()
        registers()
        abort(0)

    REG_A := $20
    REG_P := $09
    exec2($E9, $03) ' SBC #$03
    if \assertEquals($17, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_lda()

    ser.str(string("test_lda ... "))

    REG_A := $00
    exec2($A9, $01) ' LDA #$01
    if \assertEquals($01, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_sta()

    ser.str(string("test_sta ... "))

    REG_A := $10
    cpu.poke($1020, $01)
    exec3($8D, $20, $10) ' STA #$1020
    if \assertEquals(REG_A, cpu.peek($1020))
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_rol()

    ser.str(string("test_rol ... "))

    REG_A := $83
    exec1($2A) ' ROL
    if \assertEquals($06, REG_A)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PUB test_push() | addr

    ser.str(string("test_push ... "))

    REG_A := $83
    REG_S := $FF
    REG_PC := $200
    exec1($48) ' PHA
    if \assertEquals(cpu.peek($1FF), REG_A)
        disassemble()
        registers()
        abort(0)

    REG_P := $11
    REG_S := $FF
    REG_PC := $200
    exec1($08) ' PHP
    if \assertEquals(cpu.peek($1FF), REG_P)
        disassemble()
        registers()
        abort(0)

    ser.str(string("Ok", 13, 10))

PRI exec1(b1) | pc

    pc := REG_PC
    cpu.exec1(b1)
    REG_PC := pc

PRI exec2(b1, b2) | pc

    pc := REG_PC
    cpu.exec2(b1, b2)
    REG_PC := pc

PRI exec3(b1, b2, b3) | pc

    pc := REG_PC
    cpu.exec3(b1, b2, b3)
    REG_PC := pc

{
    test_and()

    test_adc()
    test_sbc()
    test_adc_abs()
    test_sbc_abs()

    ' OK ----
    test_adc_abs()
    test_adc_zpg()
    test_adc_imm()
    test_adc_abs_x()
    test_adc_abs_y()
    test_adc_ind_x()
    test_adc_ind_y()
    test_adc_zpg_x()

    test_asl()
    test_asl_abs()

    test_bcc()

    test_cmp()
    test_cmp_zpg()
    test_cpx()
    test_cpy()

    test_ld_imm()
    test_ld_zpg()
    test_ld_abs()

    test_push_pop()
}

{
PUB test_cmp() | addr, cog

    ser.str(string(13, 10, "test_cmp", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $C9)   ' CMP #$40
    cpu.poke(addr++, $40)
    cpu.poke(addr++, $C9)   ' CMP #$10
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $C9)   ' CMP #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $C9)   ' CMP #$A0
    cpu.poke(addr++, $A0)
    cpu.poke(addr++, $FF)   ' HALT


    cog := cpu.start(@REG_A)

    repeat 3
        waitatn()
        registers()
        disassemble()
        cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100011, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100001, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    ser.str(string("Ok", 13, 10))

PUB test_cmp_zpg() | addr, cog

    ser.str(string(13, 10, "test_cmp_zpg", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke($10, $40)
    cpu.poke($11, $10)
    cpu.poke($12, $01)
    cpu.poke($13, $A0)

    cpu.poke(addr++, $A9)   ' LDA #$10
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $C5)   ' CMP $10
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $C5)   ' CMP $11
    cpu.poke(addr++, $11)
    cpu.poke(addr++, $C5)   ' CMP $12
    cpu.poke(addr++, $12)
    cpu.poke(addr++, $C5)   ' CMP $13
    cpu.poke(addr++, $13)
    cpu.poke(addr++, $FF)   ' HALT


    cog := cpu.start(@REG_A)

    repeat 3
        waitatn()
        registers()
        disassemble()
        cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100011, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100001, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    ser.str(string("Ok", 13, 10))

PUB test_cpx() | addr, cog

    ser.str(string(13, 10, "test_cpx", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke(addr++, $A2)   ' LDX #$01
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $E0)   ' CPX #$40
    cpu.poke(addr++, $40)
    cpu.poke(addr++, $E0)   ' CPX #$10
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $E0)   ' CPX #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $E0)   ' CPX #$A0
    cpu.poke(addr++, $A0)
    cpu.poke(addr++, $FF)   ' HALT


    cog := cpu.start(@REG_A)

    repeat 3
        waitatn()
        registers()
        disassemble()
        cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100011, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100001, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    ser.str(string("Ok", 13, 10))

PUB test_cpy() | addr, cog

    ser.str(string(13, 10, "test_cpy", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke(addr++, $A0)   ' LDY #$01
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $C0)   ' CPY #$40
    cpu.poke(addr++, $40)
    cpu.poke(addr++, $C0)   ' CPY #$10
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $C0)   ' CPY #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $C0)   ' CPY #$A0
    cpu.poke(addr++, $A0)
    cpu.poke(addr++, $FF)   ' HALT


    cog := cpu.start(@REG_A)

    repeat 3
        waitatn()
        registers()
        disassemble()
        cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100011, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%00100001, REG_P)

    waitatn()
    registers()
    disassemble()
    cogatn(1 << cog)
    assertBinEquals(%10100000, REG_P)

    ser.str(string("Ok", 13, 10))

PUB test_bcc() | addr, cog

    ser.str(string(13, 10, "test_bcc", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke(addr++, $EA)   ' NOP
    cpu.poke(addr++, $EA)   ' NOP
    cpu.poke(addr++, $90)   ' BCC +2
    cpu.poke(addr++, $02)   ' NOP
    cpu.poke(addr++, $EA)   ' NOP
    cpu.poke(addr++, $EA)   ' NOP
    cpu.poke(addr++, $90)   ' BCC -8
    cpu.poke(addr++, $F8)   ' NOP
    cpu.poke(addr++, $FF)   ' NOP

    cog := cpu.start(@REG_A)

    repeat 4
        waitatn()
        registers()
        disassemble()
        cogatn(1 << cog)
    assertWordEquals($0206, REG_PC)

    repeat 1
        waitatn()
        registers()
        disassemble()
        cogatn(1 << cog)
    assertWordEquals($0200, REG_PC)

    cogstop(cog)

    ser.str(string("Ok", 13, 10))

PUB test_ld_imm() | addr

    ser.str(string(13, 10, "test_ld_imm", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)
    cpu.poke(addr++, $A9)   ' LDA #$1A
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $A2)   ' LDX #$2B
    cpu.poke(addr++, $02)
    cpu.poke(addr++, $A0)   ' LDY #$3C
    cpu.poke(addr++, $03)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($01, REG_A)
    assertEquals($02, REG_X)
    assertEquals($03, REG_Y)
    ser.str(string("Ok", 13, 10))

PUB test_ld_zpg() | addr

    ser.str(string(13, 10, "test_ld_zpg", 13, 10))

    cpu.poke($14, $04)
    cpu.poke($15, $05)
    cpu.poke($16, $06)

    addr := $0200
    cpu.pokew($FFFC, addr)
    cpu.poke(addr++, $A5)   ' LDA $14
    cpu.poke(addr++, $14)
    cpu.poke(addr++, $A6)   ' LDX $15
    cpu.poke(addr++, $15)
    cpu.poke(addr++, $A4)   ' LDY $16
    cpu.poke(addr++, $16)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($04, REG_A)
    assertEquals($05, REG_X)
    assertEquals($06, REG_Y)
    ser.str(string("Ok", 13, 10))

PUB test_ld_abs() | addr

    ser.str(string(13, 10, "test_ld_abs", 13, 10))

    cpu.poke($1017, $07)
    cpu.poke($1018, $08)
    cpu.poke($1019, $09)

    addr := $0200
    cpu.pokew($FFFC, addr)
    cpu.poke(addr++, $AD)   ' LDA $1017
    cpu.poke(addr++, $17)
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $AE)   ' LDX $1018
    cpu.poke(addr++, $18)
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $AC)   ' LDY $1019
    cpu.poke(addr++, $19)
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($07, REG_A)
    assertEquals($08, REG_X)
    assertEquals($09, REG_Y)
    ser.str(string("Ok", 13, 10))

PUB test_adc_abs() | addr

    ser.str(string(13, 10, "test_adc_abs", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke($1020, $04)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $6D)   ' ADC $02
    cpu.poke(addr++, $20)
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($05, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_adc_zpg() | addr

    ser.str(string(13, 10, "test_adc_zpg", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke($02, $03)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $65)   ' ADC $02
    cpu.poke(addr++, $02)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($04, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_adc_imm() | addr

    ser.str(string(13, 10, "test_adc_imm", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $69)   ' ADC #$02
    cpu.poke(addr++, $02)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($03, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_adc_abs_x() | addr

    ser.str(string(13, 10, "test_adc_abs_x", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke($1035, $05)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $A2)   ' LDX #$35
    cpu.poke(addr++, $35)
    cpu.poke(addr++, $7D)   ' ADC $1000,X
    cpu.poke(addr++, $00)
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($06, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_adc_abs_y() | addr

    ser.str(string(13, 10, "test_adc_abs_y", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke($1045, $06)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $A0)   ' LDY #$45
    cpu.poke(addr++, $45)
    cpu.poke(addr++, $79)   ' ADC $1000,Y
    cpu.poke(addr++, $00)
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($07, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_adc_ind_x() | addr

    ser.str(string(13, 10, "test_adc_ind_x", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.pokew($50, $2010)
    cpu.poke($2010, $08)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $A2)   ' LDX #$10
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $61)   ' ADC ($40,X)
    cpu.poke(addr++, $40)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($09, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_adc_ind_y() | addr

    ser.str(string(13, 10, "test_adc_ind_x", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.pokew($40, $2020)
    cpu.poke($2030, $09)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $A0)   ' LDY #$10
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $71)   ' ADC ($40),Y
    cpu.poke(addr++, $40)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($0A, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_adc_zpg_x() | addr

    ser.str(string(13, 10, "test_adc_zpg", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke($15, $0A)

    cpu.poke(addr++, $A9)   ' LDA #$01
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $A2)   ' LDX #$05
    cpu.poke(addr++, $05)
    cpu.poke(addr++, $75)   ' ADC $10,X
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($0B, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_asl() | addr

    ser.str(string(13, 10, "test_asl", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke(addr++, $A9)   ' LDA #$C3
    cpu.poke(addr++, $C3)
    cpu.poke(addr++, $0A)   ' ASL
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($86, REG_A)
    assertBinEquals(%10100001, REG_P)
    ser.str(string("Ok", 13, 10))

PUB test_asl_abs() | addr

    ser.str(string(13, 10, "test_asl", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke($1020, $C3)
    cpu.poke(addr++, $0E)   ' ASL $1020
    cpu.poke(addr++, $20)
    cpu.poke(addr++, $10)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($86, cpu.peek($1020))
    assertBinEquals(%10100001, REG_P)
    ser.str(string("Ok", 13, 10))

PUB test_adc() | addr

    ser.str(string(13, 10, "test_adc", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)
    cpu.poke(addr++, $A9)   ' LDA #$1A
    cpu.poke(addr++, $00)
    cpu.poke(addr++, $69)   ' ADC #$1A
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $69)   ' ADC #$7F
    cpu.poke(addr++, $7F)
    cpu.poke(addr++, $69)   ' ADC #$1A
    cpu.poke(addr++, $80)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($00, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_sbc() | addr

    ser.str(string(13, 10, "test_sbc", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)
    cpu.poke(addr++, $A9)   ' LDA #$1A
    cpu.poke(addr++, $00)
    cpu.poke(addr++, $E9)   ' SBC #$1A
    cpu.poke(addr++, $01)
    cpu.poke(addr++, $E9)   ' SBC #$7F
    cpu.poke(addr++, $7F)
    cpu.poke(addr++, $E9)   ' SBC #$1A
    cpu.poke(addr++, $80)
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($FE, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_sbc_abs() | addr

    ser.str(string(13, 10, "test_sbc_abs", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.pokew($1020, $01)
    cpu.pokew($1021, $7F)
    cpu.pokew($1022, $80)

    cpu.poke(addr++, $A9)   ' LDA #$00
    cpu.poke(addr++, $00)

    cpu.poke(addr++, $ED)   ' SBC $1020
    cpu.poke(addr++, $20)
    cpu.poke(addr++, $10)

    cpu.poke(addr++, $ED)   ' SBC $1021
    cpu.poke(addr++, $21)
    cpu.poke(addr++, $10)

    cpu.poke(addr++, $ED)   ' SBC $1022
    cpu.poke(addr++, $22)
    cpu.poke(addr++, $10)

    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($FE, REG_A)
    ser.str(string("Ok", 13, 10))

PUB test_push_pop() | addr

    ser.str(string(13, 10, "test_push_pop", 13, 10))

    addr := $0200
    cpu.pokew($FFFC, addr)
    cpu.poke(addr++, $A9)   ' LDA #$00
    cpu.poke(addr++, $00)
    cpu.poke(addr++, $08)   ' PHP
    cpu.poke(addr++, $A9)   ' LDA #$1A
    cpu.poke(addr++, $1A)
    cpu.poke(addr++, $48)   ' PHA

    cpu.poke(addr++, $A9)   ' LDA #$11
    cpu.poke(addr++, $11)

    cpu.poke(addr++, $68)   ' PLA
    cpu.poke(addr++, $28)   ' PLP
    cpu.poke(addr++, $FF)   ' HALT

    run()

    assertEquals($1A, REG_A)
    assertEquals($22, REG_P)
    assertEquals($22, cpu.peek($100 + $FF))
    assertEquals($1A, cpu.peek($100 + $FE))
    ser.str(string("Ok", 13, 10))

PUB test_and() | addr

    ser.str(string(13, 10, "test_and"))

    addr := $0200
    cpu.pokew($FFFC, addr)

    cpu.poke(addr++, $A9) ' LDA #$9F
    cpu.poke(addr++, $9F)
    cpu.poke(addr++, $29) ' AND #$3C
    cpu.poke(addr++, $3C)
    cpu.poke(addr++, $FF) ' HALT

    run()

    assertEquals($1C, REG_A)
    ser.str(string("Ok", 13, 10))

PRI run() | cog

    cog := cpu.start(@REG_A)
    repeat while cogchk(cog)
        if pollatn()
            registers()
            disassemble()
            cogatn(1 << cog)
        waitms(1)
}

PRI assertEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=$%2.2x, actual=$%2.2x", 13, 10), expected, actual)
        abort(1)

PRI assertWordEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=$%4.4x, actual=$%4.4x", 13, 10), expected, actual)
        abort(1)

PRI assertBinEquals(expected, actual)

    if expected <> actual
        ser.fstr2(string("Assertion failed, expected=\%%8.8b, actual=\%%8.8b", 13, 10), expected, actual)
        abort(1)

PRI registers()

    ser.fstr1(string("PC: $%4.4x"), REG_PC)
    ser.fstr1(string(" A: $%2.2x"), REG_A)
    ser.fstr1(string(" X: $%2.2x"), REG_X)
    ser.fstr1(string(" Y: $%2.2x"), REG_Y)
    ser.fstr1(string(" S: $%2.2x"), REG_S)
    ser.str(string(" P: "))
    ser.tx((REG_P & $80) <> 0 ? "N" : "-")
    ser.tx((REG_P & $40) <> 0 ? "V" : "-")
    ser.tx((REG_P & $20) <> 0 ? "1" : "-")
    ser.tx((REG_P & $10) <> 0 ? "B" : "-")
    ser.tx((REG_P & $08) <> 0 ? "D" : "-")
    ser.tx((REG_P & $04) <> 0 ? "I" : "-")
    ser.tx((REG_P & $02) <> 0 ? "Z" : "-")
    ser.tx((REG_P & $01) <> 0 ? "C" : "-")
    ser.fstr1(string(" T: %d"), CPU_T)
    ser.str(string(13, 10))

PRI disassemble()

    ser.str(string("    "))
    case cpu.peek(REG_PC)

        $6D: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $65: dump(REG_PC, 2)
             ser.fstr1(string("ADC $%2.2x"), cpu.peek(REG_PC+1))
        $69: dump(REG_PC, 2)
             ser.fstr1(string("ADC #$%2.2x"), cpu.peek(REG_PC+1))
        $7D: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $79: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $61: dump(REG_PC, 2)
             ser.fstr1(string("ADC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $71: dump(REG_PC, 2)
             ser.fstr1(string("ADC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $75: dump(REG_PC, 2)
             ser.fstr1(string("ADC $%2.2x,X"), cpu.peek(REG_PC+1))

        $2D: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $25: dump(REG_PC, 2)
             ser.fstr1(string("AND $%2.2x"), cpu.peek(REG_PC+1))
        $29: dump(REG_PC, 2)
             ser.fstr1(string("AND #$%2.2x"), cpu.peek(REG_PC+1))
        $3D: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $39: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $21: dump(REG_PC, 2)
             ser.fstr1(string("AND ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $31: dump(REG_PC, 2)
             ser.fstr1(string("AND ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $35: dump(REG_PC, 2)
             ser.fstr1(string("AND $%2.2x,X"), cpu.peek(REG_PC+1))

        $0A: dump(REG_PC, 1)
             ser.fstr0(string("ASL"))
        $0E: dump(REG_PC, 3)
             ser.fstr2(string("ASL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $06: dump(REG_PC, 2)
             ser.fstr1(string("ASL $%2.2x"), cpu.peek(REG_PC+1))
        $1E: dump(REG_PC, 3)
             ser.fstr2(string("ASL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $16: dump(REG_PC, 2)
             ser.fstr1(string("ASL $%2.2x,X"), cpu.peek(REG_PC+1))

        $90: dump(REG_PC, 2)
             ser.fstr1(string("BCC $%4.4x"), REG_PC+2 + signed(cpu.peek(REG_PC+1)))
        $B0: dump(REG_PC, 2)
             ser.fstr1(string("BCS $%4.4x"), REG_PC+2 + signed(cpu.peek(REG_PC+1)))

        $F0: dump(REG_PC, 3)
             ser.fstr2(string("BEQ $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $2C: dump(REG_PC, 3)
             ser.fstr2(string("BIT $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $24: dump(REG_PC, 2)
             ser.fstr1(string("BIT $%2.2x"), cpu.peek(REG_PC+1))

        $30: dump(REG_PC, 3)
             ser.fstr2(string("BMI $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $D0: dump(REG_PC, 3)
             ser.fstr2(string("BNE $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $10: dump(REG_PC, 3)
             ser.fstr2(string("BPL $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $00: dump(REG_PC, 1)
             ser.fstr0(string("BRK"))

        $50: dump(REG_PC, 3)
             ser.fstr2(string("BVC $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $70: dump(REG_PC, 3)
             ser.fstr2(string("BVS $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $18: dump(REG_PC, 1)
             ser.fstr0(string("CLC"))
        $D8: dump(REG_PC, 1)
             ser.fstr0(string("CLD"))
        $58: dump(REG_PC, 1)
             ser.fstr0(string("CLI"))
        $B8: dump(REG_PC, 1)
             ser.fstr0(string("CLV"))

        $CD: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C5: dump(REG_PC, 2)
             ser.fstr1(string("CMP $%2.2x"), cpu.peek(REG_PC+1))
        $C9: dump(REG_PC, 2)
             ser.fstr1(string("CMP #$%2.2x"), cpu.peek(REG_PC+1))
        $DD: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $D9: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C1: dump(REG_PC, 2)
             ser.fstr1(string("CMP ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D1: dump(REG_PC, 2)
             ser.fstr1(string("CMP ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $D5: dump(REG_PC, 2)
             ser.fstr1(string("CMP $%2.2x,X"), cpu.peek(REG_PC+1))

        $EC: dump(REG_PC, 3)
             ser.fstr2(string("CPX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E4: dump(REG_PC, 2)
             ser.fstr1(string("CPX $%2.2x"), cpu.peek(REG_PC+1))
        $E0: dump(REG_PC, 2)
             ser.fstr1(string("CPX #$%2.2x"), cpu.peek(REG_PC+1))

        $CC: dump(REG_PC, 3)
             ser.fstr2(string("CPY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C4: dump(REG_PC, 2)
             ser.fstr1(string("CPY $%2.2x"), cpu.peek(REG_PC+1))
        $C0: dump(REG_PC, 2)
             ser.fstr1(string("CPY #$%2.2x"), cpu.peek(REG_PC+1))

        $CE: dump(REG_PC, 3)
             ser.fstr2(string("DEC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C6: dump(REG_PC, 2)
             ser.fstr1(string("DEC $%2.2x"), cpu.peek(REG_PC+1))
        $DE: dump(REG_PC, 2)
             ser.fstr1(string("DEC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D6: dump(REG_PC, 2)
             ser.fstr1(string("DEC $%2.2x,X"), cpu.peek(REG_PC+1))

        $CA: dump(REG_PC, 1)
             ser.fstr0(string("DEX"))

        $88: dump(REG_PC, 1)
             ser.fstr0(string("DEY"))

        $4D: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $45: dump(REG_PC, 2)
             ser.fstr1(string("EOR $%2.2x"), cpu.peek(REG_PC+1))
        $49: dump(REG_PC, 2)
             ser.fstr1(string("EOR #$%2.2x"), cpu.peek(REG_PC+1))
        $5D: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $59: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $41: dump(REG_PC, 2)
             ser.fstr1(string("EOR ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $51: dump(REG_PC, 2)
             ser.fstr1(string("EOR ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $55: dump(REG_PC, 2)
             ser.fstr1(string("EOR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EE: dump(REG_PC, 3)
             ser.fstr2(string("INC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E6: dump(REG_PC, 2)
             ser.fstr1(string("INC $%2.2x"), cpu.peek(REG_PC+1))
        $FE: dump(REG_PC, 2)
             ser.fstr1(string("INC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F6: dump(REG_PC, 2)
             ser.fstr1(string("INC $%2.2x,X"), cpu.peek(REG_PC+1))

        $E8: dump(REG_PC, 1)
             ser.fstr0(string("INX"))

        $C8: dump(REG_PC, 1)
             ser.fstr0(string("INY"))

        $4C: dump(REG_PC, 3)
             ser.fstr2(string("JMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $6C: dump(REG_PC, 3)
             ser.fstr2(string("JMP ($%2.2x%2.2x)"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $20: dump(REG_PC, 3)
             ser.fstr2(string("JSR #$%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $AD: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A5: dump(REG_PC, 2)
             ser.fstr1(string("LDA $%2.2x"), cpu.peek(REG_PC+1))
        $A9: dump(REG_PC, 2)
             ser.fstr1(string("LDA #$%2.2x"), cpu.peek(REG_PC+1))
        $BD: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B9: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A1: dump(REG_PC, 2)
             ser.fstr1(string("LDA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $B1: dump(REG_PC, 2)
             ser.fstr1(string("LDA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $B5: dump(REG_PC, 2)
             ser.fstr1(string("LDA $%2.2x,X"), cpu.peek(REG_PC+1))

        $AE: dump(REG_PC, 3)
             ser.fstr2(string("LDX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A6: dump(REG_PC, 2)
             ser.fstr1(string("LDX $%2.2x"), cpu.peek(REG_PC+1))
        $A2: dump(REG_PC, 2)
             ser.fstr1(string("LDX #$%2.2x"), cpu.peek(REG_PC+1))
        $BE: dump(REG_PC, 3)
             ser.fstr2(string("LDX $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B6: dump(REG_PC, 2)
             ser.fstr1(string("LDX $%2.2x,Y"), cpu.peek(REG_PC+1))

        $AC: dump(REG_PC, 3)
             ser.fstr2(string("LDY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A4: dump(REG_PC, 2)
             ser.fstr1(string("LDY $%2.2x"), cpu.peek(REG_PC+1))
        $A0: dump(REG_PC, 2)
             ser.fstr1(string("LDY #$%2.2x"), cpu.peek(REG_PC+1))
        $BC: dump(REG_PC, 3)
             ser.fstr2(string("LDY $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B4: dump(REG_PC, 2)
             ser.fstr1(string("LDY $%2.2x,X"), cpu.peek(REG_PC+1))

        $4A: dump(REG_PC, 1)
             ser.fstr0(string("LSR"))
        $4E: dump(REG_PC, 3)
             ser.fstr2(string("LSR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $46: dump(REG_PC, 2)
             ser.fstr1(string("LSR $%2.2x"), cpu.peek(REG_PC+1))
        $5E: dump(REG_PC, 3)
             ser.fstr2(string("LSR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $56: dump(REG_PC, 2)
             ser.fstr1(string("LSR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EA: dump(REG_PC, 1)
             ser.fstr0(string("NOP"))

        $0D: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $05: dump(REG_PC, 2)
             ser.fstr1(string("ORA $%2.2x"), cpu.peek(REG_PC+1))
        $09: dump(REG_PC, 2)
             ser.fstr1(string("ORA #$%2.2x"), cpu.peek(REG_PC+1))
        $1D: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $19: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $01: dump(REG_PC, 2)
             ser.fstr1(string("ORA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $11: dump(REG_PC, 2)
             ser.fstr1(string("ORA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $15: dump(REG_PC, 2)
             ser.fstr1(string("ORA $%2.2x,X"), cpu.peek(REG_PC+1))

        $48: dump(REG_PC, 1)
             ser.fstr0(string("PHA"))
        $08: dump(REG_PC, 1)
             ser.fstr0(string("PHP"))
        $68: dump(REG_PC, 1)
             ser.fstr0(string("PLA"))
        $28: dump(REG_PC, 1)
             ser.fstr0(string("PLP"))

        $2A: dump(REG_PC, 1)
             ser.fstr0(string("ROL"))
        $2E: dump(REG_PC, 3)
             ser.fstr2(string("ROL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $26: dump(REG_PC, 2)
             ser.fstr1(string("ROL $%2.2x"), cpu.peek(REG_PC+1))
        $3E: dump(REG_PC, 3)
             ser.fstr2(string("ROL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $36: dump(REG_PC, 2)
             ser.fstr1(string("ROL $%2.2x,X"), cpu.peek(REG_PC+1))

        $6A: dump(REG_PC, 1)
             ser.fstr0(string("ROR"))
        $6E: dump(REG_PC, 3)
             ser.fstr2(string("ROR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $66: dump(REG_PC, 2)
             ser.fstr1(string("ROR $%2.2x"), cpu.peek(REG_PC+1))
        $7E: dump(REG_PC, 3)
             ser.fstr2(string("ROR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $76: dump(REG_PC, 2)
             ser.fstr1(string("ROR $%2.2x,X"), cpu.peek(REG_PC+1))

        $40: dump(REG_PC, 1)
             ser.fstr0(string("RTI"))
        $60: dump(REG_PC, 1)
             ser.fstr0(string("RTS"))

        $ED: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E5: dump(REG_PC, 2)
             ser.fstr1(string("SBC $%2.2x"), cpu.peek(REG_PC+1))
        $E9: dump(REG_PC, 2)
             ser.fstr1(string("SBC #$%2.2x"), cpu.peek(REG_PC+1))
        $FD: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $F9: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E1: dump(REG_PC, 2)
             ser.fstr1(string("SBC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F1: dump(REG_PC, 2)
             ser.fstr1(string("SBC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $F5: dump(REG_PC, 2)
             ser.fstr1(string("SBC $%2.2x,X"), cpu.peek(REG_PC+1))

        $38: dump(REG_PC, 1)
             ser.fstr0(string("SEC"))
        $F8: dump(REG_PC, 1)
             ser.fstr0(string("SED"))
        $78: dump(REG_PC, 1)
             ser.fstr0(string("SEI"))

        $8D: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $85: dump(REG_PC, 2)
             ser.fstr1(string("STA $%2.2x"), cpu.peek(REG_PC+1))
        $9D: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $99: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $81: dump(REG_PC, 2)
             ser.fstr1(string("STA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $91: dump(REG_PC, 2)
             ser.fstr1(string("STA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $95: dump(REG_PC, 2)
             ser.fstr1(string("STA $%2.2x,X"), cpu.peek(REG_PC+1))

        $8E: dump(REG_PC, 3)
             ser.fstr2(string("STX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $86: dump(REG_PC, 2)
             ser.fstr1(string("STX $%2.2x"), cpu.peek(REG_PC+1))
        $9E: dump(REG_PC, 2)
             ser.fstr1(string("STX ($%2.2x),Y"), cpu.peek(REG_PC+1))

        $8C: dump(REG_PC, 3)
             ser.fstr2(string("STY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $84: dump(REG_PC, 2)
             ser.fstr1(string("STY $%2.2x"), cpu.peek(REG_PC+1))
        $94: dump(REG_PC, 2)
             ser.fstr1(string("STY ($%2.2x),X"), cpu.peek(REG_PC+1))

        $AA: dump(REG_PC, 1)
             ser.fstr0(string("TAX"))
        $A8: dump(REG_PC, 1)
             ser.fstr0(string("TAI"))
        $BA: dump(REG_PC, 1)
             ser.fstr0(string("TSX"))
        $8A: dump(REG_PC, 1)
             ser.fstr0(string("TXA"))
        $9A: dump(REG_PC, 1)
             ser.fstr0(string("TXS"))
        $98: dump(REG_PC, 1)
             ser.fstr0(string("TIA"))

        other: dump(REG_PC, 3)
    ser.str(string(13, 10))

PRI dump(addr, count)

    repeat count
        ser.fstr1(string("$%2.2x "), cpu.peek(addr++))
    if count < 3
        repeat 3 - count
             ser.str(string("    "))

PRI signed(n) : rc

    rc := n < $80 ? n : -(256 - n)
