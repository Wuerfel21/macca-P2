{
    MOS6502 Emulator Functional Test
    Written by Marco Maccaferri <macca@maccasoft.com>
}

CON
    _CLKFREQ = 160_000_000

VAR

    long REG_A  ' 8-bit working registers
    long REG_X
    long REG_Y
    long REG_S  ' 8-bit stack pointer
    long REG_P  ' 8-bit flag register
    long REG_PC ' 16-bit program counter
    long CPU_T  ' cpu cycles

OBJ

    cpu : "m6502"
    ser : "com.serial"

PUB main() | cog, prevPC

    ser.start(115_200)
    ser.rx()

    ser.str(string("Running 6502 functional test ... "))

    cpu.copymem(@tests_bin, $0000, @tests_bin_end - @tests_bin)
    cpu.pokew($FFFC, $400)
    cog := cpu.start(@REG_A)

    repeat while cogchk(cog)
        prevPC := REG_PC
        'registers()
        'disassemble()
        cogatn(1 << cog)
        repeat while cogchk(cog)
            if pollatn()
                quit
        if REG_PC == prevPC or REG_PC == $400 or REG_PC == $3469
            quit

    if not cogchk(cog)
        ser.str(string("unsupported instruction!", 13, 10))
        registers()
        disassemble()
    elseif REG_PC == $400 or REG_PC == $3469
        ser.str(string("success!", 13, 10))
    else
        ser.str(string("failure!", 13, 10))
        registers()
        disassemble()

    repeat
        waitct(0)

PRI registers()

    ser.fstr1(string("PC: $%4.4x"), REG_PC)
    ser.fstr1(string(" A: $%2.2x"), REG_A)
    ser.fstr1(string(" X: $%2.2x"), REG_X)
    ser.fstr1(string(" Y: $%2.2x"), REG_Y)
    ser.fstr1(string(" S: $%2.2x"), REG_S)
    ser.str(string(" P: "))
    ser.tx((REG_P & $80) <> 0 ? "N" : "-")
    ser.tx((REG_P & $40) <> 0 ? "V" : "-")
    ser.tx((REG_P & $20) <> 0 ? "1" : "-")
    ser.tx((REG_P & $10) <> 0 ? "B" : "-")
    ser.tx((REG_P & $08) <> 0 ? "D" : "-")
    ser.tx((REG_P & $04) <> 0 ? "I" : "-")
    ser.tx((REG_P & $02) <> 0 ? "Z" : "-")
    ser.tx((REG_P & $01) <> 0 ? "C" : "-")
    ser.fstr1(string(" T: %d"), CPU_T)
    ser.str(string(13, 10))

PRI disassemble()

    ser.str(string("    "))
    case cpu.peek(REG_PC)

        $6D: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $65: dump(REG_PC, 2)
             ser.fstr1(string("ADC $%2.2x"), cpu.peek(REG_PC+1))
        $69: dump(REG_PC, 2)
             ser.fstr1(string("ADC #$%2.2x"), cpu.peek(REG_PC+1))
        $7D: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $79: dump(REG_PC, 3)
             ser.fstr2(string("ADC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $61: dump(REG_PC, 2)
             ser.fstr1(string("ADC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $71: dump(REG_PC, 2)
             ser.fstr1(string("ADC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $75: dump(REG_PC, 2)
             ser.fstr1(string("ADC $%2.2x,X"), cpu.peek(REG_PC+1))

        $2D: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $25: dump(REG_PC, 2)
             ser.fstr1(string("AND $%2.2x"), cpu.peek(REG_PC+1))
        $29: dump(REG_PC, 2)
             ser.fstr1(string("AND #$%2.2x"), cpu.peek(REG_PC+1))
        $3D: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $39: dump(REG_PC, 3)
             ser.fstr2(string("AND $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $21: dump(REG_PC, 2)
             ser.fstr1(string("AND ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $31: dump(REG_PC, 2)
             ser.fstr1(string("AND ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $35: dump(REG_PC, 2)
             ser.fstr1(string("AND $%2.2x,X"), cpu.peek(REG_PC+1))

        $0A: dump(REG_PC, 1)
             ser.fstr0(string("ASL"))
        $0E: dump(REG_PC, 3)
             ser.fstr2(string("ASL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $06: dump(REG_PC, 2)
             ser.fstr1(string("ASL $%2.2x"), cpu.peek(REG_PC+1))
        $1E: dump(REG_PC, 3)
             ser.fstr2(string("ASL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $16: dump(REG_PC, 2)
             ser.fstr1(string("ASL $%2.2x,X"), cpu.peek(REG_PC+1))

        $90: dump(REG_PC, 2)
             ser.fstr1(string("BCC $%4.4x"), REG_PC+2 + signed(cpu.peek(REG_PC+1)))
        $B0: dump(REG_PC, 2)
             ser.fstr1(string("BCS $%4.4x"), REG_PC+2 + signed(cpu.peek(REG_PC+1)))

        $F0: dump(REG_PC, 3)
             ser.fstr2(string("BEQ $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $2C: dump(REG_PC, 3)
             ser.fstr2(string("BIT $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $24: dump(REG_PC, 2)
             ser.fstr1(string("BIT $%2.2x"), cpu.peek(REG_PC+1))

        $30: dump(REG_PC, 3)
             ser.fstr2(string("BMI $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $D0: dump(REG_PC, 3)
             ser.fstr2(string("BNE $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $10: dump(REG_PC, 3)
             ser.fstr2(string("BPL $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $00: dump(REG_PC, 1)
             ser.fstr0(string("BRK"))

        $50: dump(REG_PC, 3)
             ser.fstr2(string("BVC $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $70: dump(REG_PC, 3)
             ser.fstr2(string("BVS $%4.4x ($%2.2x)"), (REG_PC + 2) + signed(cpu.peek(REG_PC+1)), cpu.peek(REG_PC+1))

        $18: dump(REG_PC, 1)
             ser.fstr0(string("CLC"))
        $D8: dump(REG_PC, 1)
             ser.fstr0(string("CLD"))
        $58: dump(REG_PC, 1)
             ser.fstr0(string("CLI"))
        $B8: dump(REG_PC, 1)
             ser.fstr0(string("CLV"))

        $CD: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C5: dump(REG_PC, 2)
             ser.fstr1(string("CMP $%2.2x"), cpu.peek(REG_PC+1))
        $C9: dump(REG_PC, 2)
             ser.fstr1(string("CMP #$%2.2x"), cpu.peek(REG_PC+1))
        $DD: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $D9: dump(REG_PC, 3)
             ser.fstr2(string("CMP $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C1: dump(REG_PC, 2)
             ser.fstr1(string("CMP ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D1: dump(REG_PC, 2)
             ser.fstr1(string("CMP ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $D5: dump(REG_PC, 2)
             ser.fstr1(string("CMP $%2.2x,X"), cpu.peek(REG_PC+1))

        $EC: dump(REG_PC, 3)
             ser.fstr2(string("CPX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E4: dump(REG_PC, 2)
             ser.fstr1(string("CPX $%2.2x"), cpu.peek(REG_PC+1))
        $E0: dump(REG_PC, 2)
             ser.fstr1(string("CPX #$%2.2x"), cpu.peek(REG_PC+1))

        $CC: dump(REG_PC, 3)
             ser.fstr2(string("CPY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C4: dump(REG_PC, 2)
             ser.fstr1(string("CPY $%2.2x"), cpu.peek(REG_PC+1))
        $C0: dump(REG_PC, 2)
             ser.fstr1(string("CPY #$%2.2x"), cpu.peek(REG_PC+1))

        $CE: dump(REG_PC, 3)
             ser.fstr2(string("DEC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $C6: dump(REG_PC, 2)
             ser.fstr1(string("DEC $%2.2x"), cpu.peek(REG_PC+1))
        $DE: dump(REG_PC, 2)
             ser.fstr1(string("DEC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $D6: dump(REG_PC, 2)
             ser.fstr1(string("DEC $%2.2x,X"), cpu.peek(REG_PC+1))

        $CA: dump(REG_PC, 1)
             ser.fstr0(string("DEX"))

        $88: dump(REG_PC, 1)
             ser.fstr0(string("DEY"))

        $4D: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $45: dump(REG_PC, 2)
             ser.fstr1(string("EOR $%2.2x"), cpu.peek(REG_PC+1))
        $49: dump(REG_PC, 2)
             ser.fstr1(string("EOR #$%2.2x"), cpu.peek(REG_PC+1))
        $5D: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $59: dump(REG_PC, 3)
             ser.fstr2(string("EOR $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $41: dump(REG_PC, 2)
             ser.fstr1(string("EOR ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $51: dump(REG_PC, 2)
             ser.fstr1(string("EOR ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $55: dump(REG_PC, 2)
             ser.fstr1(string("EOR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EE: dump(REG_PC, 3)
             ser.fstr2(string("INC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E6: dump(REG_PC, 2)
             ser.fstr1(string("INC $%2.2x"), cpu.peek(REG_PC+1))
        $FE: dump(REG_PC, 2)
             ser.fstr1(string("INC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F6: dump(REG_PC, 2)
             ser.fstr1(string("INC $%2.2x,X"), cpu.peek(REG_PC+1))

        $E8: dump(REG_PC, 1)
             ser.fstr0(string("INX"))

        $C8: dump(REG_PC, 1)
             ser.fstr0(string("INY"))

        $4C: dump(REG_PC, 3)
             ser.fstr2(string("JMP $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $6C: dump(REG_PC, 3)
             ser.fstr2(string("JMP ($%2.2x%2.2x)"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $20: dump(REG_PC, 3)
             ser.fstr2(string("JSR #$%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))

        $AD: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A5: dump(REG_PC, 2)
             ser.fstr1(string("LDA $%2.2x"), cpu.peek(REG_PC+1))
        $A9: dump(REG_PC, 2)
             ser.fstr1(string("LDA #$%2.2x"), cpu.peek(REG_PC+1))
        $BD: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B9: dump(REG_PC, 3)
             ser.fstr2(string("LDA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A1: dump(REG_PC, 2)
             ser.fstr1(string("LDA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $B1: dump(REG_PC, 2)
             ser.fstr1(string("LDA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $B5: dump(REG_PC, 2)
             ser.fstr1(string("LDA $%2.2x,X"), cpu.peek(REG_PC+1))

        $AE: dump(REG_PC, 3)
             ser.fstr2(string("LDX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A6: dump(REG_PC, 2)
             ser.fstr1(string("LDX $%2.2x"), cpu.peek(REG_PC+1))
        $A2: dump(REG_PC, 2)
             ser.fstr1(string("LDX #$%2.2x"), cpu.peek(REG_PC+1))
        $BE: dump(REG_PC, 3)
             ser.fstr2(string("LDX $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B6: dump(REG_PC, 2)
             ser.fstr1(string("LDX $%2.2x,Y"), cpu.peek(REG_PC+1))

        $AC: dump(REG_PC, 3)
             ser.fstr2(string("LDY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $A4: dump(REG_PC, 2)
             ser.fstr1(string("LDY $%2.2x"), cpu.peek(REG_PC+1))
        $A0: dump(REG_PC, 2)
             ser.fstr1(string("LDY #$%2.2x"), cpu.peek(REG_PC+1))
        $BC: dump(REG_PC, 3)
             ser.fstr2(string("LDY $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $B4: dump(REG_PC, 2)
             ser.fstr1(string("LDY $%2.2x,X"), cpu.peek(REG_PC+1))

        $4A: dump(REG_PC, 1)
             ser.fstr0(string("LSR"))
        $4E: dump(REG_PC, 3)
             ser.fstr2(string("LSR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $46: dump(REG_PC, 2)
             ser.fstr1(string("LSR $%2.2x"), cpu.peek(REG_PC+1))
        $5E: dump(REG_PC, 3)
             ser.fstr2(string("LSR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $56: dump(REG_PC, 2)
             ser.fstr1(string("LSR $%2.2x,X"), cpu.peek(REG_PC+1))

        $EA: dump(REG_PC, 1)
             ser.fstr0(string("NOP"))

        $0D: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $05: dump(REG_PC, 2)
             ser.fstr1(string("ORA $%2.2x"), cpu.peek(REG_PC+1))
        $09: dump(REG_PC, 2)
             ser.fstr1(string("ORA #$%2.2x"), cpu.peek(REG_PC+1))
        $1D: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $19: dump(REG_PC, 3)
             ser.fstr2(string("ORA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $01: dump(REG_PC, 2)
             ser.fstr1(string("ORA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $11: dump(REG_PC, 2)
             ser.fstr1(string("ORA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $15: dump(REG_PC, 2)
             ser.fstr1(string("ORA $%2.2x,X"), cpu.peek(REG_PC+1))

        $48: dump(REG_PC, 1)
             ser.fstr0(string("PHA"))
        $08: dump(REG_PC, 1)
             ser.fstr0(string("PHP"))
        $68: dump(REG_PC, 1)
             ser.fstr0(string("PLA"))
        $28: dump(REG_PC, 1)
             ser.fstr0(string("PLP"))

        $2A: dump(REG_PC, 1)
             ser.fstr0(string("ROL"))
        $2E: dump(REG_PC, 3)
             ser.fstr2(string("ROL $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $26: dump(REG_PC, 2)
             ser.fstr1(string("ROL $%2.2x"), cpu.peek(REG_PC+1))
        $3E: dump(REG_PC, 3)
             ser.fstr2(string("ROL $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $36: dump(REG_PC, 2)
             ser.fstr1(string("ROL $%2.2x,X"), cpu.peek(REG_PC+1))

        $6A: dump(REG_PC, 1)
             ser.fstr0(string("ROR"))
        $6E: dump(REG_PC, 3)
             ser.fstr2(string("ROR $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $66: dump(REG_PC, 2)
             ser.fstr1(string("ROR $%2.2x"), cpu.peek(REG_PC+1))
        $7E: dump(REG_PC, 3)
             ser.fstr2(string("ROR $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $76: dump(REG_PC, 2)
             ser.fstr1(string("ROR $%2.2x,X"), cpu.peek(REG_PC+1))

        $40: dump(REG_PC, 1)
             ser.fstr0(string("RTI"))
        $60: dump(REG_PC, 1)
             ser.fstr0(string("RTS"))

        $ED: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E5: dump(REG_PC, 2)
             ser.fstr1(string("SBC $%2.2x"), cpu.peek(REG_PC+1))
        $E9: dump(REG_PC, 2)
             ser.fstr1(string("SBC #$%2.2x"), cpu.peek(REG_PC+1))
        $FD: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $F9: dump(REG_PC, 3)
             ser.fstr2(string("SBC $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $E1: dump(REG_PC, 2)
             ser.fstr1(string("SBC ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $F1: dump(REG_PC, 2)
             ser.fstr1(string("SBC ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $F5: dump(REG_PC, 2)
             ser.fstr1(string("SBC $%2.2x,X"), cpu.peek(REG_PC+1))

        $38: dump(REG_PC, 1)
             ser.fstr0(string("SEC"))
        $F8: dump(REG_PC, 1)
             ser.fstr0(string("SED"))
        $78: dump(REG_PC, 1)
             ser.fstr0(string("SEI"))

        $8D: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $85: dump(REG_PC, 2)
             ser.fstr1(string("STA $%2.2x"), cpu.peek(REG_PC+1))
        $9D: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x,X"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $99: dump(REG_PC, 3)
             ser.fstr2(string("STA $%2.2x%2.2x,Y"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $81: dump(REG_PC, 2)
             ser.fstr1(string("STA ($%2.2x,X)"), cpu.peek(REG_PC+1))
        $91: dump(REG_PC, 2)
             ser.fstr1(string("STA ($%2.2x),Y"), cpu.peek(REG_PC+1))
        $95: dump(REG_PC, 2)
             ser.fstr1(string("STA $%2.2x,X"), cpu.peek(REG_PC+1))

        $8E: dump(REG_PC, 3)
             ser.fstr2(string("STX $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $86: dump(REG_PC, 2)
             ser.fstr1(string("STX $%2.2x"), cpu.peek(REG_PC+1))
        $96: dump(REG_PC, 2)
             ser.fstr1(string("STX $%2.2x,Y"), cpu.peek(REG_PC+1))

        $8C: dump(REG_PC, 3)
             ser.fstr2(string("STY $%2.2x%2.2x"), cpu.peek(REG_PC+2), cpu.peek(REG_PC+1))
        $84: dump(REG_PC, 2)
             ser.fstr1(string("STY $%2.2x"), cpu.peek(REG_PC+1))
        $94: dump(REG_PC, 2)
             ser.fstr1(string("STY $%2.2x,X"), cpu.peek(REG_PC+1))

        $AA: dump(REG_PC, 1)
             ser.fstr0(string("TAX"))
        $A8: dump(REG_PC, 1)
             ser.fstr0(string("TAY"))
        $BA: dump(REG_PC, 1)
             ser.fstr0(string("TSX"))
        $8A: dump(REG_PC, 1)
             ser.fstr0(string("TXA"))
        $9A: dump(REG_PC, 1)
             ser.fstr0(string("TXS"))
        $98: dump(REG_PC, 1)
             ser.fstr0(string("TIA"))

        other: dump(REG_PC, 3)
    ser.str(string(13, 10))

PRI dump(addr, count)

    repeat count
        ser.fstr1(string("$%2.2x "), cpu.peek(addr++))
    if count < 3
        repeat 3 - count
             ser.str(string("    "))

PRI signed(n) : rc

    rc := n < $80 ? n : -(256 - n)

DAT

tests_bin       file    "6502_functional_test.bin"
tests_bin_end