{
    INTEL 8086 CPU Emulator
    Copyright (c) 2022 by Marco Maccaferri <macca@maccasoft.com>

    Monitor code based on SCP 8086 Monitor by Seattle Computer Products, Inc.

    Memory Map:

        00000-3FFFF ram (256k)
        F0000-FFFFF rom (64k)

    I/O Map:

        00F6 ACIA data port
        00F7 ACIA status register
}

CON

    _CLKFREQ    = 160_000_000

    ACIA_RX     = 63 ' 8  { I }
    ACIA_TX     = 62 ' 9  { O }
    ACIA_BAUD   = 115_200

DAT             ' Startup
                org     $000

                asmclk

                coginit #0, ##@i8086        ' start 8086 on cog #0 (this)

DAT             ' 8086
                org     $000

i8086
                add     ptrb, ##@i8086_lut - @i8086
                setq2   #(@i8086_lut_end - @i8086_lut) / 4 -1
                rdlong  0, ptrb

                call    #\system_init

i_nextop
                mov     i_cycles, #0
                mov     i_override, #0

i_next
                call    #\i_readop
                push    #i_nextop
                execf   i_opimpl

i_readop
                call    #\i_readcodeb
                mov     i_opcode, i_tmpb
                shl     i_tmpb, #2
                add     i_tmpb, i_optable
        _ret_   rdlong  i_opimpl, i_tmpb

i_seg_cs        mov     i_override, i_cs        ' a         a:cs %001110
i_seg_ds        mov     i_override, i_ds        ' | b       b:ds %00110_
i_seg_es        mov     i_override, i_es        ' | | c     c:es %0010__
i_seg_ss        mov     i_override, i_ss        ' | | | d   d:ss %000___
                bith    i_override, #31         ' a b c d
                jmp     #\i_next                ' a b c d

i_repne
                call    #\i_readop
                mov     i_rep_cnt, i_cx     wz
        if_z    ret
                cmp     i_opcode, #$A6      wz
        if_nz   cmp     i_opcode, #$A7      wz
        if_nz   cmp     i_opcode, #$AE      wz
        if_nz   cmp     i_opcode, #$AF      wz
        if_nz   jmp     #\i_rep_loop

.loop           push    #.ret
                execf   i_opimpl
.ret            testb   i_flags, #I_ZF_BIT  wc
                sub     i_rep_cnt, #1       wz
 if_nc_and_nz   jmp     #.loop
                getword i_cx, i_rep_cnt, #0
                ret

i_repe
                call    #\i_readop
                mov     i_rep_cnt, i_cx     wz
        if_z    ret
                cmp     i_opcode, #$A6      wz
        if_nz   cmp     i_opcode, #$A7      wz
        if_nz   cmp     i_opcode, #$AE      wz
        if_nz   cmp     i_opcode, #$AF      wz
        if_nz   jmp     #\i_rep_loop

.loop           push    #.ret
                execf   i_opimpl
.ret            testb   i_flags, #I_ZF_BIT  wc
                sub     i_rep_cnt, #1       wz
  if_c_and_nz   jmp     #.loop
                getword i_cx, i_rep_cnt, #0
                ret

i_rep_loop
.loop           push    #.ret
                execf   i_opimpl
.ret            sub     i_rep_cnt, #1       wz
        if_nz   jmp     #.loop
                getword i_cx, i_rep_cnt, #0
                ret

i_branch_rmod
                call    #\i_setupmodrm          '         e f g h   e:jmp_ip    %01_1_1111_11_11_11000
                call    #\i_readw               '         e f g h   f:jmp_csip  %00_1_1111_11_11_00000
                getword i_data0, i_data, #0     '         e f g h   g:call_ip   %01_1_0011_11_11_11000
                call    #\i_readw               '         | f | h   h:call_csip %00_1_0000_11_11_00000
                getword i_data1, i_data, #0     '         | f | h
i_branch
                call    #\i_readimmw            ' a b c d | | | |   a:jmp_far   %00_1_1111_00_00
                getword i_data0, i_data, #0     ' a b c d | | | |   b:jmp_ofs   %01_0_1111_11_00
                                                '                   c:call_far  %00_1_0000_00_00
                call    #\i_readimmw            ' a | c | | | | |   d:call_ofs  %01_0_0011_11_00
                getword i_data1, i_data, #0     ' a | c | | | | |

                getword i_data, i_cs, #0        ' | | c | | | | h
                call    #\i_push                ' | | c | | | | h
                getword i_data, i_ip, #0        ' | | c d | | g h
                call    #\i_push                ' | | c d | | g h

                add     i_data0, i_ip           ' | b | d | | | |

                getword i_cs, i_data1, #0       ' a | c | | f | h
        _ret_   getword i_ip, i_data0, #0       ' a b c d e f g h

i_ret_d16
                call    #\i_readimmw            '   b   d     a=ret      %011100
                mov     i_data0, i_data         '   b   d     b=ret_d16  %001100_11_00
i_iret                                          '             c=retf     %010000
                call    #\i_pop                 '   |   | e   d=retf_d16 %000000_11_00
                setword i_flags, i_data, #0     '   |   | e   e=iret     %010000_00
i_ret                                           '
                call    #\i_pop                 ' a b c d e
                getword i_ip, i_data, #0        ' a b c d e
                call    #\i_pop                 ' | | c d e
                mov     i_cs, i_data            ' | | c d e
                add     i_sp, i_data0           ' | b | d |
        _ret_   getword i_sp, i_sp, #0          ' a b c d d

i_jmp_d8
                call    #\i_readcodeb               ' a b c d e f g h i j k l m n o p q  a=jmp
                signx   i_tmpb, #7                  ' a b c d e f g h i j k l m n o p q  b=jo   (OF)
                modz    _set                wz      ' a | | | | | | | | | | | | | | | |  c=jno  (!OF)
                testb   i_flags, #I_OF_BIT  wz      ' | b c | | | | | | | | | | | | | |  d=jc   (CF)
                testb   i_flags, #I_CF_BIT  wz      ' | | | d e | | h i | | | | | | | |  e=jnc  (!CF)
                testb   i_flags, #I_ZF_BIT  wz      ' | | | | | f g | | | | | | | | | |  f=jz   (ZF)
                testb   i_flags, #I_SF_BIT  wz      ' | | | | | | | | | j k | | n o p q  g=jnz  (!ZF)
                testb   i_flags, #I_PF_BIT  wz      ' | | | | | | | | | | | l m | | | |  h=jce  (CF | ZF)
                testb   i_flags, #I_OF_BIT  wc      ' | | | | | | | | | | | | | n o p q  i=jnce (!(CF | ZF))
                modz    _z_ne_c             wz      ' | | | | | | | | | | | | | n | p |  j=js   (SF)
                modz    _z_eq_c             wz      ' | | | | | | | | | | | | | | o | q  k=jns  (!SF)
                testb   i_flags, #I_ZF_BIT  orz     ' | | | | | | | h i | | | | | | p |  l=jp   (PF)
                testbn  i_flags, #I_ZF_BIT  orz     ' | | | | | | | | | | | | | | | | |  m=jnp  (!PF)
                testbn  i_flags, #I_ZF_BIT  andz    ' | | | | | | | | | | | | | n | | q  n=jl   ((SF!=OF)&&(!ZF))
                modz    _nz                 wz      ' | | c | e | g | i | k | m | | | |  o=jnl  (SF==OF)
        if_x1   add     i_ip, i_tmpb                ' a b c d e f g h i j k l m n o p q  p=jle  ((ZF)||(SF!=OF))
        _ret_   getword i_ip, i_ip, #0              '                                    q=jnle ((SF==OF)&&(!ZF))

i_readcodeb
                getword i_ea, i_cs, #0
                shl     i_ea, #4
                add     i_ea, i_ip
                incmod  i_ip, i_ffffh
                jmp     #\i_readmemb

i_readimmw
                call    #\i_readcodeb
                getbyte i_data, i_tmpb, #0
                call    #\i_readcodeb
        _ret_   setbyte i_data, i_tmpb, #1

i_rotshift
                call    #\i_readcodeb                ' a b c d  a:roshiftb     %00_0010000_10_10_00
                mov     i_modrm, i_tmpb              ' a b c d  b:roshiftbcl   %00_0010000_10_01_00
                                                     '          c:roshiftw   %0011_0001000_01_10_00
                mov     i_rep_cnt, #1                ' a | c |  d:roshiftwcl %0011_0001000_01_01_00
                getbyte i_rep_cnt, i_cx, #0          ' | b | d

                call    #\i_readopb                  ' a b | |
                call    #\i_readopw                  ' | | c d

                mov     pa, i_modrm                  ' a b c d
                shr     pa, #3                       ' a b c d
                and     pa, #7                       ' a b c d
                add     pa, #i_rotshift8_tbl - $200  ' a b | |
                add     pa, #i_rotshift16_tbl - $200 ' | | c d
                rdlut   i_opimpl, pa                 ' a b c d
                call    #\i_rep_opimpl               ' a b c d

                call    #\i_writebackb               ' a b | |
                jmp     #\@i_flags8_szp              ' a b | |
                call    #\i_writebackw               '     c d
                jmp     #\@i_flags16_szp             '     c d

i_rep_opimpl
.loop           push    #.ret
                execf   i_opimpl
.ret    _ret_   djnz    i_rep_cnt, #.loop

i_rotshift_impl
                testb   i_flags, #I_CF_BIT  wc  ' | | c d | | |   a=rol_rm8
                                                '                 b=ror_rm8
                testb   i_data, #0          wz  ' | b | d | | g   c=rolc_rm8
                testb   i_data, #7          wz  ' a | c | | | |   d=rorc_rm8
                testb   i_data, #15         wz  ' | | | | | | |   e=shl_rm8
                bitz    i_flags, #I_CF_BIT      ' a b c d | | g   f=shr_rm8
                                                '                 g=shra_rm8
                signx   i_data, #7              ' | | | | | | g
                signx   i_data, #15             ' | | | | | | |

                shl     i_data, #1              ' a | c | e | |
                shr     i_data, #1              ' | b | d | f g

                bitz    i_data, #0              ' a | | | | | |
                bitz    i_data, #7              ' | b | | | | |
                bitz    i_data, #15             ' | | | | | | |

                bitc    i_data, #0              ' | | c | | | |
                bitc    i_data, #7              ' | | | d | | |
                bitc    i_data, #15             ' | | | | | | |

                ret                             ' a b c d e f g

i_math_pre
                call    #\i_readcodeb           ' a b c d   a:80pre   %00000_10_11100_00
                getbyte i_modrm, i_tmpb, #0     ' a b c d   b:81pre %0011000_01_10000_00
                ' src(r)                        '           c:82pre   %00000_10_01100_00
                call    #\i_readcodeb           ' a b c d   d:83pre %0011000_01_01100_00
                getbyte i_data1, i_tmpb, #0     ' a b c d
                call    #\i_readcodeb           ' | b | |
                setbyte i_data1, i_tmpb, #1     ' | b | |
                signx   i_data1, #7             ' | | c d
                ' dst(r)
                call    #\i_readopb             ' a | c |
                call    #\i_readopw             ' | b | d
                ' operation
                mov     pb, i_modrm             ' a b c d
                shr     pb, #3                  ' a b c d
                and     pb, #7                  ' a b c d
                altd    pb, #i_math8_pre_tbl    ' a | c |
                execf   0-0                     ' a | c |
                altd    pb, #i_math16_pre_tbl   '   b   d
                execf   0-0                     '   b   d
i_math8_pre_tbl
                long    i_mathop8_op   |     %001_11111010_0 << 10 ' ADD
                long    i_mathop8_op   |    %0101_11011111_0 << 10 ' OR
                long    i_mathop8_op   |     %001_11111001_0 << 10 ' ADC
                long    i_mathop8_op   |     %001_11110101_0 << 10 ' SBB
                long    i_mathop8_op   |    %0101_11101111_0 << 10 ' AND
                long    i_mathop8_op   |     %001_11110110_0 << 10 ' SUB
                long    i_mathop8_op   |    %0101_10111111_0 << 10 ' XOR
                long    i_mathop8_op   |     %011_11110110_0 << 10 ' CMP
i_math16_pre_tbl
                long    i_mathop16_op  |     %001_11111010_0 << 10 ' ADD
                long    i_mathop16_op  |    %0101_11011111_0 << 10 ' OR
                long    i_mathop16_op  |     %001_11111001_0 << 10 ' ADC
                long    i_mathop16_op  |     %001_11110101_0 << 10 ' SBB
                long    i_mathop16_op  |    %0101_11101111_0 << 10 ' AND
                long    i_mathop16_op  |     %001_11110110_0 << 10 ' SUB
                long    i_mathop16_op  |    %0101_10111111_0 << 10 ' XOR
                long    i_mathop16_op  |     %011_11110110_0 << 10 ' CMP

i_loop
                call    #\i_readcodeb               ' a b c   a = loop    %00_11_000
                signx   i_tmpb, #7                  ' a b c   b = loope   %00_10_000
                decmod  i_cx, i_ffffh       wz      ' a b c   c = loopne  %00_01_000
                testb   i_flags, #I_ZF_BIT  andz    ' | b |
                testbn  i_flags, #I_ZF_BIT  andz    ' | | c
        if_nz   add     i_ip, i_tmpb                ' a b c
        _ret_   getword i_ip, i_ip, #0              ' a b c

i_jcxz
                call    #\i_readcodeb
                signx   i_tmpb, #7
                cmp     i_cx, #0            wz
        if_z    add     i_ip, i_tmpb
        _ret_   getword i_ip, i_ip, #0

i_lea
                call    #\i_readcodeb
                mov     i_modrm, i_tmpb
                call    #\i_setupmodrm
                getword i_data, i_offset, #0
                jmp     #\i_setmodr16

i_ff_impl
                call    #\i_setupmodrm          ' a b c   a:inc_rm16  %000_100_1_000
                call    #\i_readw               ' a b c   b:dec_rm16  %000_010_1_000
                getword i_data0, i_data, #0     ' a b |   c:push_rm16         %0_100

                jmp     #\i_push                ' | | c

                mov     i_data1, #1             ' a b
                add     i_data, i_data1         ' a |
                sub     i_data, i_data1         ' | b

                sub     i_ea, #2                ' a a
                call    #\i_writebackw1         ' a b
                jmp     #\@i_flags16            ' a b

i_movsb
                push    #.ret
                execf   i_movsb_impl
.ret            execf   i_movsb_impl+1

i_movsb_impl    long    i_lods | %0010_11_10_00000 << 10
                long    i_stos | %0010_10_11_000   << 10

i_movsw
                push    #.ret
                execf   i_movsw_impl
.ret            execf   i_movsw_impl+1

i_movsw_impl    long    i_lods | %0000_11_01_00000 << 10
                long    i_stos | %0000_01_11_000__ << 10

' +-----+---------------+------------------+-------------------+---------+---------+
' | mod |      00       |       01         |        10         |   11    |         |
' +-----+---------------+------------------+-------------------+---------+---------+
' | r/m |               |                  |                   |         |   reg   |
' +-----+---------------+------------------+-------------------+---------+----+----+
' | 000 | [DS:BX+SI]    | [DS:BX+SI+disp8] | [DS:BX+SI+disp16] | [DS:AX] | AL | AX |
' | 001 | [DS:BX+DI]    | [DS:BX+DI+disp8] | [DS:BX+DI+disp16] | [DS:CX] | CL | CX |
' | 010 | [SS:BP+SI]    | [SS:BP+SI+disp8] | [SS:BP+SI+disp16] | [DS:DX] | DL | DX |
' | 011 | [SS:BP+DI]    | [SS:BP+DI+disp8] | [SS:BP+DI+disp16] | [DS:BX] | BL | BX |
' | 100 | [DS:SI]       | [DS:SI+disp8]    | [DS:SI+disp16]    | [DS:SP] | AH | SP |
' | 101 | [DS:DI]       | [DS:DI+disp8]    | [DS:DI+disp16]    | [DS:BP] | CH | BP |
' | 110 | [DS:disp16]   | [SS:BP+disp8]    | [SS:BP+disp16]    | [DS:SI] | DH | SI |
' | 111 | [DS:BX]       | [DS:BX+disp8]    | [DS:BX+disp16]    | [DS:DI] | BH | DI |
' +-----+---------------+------------------+-------------------+---------+----+----+

'   setup i_ea based on i_modrm bits

i_setupmodrm
                getword i_segment, i_ds, #0
                mov     i_offset, #0
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
                mov     i_modrm0, i_modrm
                and     i_modrm0, #%00_000_111
        if_00   call    #\_mod00
        if_01   call    #\_mod01
        if_10   call    #\_mod10
        if_11   call    #\_mod11
i_setupea
                cmp     i_override, #0      wz
        if_nz   getword i_ea, i_override, #0
        if_z    getword i_ea, i_segment, #0
                shl     i_ea, #4
                getword i_offset, i_offset, #0
        _ret_   add     i_ea, i_offset

_mod00
                altgw   i_modrm0, #i_modrm_00
                getword i_modrm0
                jmp     i_modrm0
_mod01
                call    #\i_readcodeb
                signx   i_tmpb, #7
                add     i_offset, i_tmpb
                jmp     #_modxx
_mod10
                call    #\i_readcodeb
                getbyte i_temp0, i_tmpb, #0
                call    #\i_readcodeb
                setbyte i_temp0, i_tmpb, #1
                add     i_offset, i_temp0
_modxx
                altgw   i_modrm0, #i_modrm_xx
                getword i_modrm0
                jmp     i_modrm0
_mod11
                jmprel  i_modrm0
        _ret_   getword i_offset, i_ax, #0
        _ret_   getword i_offset, i_cx, #0
        _ret_   getword i_offset, i_dx, #0
        _ret_   getword i_offset, i_bx, #0
        _ret_   getword i_offset, i_sp, #0
        _ret_   getword i_offset, i_bp, #0
        _ret_   getword i_offset, i_si, #0
        _ret_   getword i_offset, i_di, #0

i_modrm_00      word    i_modrm_00_xxx_000, i_modrm_00_xxx_001, i_modrm_00_xxx_010, i_modrm_00_xxx_011
                word    i_modrm_00_xxx_100, i_modrm_00_xxx_101, i_modrm_00_xxx_110, i_modrm_00_xxx_111

i_modrm_xx      word    i_modrm_00_xxx_000, i_modrm_00_xxx_001, i_modrm_00_xxx_010, i_modrm_00_xxx_011
                word    i_modrm_00_xxx_100, i_modrm_00_xxx_101, i_modrm_xx_xxx_110, i_modrm_00_xxx_111

i_modrm_00_xxx_000
                add     i_offset, i_bx
        _ret_   add     i_offset, i_si
i_modrm_00_xxx_001
                add     i_offset, i_bx
        _ret_   add     i_offset, i_di
i_modrm_00_xxx_010
                getword i_segment, i_ss, #0
                add     i_offset, i_bp
        _ret_   add     i_offset, i_si
i_modrm_00_xxx_011
                getword i_segment, i_ss, #0
                add     i_offset, i_bp
        _ret_   add     i_offset, i_di
i_modrm_00_xxx_100
        _ret_   add     i_offset, i_si
i_modrm_00_xxx_101
        _ret_   add     i_offset, i_di
i_modrm_00_xxx_110
                call    #\i_readcodeb
                getbyte i_temp0, i_tmpb, #0
                call    #\i_readcodeb
                setbyte i_temp0, i_tmpb, #1
        _ret_   add     i_offset, i_temp0
i_modrm_00_xxx_111
        _ret_   add     i_offset, i_bx

i_modrm_xx_xxx_110
                getword i_segment, i_ss, #0
        _ret_   add     i_offset, i_bp

' get 8-bit register based on i_modrm bits 5..3

i_getmodr8
                mov     pa, i_modrm
                shr     pa, #3
i_getr8
                and     pa, #7
                jmprel  pa
        _ret_   getbyte i_data, i_ax, #0
        _ret_   getbyte i_data, i_cx, #0
        _ret_   getbyte i_data, i_dx, #0
        _ret_   getbyte i_data, i_bx, #0
        _ret_   getbyte i_data, i_ax, #1
        _ret_   getbyte i_data, i_cx, #1
        _ret_   getbyte i_data, i_dx, #1
        _ret_   getbyte i_data, i_bx, #1

' get 16-bit register based on i_modrm bits 5..3

i_getmodr16
                mov     pa, i_modrm
                shr     pa, #3
i_getr16
                and     pa, #7
                jmprel  pa
        _ret_   getword i_data, i_ax, #0
        _ret_   getword i_data, i_cx, #0
        _ret_   getword i_data, i_dx, #0
        _ret_   getword i_data, i_bx, #0
        _ret_   getword i_data, i_sp, #0
        _ret_   getword i_data, i_bp, #0
        _ret_   getword i_data, i_si, #0
        _ret_   getword i_data, i_di, #0


' set 8-bit register based on i_modrm bits 5..3

i_setmodr8
                mov     pa, i_modrm
                shr     pa, #3
i_setr8
                and     pa, #7
                jmprel  pa
        _ret_   setbyte i_ax, i_data, #0
        _ret_   setbyte i_cx, i_data, #0
        _ret_   setbyte i_dx, i_data, #0
        _ret_   setbyte i_bx, i_data, #0
        _ret_   setbyte i_ax, i_data, #1
        _ret_   setbyte i_cx, i_data, #1
        _ret_   setbyte i_dx, i_data, #1
        _ret_   setbyte i_bx, i_data, #1

' set 16-bit register based on i_modrm bits 5..3

i_setmodr16
                mov     pa, i_modrm
                shr     pa, #3
i_setr16
                and     pa, #7
                jmprel  pa
        _ret_   getword i_ax, i_data, #0
        _ret_   getword i_cx, i_data, #0
        _ret_   getword i_dx, i_data, #0
        _ret_   getword i_bx, i_data, #0
        _ret_   getword i_sp, i_data, #0
        _ret_   getword i_bp, i_data, #0
        _ret_   getword i_si, i_data, #0
        _ret_   getword i_di, i_data, #0

' get segment register based on i_modrm bits 5..3

i_getmodsreg
                mov     pb, i_modrm
                shr     pb, #3
                and     pb, #3
                jmprel  pb
        _ret_   getword i_data, i_es, #0
        _ret_   getword i_data, i_cs, #0
        _ret_   getword i_data, i_ss, #0
        _ret_   getword i_data, i_ds, #0

' set segment register based on i_modrm bits 5..3

i_setmodsreg
                mov     pb, i_modrm
                shr     pb, #3
                and     pb, #3
                jmprel  pb
        _ret_   getword i_es, i_data, #0
        _ret_   getword i_cs, i_data, #0
        _ret_   getword i_ss, i_data, #0
        _ret_   getword i_ds, i_data, #0

i_mov_sreg
                call    #\i_readcodeb           ' a b   a:mov sreg, [rm]     %000_00000
                mov     i_modrm, i_tmpb         ' a b   b:mov [rm], sreg %000_111_00000
                testb   i_modrm, #7         wc  ' a b
                testb   i_modrm, #6         wz  ' a b
                mov     pa, i_modrm             ' a b

        if_11   call    #\i_getr16              ' a |
    if_not_11   call    #\i_readmodrmw          ' a |
                jmp     #\i_setmodsreg          ' a |

                call    #\i_getmodsreg          '   b
        if_11   jmp     #\i_setr16              '   b
                jmp     #\i_writemodrmw         '   b

' --------------------------------------------------------------------

i_readopb
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_getr8
i_readmodrmb
                call    #\i_setupmodrm
                call    #\i_readmemb
        _ret_   getbyte i_data, i_tmpb, #0

i_writeopb
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_setr8
i_writemodrmb
                call    #\i_setupmodrm
                getbyte i_tmpb, i_data, #0
                jmp     #\i_writememb

i_writebackb
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_setr8
                call    #\i_setupea
                getbyte i_tmpb, i_data, #0
                jmp     #\i_writememb

' --------------------------------------------------------------------

i_readopw
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_getr16
i_readmodrmw
                call    #\i_setupmodrm
                call    #\i_readmemb
                getbyte i_data, i_tmpb, #0
                add     i_ea, #1
                call    #\i_readmemb
        _ret_   setbyte i_data, i_tmpb, #1

i_writeopw
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_setr16
i_writemodrmw
                call    #\i_setupmodrm
i_writebackw1
                getbyte i_tmpb, i_data, #0
                call    #\i_writememb
                add     i_ea, #1
                getbyte i_tmpb, i_data, #1
                jmp     #\i_writememb

i_writebackw
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_setr16
                cmp     i_override, #0      wz
        if_nz   getword i_ea, i_override, #0
        if_z    getword i_ea, i_segment, #0
                shl     i_ea, #4
                getword i_offset, i_offset, #0
                add     i_ea, i_offset
                jmp     #\i_writebackw1

i_cmc   _ret_   bitnot  i_flags, #I_CF_BIT
i_clc   _ret_   bitl    i_flags, #I_CF_BIT
i_stc   _ret_   bith    i_flags, #I_CF_BIT
i_cli   _ret_   bitl    i_flags, #I_IF_BIT
i_sti   _ret_   bith    i_flags, #I_IF_BIT
i_cld   _ret_   bitl    i_flags, #I_DF_BIT
i_std   _ret_   bith    i_flags, #I_DF_BIT

' --------------------------------------------------------------------

i_cmps
                getword i_ea, i_es, #0          ' a b   a:cmpsb  %0_0010010_0_10000_010000
                shl     i_ea, #4                ' a b   b:cmpsw %01_0000000_0_01000_001000
                add     i_ea, i_di              ' a b
                call    #\i_readb               ' a |
                call    #\i_readw               ' | b
                mov     i_data0, i_data         ' a b

                getword i_ea, i_ds, #0          ' a b
                shl     i_ea, #4                ' a b
                add     i_ea, i_si              ' a b
                call    #\i_readb               ' a |
                call    #\i_readw               ' | b

                sub     i_data, i_data0         ' a b

                testb   i_flags, #I_DF_BIT  wz  ' a b
                sumz    i_di, #1                ' | b
                sumz    i_di, #1                ' a b
                getword i_di, i_di, #0          ' a b
                sumz    i_si, #1                ' | b
                sumz    i_si, #1                ' a b
                getword i_si, i_si, #0          ' a b

                jmp     #\@i_flags8             ' a |
                jmp     #\@i_flags16            '   b

i_prefixed_op
                call    #\i_readcodeb               ' a b c a:i_f6  %0_110_00000
                getbyte i_modrm, i_tmpb, #0         ' a b c b:i_f6  %0_101_00000
                mov     pa, i_modrm                 ' a b c c:i_ff  %0_011_00000
                shr     pa, #3                      ' a b c
                and     pa, #7                      ' a b c

                add     pa, #i_f6_pre_tbl - $200    ' a | |
                add     pa, #i_f7_pre_tbl - $200    ' | b |
                add     pa, #i_ff_pre_tbl - $200    ' | | c

                rdlut   i_opimpl, pa                ' a b c
                execf   i_opimpl

i_esc_op
                jmp     #\i_readcodeb

i_ax            long    $0000
i_bx            long    $0000
i_cx            long    $0000
i_dx            long    $0000

i_sp            long    $0000
i_bp            long    $0000
i_si            long    $0000
i_di            long    $0000

i_cs            long    $F000
i_ds            long    $0000
i_es            long    $0000
i_ss            long    $0000

i_flags         long    $0000
i_ip            long    $FFF0

i_ffffh         long    $FFFF
i_optable       long    @i8086_optable

i_rambase       long    RAM_BASE
i_rombase       long    @system_rom

acia_ctl_reg    long    0

i_opcode        res     1
i_modrm         res     1
i_modrm0        res     1

i_override      res     1
i_segment       res     1
i_offset        res     1
i_ea            res     1

i_tmpb          res     1
i_data          res     1
i_data0         res     1
i_data1         res     1

i_temp0         res     1
i_temp1         res     1
'i_temp2         res     1
i_cycles        res     1
i_opimpl        res     1
i_rep_cnt       res     1

DAT             ' 8086 LUT
                org     $200
i8086_lut

i_rotshift8_tbl
          {000} long    i_rotshift_impl | (%0_111_110_10_11_0101_1 << 10) ' ROL
          {001} long    i_rotshift_impl | (%0_111_101_01_11_0110_1 << 10) ' ROR
          {010} long    i_rotshift_impl | (%0_110_111_10_11_0101_0 << 10) ' ROLC
          {011} long    i_rotshift_impl | (%0_101_111_01_11_0110_0 << 10) ' RORC
          {100} long    i_rotshift_impl | (%0_111_111_10_11_1111_1 << 10) ' SHL
          {101} long    i_rotshift_impl | (%0_111_111_01_11_1111_1 << 10) ' SHR
          {110} long    i_nop           | (%0 << 10)
          {111} long    i_rotshift_impl | (%0_111_111_01_10_0110_1 << 10) ' SHRA

i_rotshift16_tbl
          {000} long    i_rotshift_impl | (%0_111_110_10_11_0011_1 << 10) ' ROL
          {001} long    i_rotshift_impl | (%0_111_011_01_11_0110_1 << 10) ' ROR
          {010} long    i_rotshift_impl | (%0_110_111_10_11_0011_0 << 10) ' ROLC
          {011} long    i_rotshift_impl | (%0_011_111_01_11_0110_0 << 10) ' RORC
          {100} long    i_rotshift_impl | (%0_111_111_10_11_1111_1 << 10) ' SHL
          {101} long    i_rotshift_impl | (%0_111_111_01_11_1111_1 << 10) ' SHR
          {110} long    i_nop           | (%0 << 10)
          {111} long    i_rotshift_impl | (%0_111_111_01_10_0110_1 << 10) ' SHRA

i_f6_pre_tbl
          {000} long    i_f6f7_mathb    |      %01_110_1100_010 << 10 ' TEST
          {001} long    i_f6f7_mathb    |      %01_110_1100_010 << 10 ' TEST (alias)
          {010} long    i_f6f7_mathb    |      %00_101_1111_010 << 10 ' NOT
          {011} long    i_f6f7_mathb    |      %00_011_1111_010 << 10 ' NEG
          {100} long    i_mul8          | %00100_100_1110_11010 << 10 ' MUL
          {101} long    i_mul8          | %00100_100_1100_10010 << 10 ' IMUL
          {110} long    i_div8          |   %0011000_1110_11100 << 10 ' DIV
          {111} long    i_div8          |   %0000000_0000_00000 << 10 ' IDIV

i_f7_pre_tbl
          {000} long    i_f6f7_mathw    |     %0111_110_0000_00 << 10 ' TEST
          {001} long    i_f6f7_mathw    |     %0111_110_0000_00 << 10 ' TEST (alias)
          {010} long    i_f6f7_mathw    |     %0011_101_1111_00 << 10 ' NOT
          {011} long    i_f6f7_mathw    |     %0011_011_1111_00 << 10 ' NEG
          {100} long    i_mul16         | %00010_000_1011_1100_ << 10 ' MUL
          {101} long    i_mul16         | %00010_000_0011_0100_ << 10 ' IMUL
          {110} long    i_div16         |   %0011000_1110_11100 << 10 ' DIV
          {111} long    i_div16         |   %0000000_0000_00000 << 10 ' IDIV

i_ff_pre_tbl
          {000} long    i_ff_impl       | %000_100_1_000 << 10 ' INC
          {001} long    i_ff_impl       | %000_010_1_000 << 10 ' DEC
          {010} long    i_branch_rmod   | %01_1_0011_11_11_11000 << 10 ' CALL
          {011} long    i_branch_rmod   | %00_1_0000_11_11_00000 << 10 ' CALL_FAR
          {100} long    i_branch_rmod   | %01_1_1111_11_11_11000 << 10 ' JMP
          {101} long    i_branch_rmod   | %00_1_1111_11_11_00000 << 10 ' JMP_FAR
          {110} long    i_ff_impl       | %0_100 << 10 ' PUSH
          {111} long    i_mathop16_pre  | %011_11110110_010_010 << 10 ' CMP

i_f6f7_mathb
                'dst(r)
                call    #\i_readopb             ' a b c         a:test8    %01_110_1100_010
i_f6f7_mathw                                    '               b:not8     %00_101_1111_010
                call    #\i_readopw             '       d e f   c:neg8     %00_011_1111_010
                mov     i_data0, i_data         ' a b c d e f
                ' src(r)                        '               d:test16 %0111_110_0000_00
                call    #\i_readcodeb           ' a | | d | |   e:not16  %0011_101_1111_00
                getbyte i_data1, i_tmpb, #0     ' a | | d | |   f:neg16  %0011_011_1111_00
                call    #\i_readcodeb           ' | | | d | |
                setbyte i_data1, i_tmpb, #1     ' | | | d | |
                ' operations
                and     i_data, i_data1         ' a | | d | |
                not     i_data                  ' | b | | e |
                neg     i_data                  ' | | c | | f
                ' dst(w)
                call    #\i_writebackb          ' | b c | | |
                jmp     #\@i_flags8_szp         ' a b c | | |
                call    #\i_writebackw          '       | e f
                jmp     #\@i_flags16_szp        '       d e f

i_aam
                call    #\i_readcodeb
                getbyte i_data, i_ax, #0
                qdiv    i_data, i_tmpb
                getqx   i_temp0
                getqy   i_temp1
                setbyte i_ax, i_temp0, #1
                setbyte i_ax, i_temp1, #0
                getword i_data, i_ax, #0
                jmp     #\@i_flags16_szp

i_aad
                call    #\i_readcodeb
                getbyte i_data, i_ax, #1
                mul     i_data, i_tmpb
                getbyte i_temp0, i_ax, #0
                add     i_data, i_temp0
                getbyte i_ax, i_data, #0
                getword i_data, i_ax, #0
                jmp     #\@i_flags16_szp

i_lseg_reg
                call    #\i_readcodeb       ' a b   a: lds [rm]  %00_00_000
                mov     i_modrm, i_tmpb     ' a b   b: les [rm] %010_00_000
                call    #\i_setupmodrm      ' a b

                call    #\i_readw           ' a b
                call    #\i_setmodr16       ' a b

                call    #\i_readw           ' a b
        _ret_   mov     i_ds, i_data        ' a |
        _ret_   mov     i_es, i_data        '   b

i_mul8
                                                    ' a b c d   a:mul8   %00100_100_1110_11010
                ' src                                           b:mul16  %00010_000_1011_1100_
                call    #\i_readopb                 ' a | c |   c:imul8  %00100_100_1100_10010
i_mul16
                call    #\i_readopw                 ' | b | d   d:mul16  %00010_000_0011_0100_
                mov     i_data1, i_data             ' a b c d
                signx   i_data1, #7                 ' | | c |
                signx   i_data1, #15                ' | | | d
                ' dst
                getbyte i_data, i_ax, #0            ' a | c |
                signx   i_data, #7                  ' | | c |
                getword i_data, i_ax, #0            ' | b | d
                signx   i_data, #15                 ' | | | d
                ' operation
                muls    i_data, i_data1         wz  ' a b c d
                getword i_ax, i_data, #0            ' a b c d
                getword i_dx, i_data, #1            ' | b | d

                bitz    i_flags, #I_ZF_BIT          ' a b c d
                getbyte i_temp0, i_ax, #0           ' a | c |
                getword i_temp0, i_dx, #0           ' | b | d
                cmp     i_temp0, #0             wz  ' a b c d
        _ret_   bitnz   i_flags, #I_CF_BIT          ' a b c d

i_div8
                ' src
                call    #\i_readopb                 ' a b   a:div8  %0011000_1110_11100
                mov     i_data1, i_data             ' a b   b:div16 %0000000_0000_00000
                signx   i_data1, #7                 ' | b
                testb   i_data1, #31            wc  ' | b
        if_c    abs     i_data1                     ' | b
                ' dst
                getbyte i_data, i_ax, #0            ' a b
                signx   i_data, #7                  ' | b
                testb   i_data, #31             wz  ' | b
        if_z    abs     i_data                      ' | b
                ' operation
                qdiv    i_data, i_data1             ' a b
                getqx   i_temp0                     ' a b
                getqy   i_temp1                     ' a b
    if_c_ne_z   neg     i_temp0                     ' | b
    if_c_ne_z   neg     i_temp1                     ' | b
                setbyte i_ax, i_temp0, #0           ' a b
                setbyte i_ax, i_temp1, #1           ' a b

                ret

i_div16
                ' src
                call    #\i_readopw                 ' a b   a:div8  %0011000_1110_11100
                mov     i_data1, i_data             ' a b   b:div16 %0000000_0000_00000
                signx   i_data1, #15                ' | b
                testb   i_data1, #31            wc  ' | b
        if_c    abs     i_data1                     ' | b
                ' dst
                getword i_data, i_ax, #0            ' a b
                signx   i_data, #15                 ' | b
                testb   i_data, #31             wz  ' | b
        if_z    abs     i_data                      ' | b
                ' operation
                qdiv    i_data, i_data1             ' a b
                getqx   i_temp0                     ' a b
                getqy   i_temp1                     ' a b
    if_c_ne_z   neg     i_temp0                     ' | b
    if_c_ne_z   neg     i_temp1                     ' | b
                getword i_ax, i_temp0, #0           ' a b
                getword i_dx, i_temp1, #0           ' a b

                ret

i_mov_imm
                call    #\i_readcodeb           ' a b   a:mov_r8_nn  %00_1100
                getbyte i_data, i_tmpb, #0      ' a b   b:mov_16_nn %010_0000
                call    #\i_readcodeb           ' | b
                setbyte i_data, i_tmpb, #1      ' | b

                mov     pa, i_opcode            ' a b
                jmp     #\i_setr8               ' a |
                jmp     #\i_setr16              '   b

i_mov_rmod_imm                                  '       a:mov_byte_rm_imm    %0_1100_000
                call    #\i_readcodeb           ' a b   b:mov_word_rm_imm   %01_0000_000
                getbyte i_modrm, i_tmpb, #0     ' a b
                call    #\i_setupmodrm          ' a b

                call    #\i_readcodeb           ' a b
                getbyte i_data, i_tmpb, #0      ' a b
                call    #\i_readcodeb           ' | b
                setbyte i_data, i_tmpb, #1      ' | b

                jmp     #\i_writebackb          ' a |
                jmp     #\i_writebackw          '   b

i_mov_acc_offs
                call    #\i_readimmw            ' a b c d   a:mov_al_disp %0_1111_1100_00000_0
                                                '           b_mov_ax_disp %0_1111_0000_00000_0
                cmp     i_override, #0      wz  ' a b c d   c:mov_disp_al %0_1100_1111_00000_0
        if_nz   getword i_ea, i_override, #0    ' a b c d   d:mov_disp_ax %0_0000_1111_00000_0
        if_z    getword i_ea, i_ds, #0          ' a b c d
                shl     i_ea, #4                ' a b c d
                add     i_ea, i_data            ' a b c d

                call    #\i_readb               ' a b | |
                setbyte i_ax, i_data, #0        ' a b | |
                call    #\i_readw               ' | b | |
                setbyte i_ax, i_data, #1        ' | b | |

                getbyte i_data, i_ax, #0        ' | | c d
                call    #\i_writeb              ' | | c d
                getword i_data, i_ax, #0        ' | | | d
                call    #\i_writew              ' | | | d

                ret                             ' a b c d

i_mathop_acc
                ' src(r)
                call    #\i_readcodeb           ' a b c d e f g h i j k l m n o p   a:add_al_rm    %010_1111010_010_1100
                getbyte i_data1, i_tmpb, #0     ' a b c d e f g h i j k l m n o p   b:adc_al_rm    %010_1111001_010_1100
                call    #\i_readcodeb           ' | | | | | | | | i j k l m n o p   c:sub_al_rm    %010_1110110_010_1100
                setbyte i_data1, i_tmpb, #1     ' | | | | | | | | i j k l m n o p   d:sbb_al_rm    %010_1110101_010_1100
                ' dst(r)                        '                                   e:and_al_rm   %0110_1101111_010_1100
                getbyte i_data, i_ax, #0        ' a b c d e f g h | | | | | | | |   f: or_al_rm   %0110_1011111_010_1100
                getword i_data, i_ax, #0        ' | | | | | | | | i j k l m n o p   g:xor_al_rm   %0110_0111111_010_1100
                mov     i_data0, i_data         ' a b c f e f g h i j k l m n o p   h:cmp_al_rm    %011_1110110_010_1100
                ' operation                     '
                modc    _clr                wc  ' a | c | | | | h i | k | | | | p   i:add_al_rm  %01101_1111010_001_0000
                testb   i_flags, #I_CF_BIT  wc  ' | b | d | | | | | j | l | | | |   j:adc_al_rm  %01101_1111001_001_0000
                addx    i_data, i_data1         ' a b | | | | | | i j | | | | | |   k:sub_al_rm  %01101_1110110_001_0000
                subx    i_data, i_data1         ' | | c d | | | h | | k l | | | p   l:sbb_al_rm  %01101_1110101_001_0000
                and     i_data, i_data1         ' | | | | e | | | | | | | m | | |   m:and_al_rm %011101_1101111_001_0000
                or      i_data, i_data1         ' | | | | | f | | | | | | | n | |   n: or_al_rm %011101_1011111_001_0000
                xor     i_data, i_data1         ' | | | | | | g | | | | | | | o |   o:xor_al_rm %011101_0111111_001_0000
                ' dst(w)                        '                                   p:cmp_al_rm  %01111_1110110_001_0000
                setbyte i_ax, i_data, #0        ' a b c d e f g | | | | | | | | |
                getword i_ax, i_data, #0        ' | | | | | | | | i j k l m n o |
                jmp     #\@i_flags8             ' a b c d | | | h | | | | | | | |
                jmp     #\@i_flags8_zp          '         e f g   | | | | | | | |
                jmp     #\@i_flags16            '                 i j k l | | | p
                jmp     #\@i_flags16_zp         '                         m n o

i_mathop8
                call    #\i_readcodeb           ' a b c d e f g h i j k l m n o p q r   a:add_r8_rm    %010_11111010_010_010_00
                getbyte i_modrm, i_tmpb, #0     ' a b c d e f g h i j k l m n o p q r   b:adc_r8_rm    %010_11111001_010_010_00
                ' src(r)                                                                c:sub_r8_rm    %010_11110110_010_010_00
                call    #\i_readopb             ' a b c d e f g h | | | | | | | | q |   d:sbb_r8_rm    %010_11110101_010_010_00
                call    #\i_getmodr8            ' | | | | | | | | i j k l m n o p | r   e:and_r8_rm   %0110_11101111_010_010_00
                mov     i_data1, i_data         ' a b c d e f g h i j k l m n o p q r   f: or_r8_rm   %0110_11011111_010_010_00
                ' dst(r)                                                                g:xor_r8_rm   %0110_10111111_010_010_00
                call    #\i_getmodr8            ' a b c d e f g h | | | | | | | | q |   h:cmp_r8_rm    %011_11110110_010_010_00
                call    #\i_readopb             ' | | | | | | | | i j k l m n o p | r
i_mathop8_op
                mov     i_data0, i_data         ' a b c d e f g h i j k l m n o p q r   i:add_rm_r8    %001_11111010_001_001_00
                ' operation                                                             j:adc_rm_r8    %001_11111001_001_001_00
                modc    _clr                wc  ' a | c | | | | h i | k | | | | p | |   k:sub_rm_r8    %001_11110110_001_001_00
                testb   i_flags, #I_CF_BIT  wc  ' | b | d | | | | | j | l | | | | | |   l:sbb_rm_r8    %001_11110101_001_001_00
                addx    i_data, i_data1         ' a b | | | | | | i j | | | | | | | |   m:and_rm_r8   %0101_11101111_001_001_00
                subx    i_data, i_data1         ' | | c d | | | h | | k l | | | p | |   n: or_rm_r8   %0101_11011111_001_001_00
                and     i_data, i_data1         ' | | | | e | | | | | | | m | | | | |   o:xor_rm_r8   %0101_10111111_001_001_00
                or      i_data, i_data1         ' | | | | | f | | | | | | | n | | | |   p:cmp_rm_r8    %011_11110110_001_001_00
                xor     i_data, i_data1         ' | | | | | | g | | | | | | | o | | |
                mov     i_data, i_data1         ' | | | | | | | | | | | | | | | | q r   q:mov_r8_rm  %01110_01111111_010_010_00
                ' dst(w)                                                                r:mov_rm_r8  %01101_01111111_001_001_00
                call    #\i_setmodr8            ' a b c d e f g | | | | | | | | | q |
                call    #\i_writebackb          ' | | | | | | | | i j k l m n o | | r
                jmp     #\@i_flags8             ' a b c d | | | h i j k l | | | p | |
                jmp     #\@i_flags8_zp          '         e f g           m n o   | |
                ret                             '                                 q r

i_mathop16
                call    #\i_readcodeb           ' a b c d e f g h i j k l m n o p q r   a:add_r16_rm   %010_11111010_010_010_00
                getbyte i_modrm, i_tmpb, #0     ' a b c d e f g h i j k l m n o p q r   b:adc_r16_rm   %010_11111001_010_010_00
i_mathop16_pre
                ' src(r)                                                                c:sub_r16_rm   %010_11110110_010_010_00
                call    #\i_readopw             ' a b c d e f g h | | | | | | | | q |   d:sbb_r16_rm   %010_11110101_010_010_00
                call    #\i_getmodr16           ' | | | | | | | | i j k l m n o p | r   e:and_r16_rm  %0110_11101111_010_010_00
                mov     i_data1, i_data         ' a b c d e f g h i j k l m n o p q r   f: or_r16_rm  %0110_11011111_010_010_00
                ' dst(r)                                                                g:xor_r16_rm  %0110_10111111_010_010_00
                call    #\i_getmodr16           ' a b c d e f g h | | | | | | | | q |   h:cmp_r16_rm   %011_11110110_010_010_00
                call    #\i_readopw             ' | | | | | | | | i j k l m n o p | r
i_mathop16_op
                mov     i_data0, i_data         ' a b c d e f g h i j k l m n o p q r   i:add_rm_r16   %001_11111010_001_001_00
                ' operation                                                             j:adc_rm_r16   %001_11111001_001_001_00
                modc    _clr                wc  ' a | c | | | | h i | k | | | | p | |   k:sub_rm_r16   %001_11110110_001_001_00
                testb   i_flags, #I_CF_BIT  wc  ' | b | d | | | | | j | l | | | | | |   l:sbb_rm_r16   %001_11110101_001_001_00
                addx    i_data, i_data1         ' a b | | | | | | i j | | | | | | | |   m:and_rm_r16  %0101_11101111_001_001_00
                subx    i_data, i_data1         ' | | c d | | | h | | k l | | | p | |   n: or_rm_r16  %0101_11011111_001_001_00
                and     i_data, i_data1         ' | | | | e | | | | | | | m | | | | |   o:xor_rm_r16  %0101_10111111_001_001_00
                or      i_data, i_data1         ' | | | | | f | | | | | | | n | | | |   p:cmp_rm_r16   %011_11110110_001_001_00
                xor     i_data, i_data1         ' | | | | | | g | | | | | | | o | | |
                mov     i_data, i_data1         ' | | | | | | | | | | | | | | | | q r   q:mov_r16_rm %01110_01111111_010_010_00
                ' dst(w)                                                                r:mov_rm_r16 %01101_01111111_001_001_00
                call    #\i_setmodr16           ' a b c d e f g | | | | | | | | | q |
                call    #\i_writebackw          ' | | | | | | | | i j k l m n o | | r
                jmp     #\@i_flags16            ' a b c d | | | h i j k l | | | p | |
                jmp     #\@i_flags16_zp         '         e f g           m n o   | |
                ret                             '                                 q r

i_incdec
                mov     pa, i_opcode            ' a b c d   a:inc_r8      %00_100_0100
                call    #\i_getr8               ' a | c |   b:inc_r16   %0011_100_0010
                call    #\i_getr16              ' | b | d   c:dec_r8      %00_010_0100
                mov     i_data0, i_data         ' a b c d   d:dec_16    %0011_010_0010
                                                '
                mov     i_data1, #1             ' a b c d
                add     i_data, i_data1         ' a b | |
                sub     i_data, i_data1         ' | | c d
                                                '
                call    #\i_setr8               ' a | c |
                jmp     #\@i_flags8             ' a | c |
                call    #\i_setr16              '   b   d
                jmp     #\@i_flags16            '   b   d

i_fe_pre
                call    #\i_readcodeb
                mov     i_modrm, i_tmpb
                call    #\i_readopb
                mov     i_data0, i_data

                mov     i_data1, #1
                mov     i_temp0, i_modrm
                and     i_temp0, #$38       wz
        if_z    add     i_data, i_data1
                cmp     i_temp0, #$08       wz
        if_z    sub     i_data, i_data1

                call    #\i_writebackb

i_push_es       getword i_data, i_es, #0        '     c         a=push r16
i_push_cs       getword i_data, i_cs, #0        '     | d       b=pushf
i_push_ss       getword i_data, i_ss, #0        '     | | e     c=push es
i_push_ds       getword i_data, i_ds, #0        '     | | | f   d=push cs
i_pushf         getword i_data, i_flags, #0     '   b | | | |   e=push ss
i_push_r16      mov     pa, i_opcode            ' a | | | | |   f=push ds
                call    #\i_getr16              ' a | | | | |
i_push          decmod  i_sp, i_ffffh
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                getbyte i_tmpb, i_data, #1
                call    #\i_writememb
                decmod  i_sp, i_ffffh
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                getbyte i_tmpb, i_data, #0
                call    #\i_writememb
                ret

i_pop_r16
                call    #\i_pop                 ' a b c d e f   a:pop r16      %00_0
                mov     pa, i_opcode            ' a | | | | |   b:popf       %0_11_0
                jmp     #\i_setr16              ' a | | | | |   c:pop_es    %01_11_0
        _ret_   getword i_flags, i_data, #0     '   b | | | |   d:pop_cs   %011_11_0
        _ret_   getword i_es, i_data, #0        '     c | | |   e:pop_ss  %0111_11_0
        _ret_   getword i_cs, i_data, #0        '       d | |   f:pop_ds %01111_11_0
        _ret_   getword i_ss, i_data, #0        '         e |
        _ret_   getword i_ds, i_data, #0        '           f

i_pop_rmod
                call    #\i_readopb
                mov     i_modrm, i_tmpb
                call    #\i_pop
                jmp     #\i_writeopw

i_pop
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                call    #\i_readmemb
                getbyte i_data, i_tmpb, #0
                incmod  i_sp, i_ffffh
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                call    #\i_readmemb
                setbyte i_data, i_tmpb, #1
        _ret_   incmod  i_sp, i_ffffh

i_daas
                getbyte i_data, i_ax, #0
                mov     i_data0, i_data
                mov     i_temp0, #$00
                cmpr    i_data, #$99        wc
                testb   i_flags, #I_CF_BIT  orc
        if_c    add     i_temp0, #$60
                bitc    i_flags, #I_CF_BIT
                getnib  i_temp1, i_data, #0
                cmpr    i_temp1, #$9        wc
                testb   i_flags, #I_AF_BIT  orc
        if_c    add     i_temp0, #$06
                testb   i_opcode, #3        wz
                sumz    i_data, i_temp0
                setbyte i_ax, i_data, #0
                jmp     #i_flags8

i_aaas
                getnib  i_temp1, i_ax, #0
                cmpr    i_temp1, #$9        wc
                testb   i_flags, #I_AF_BIT  orc

                testb   i_opcode, #3        wz
                getbyte i_data, i_ax, #0
        if_c    sumz    i_data, #6
        if_c    setnib  i_data, #0, #1
                setbyte i_ax, i_data, #0

                getbyte i_data, i_ax, #1
        if_c    sumz    i_data, #1
                setbyte i_ax, i_data, #1

                bitc    i_flags, #I_CF_BIT
        _ret_   bitc    i_flags, #I_AF_BIT

i_lods
                cmp     i_override, #0      wz  ' a b   a=lodsb %0010_10_10_00000
        if_nz   getword i_ea, i_override, #0    ' a b   b=lodsw %0000_01_01_00000
        if_z    getword i_ea, i_ds, #0          ' a b
                shl     i_ea, #4                ' a b
                add     i_ea, i_si              ' a b

                call    #\i_readb               ' a |
                call    #\i_readw               ' | b

                setbyte i_ax, i_data, #0        ' a |
                getword i_ax, i_data, #0        ' | b

                testb   i_flags, #I_DF_BIT  wz  ' a b
                sumz    i_si, #1                ' | b
                sumz    i_si, #1                ' a b
        _ret_   getword i_si, i_si, #0          ' a b

i_stos
                getword i_ea, i_es, #0          ' a b   a=stosb %0010_10_10_000
                shl     i_ea, #4                ' a b   a=stosw %0000_01_01_000
                add     i_ea, i_di              ' a b

                getbyte i_data, i_ax, #0        ' a |
                getword i_data, i_ax, #0        ' | b

                call    #\i_writeb              ' a |
                call    #\i_writew              ' | b

                testb   i_flags, #I_DF_BIT  wz  ' a b
                sumz    i_di, #1                ' | b
                sumz    i_di, #1                ' a b
        _ret_   getword i_di, i_di, #0          ' a b

i_scas
                getword i_ea, i_es, #0          ' a b   a:scasb  %0_0100_0_010_010_000
                shl     i_ea, #4                ' a b   b:scasw %01_0000_0_001_001_000
                add     i_ea, i_di              ' a b

                call    #\i_readb               ' a |
                call    #\i_readw               ' | b
                mov     i_data1, i_data         ' a b

                getbyte i_data, i_ax, #0        ' a |
                getword i_data, i_ax, #0        ' | b
                mov     i_data0, i_data         ' a b

                sub     i_data, i_data1         ' a b

                testb   i_flags, #I_DF_BIT  wz  ' a b
                sumz    i_di, #1                ' a b
                sumz    i_di, #1                ' | b
                getword i_di, i_di, #0          ' a b

                jmp     #\@i_flags8             ' a |
                jmp     #\@i_flags16            '   b

i_cbw
                signx   i_ax, #7
        _ret_   getword i_ax, i_ax, #0

i_cwd
                testb   i_ax, #15           wc
        _ret_   muxc    i_dx, i_ffffh

i_salc
                testb   i_flags, #I_CF_BIT  wc
        _ret_   muxc    i_ax, #$FF

i_sahf
                getbyte i_data, i_ax, #1
                and     i_data, #$D5
        _ret_   setbyte i_flags, i_data, #0

i_lahf
                getbyte i_data, i_flags, #0
        _ret_   setbyte i_ax, i_data, #1

i_xlatb
                getbyte i_temp0, i_ax, #0
                add     i_temp0, i_bx
                getword i_temp0, i_temp0, #0
                getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_temp0
                call    #\i_readmemb
        _ret_   setbyte i_ax, i_tmpb, #0

i_xchg
                mov     pa, i_opcode
                call    #\i_getr16
                mov     i_data0, i_data
                getword i_data, i_ax, #0
                getword i_ax, i_data0, #0
                jmp     #\i_setr16

i_xchg_rmod
                call    #\i_readcodeb           ' a b   a:xchg_r8_rm   %00100_010_010_00
                getbyte i_modrm, i_tmpb, #0     ' a b   b:xchg_r16_rm %010010_001_001_00

                call    #\i_readopb             ' a |
                call    #\i_readopw             ' | b
                mov     i_data1, i_data         ' a b

                call    #\i_getmodr8            ' a |
                call    #\i_getmodr16           ' | b
                mov     i_data0, i_data         ' a b

                mov     i_data, i_data1         ' a b
                call    #\i_setmodr8            ' a |
                call    #\i_setmodr16           ' | b
                mov     i_data, i_data0         ' a b
                jmp     #\i_writebackb          ' a |
                jmp     #\i_writebackw          '   b

i_lock
                bith    i_flags, #I_LOCK_BIT
        _ret_   bith    i_flags, #I_NO_INT_BIT

i_readb
                call    #\i_readmemb
        _ret_   getbyte i_data, i_tmpb, #0

i_writeb
                getbyte i_tmpb, i_data, #0
                jmp     #\i_writememb

i_readw
                call    #\i_readmemb
                getbyte i_data, i_tmpb, #0
                add     i_ea, #1
                call    #\i_readmemb
                setbyte i_data, i_tmpb, #1
        _ret_   add     i_ea, #1

i_writew
                getbyte i_tmpb, i_data, #0
                call    #\i_writememb
                add     i_ea, #1
                getbyte i_tmpb, i_data, #1
                jmp     #\i_writememb

i_inout
                call    #\i_readcodeb           ' a b c d           a:in al, [pp]   %0_11111_11100_1_00
                getbyte i_ea, i_tmpb, #0        ' a b c d           b:in ax, [pp]   %0_11111_00000_1_00
i_inoutdx                                       '                   c:out [pp], al  %0_11100_11111_1_00
                getword i_ea, i_dx, #0          ' | | | | e f g h   d:out [pp], ax  %0_00000_11111_1_00

                call    #\i_readiob             ' a b | | e f | |   e:in al, [dx]   %0_11111_11100_0
                setbyte i_ax, i_tmpb, #0        ' a b | | e f | |   f:in ax, [pp]   %0_11111_00000_0
                add     i_ea, #1                ' | b | | | f | |   g:out [pp], al  %0_11100_11111_0
                call    #\i_readiob             ' | b | | | f | |   h:out [pp], ax  %0_00000_11111_0
                setbyte i_ax, i_tmpb, #1        ' | b | | | f | |

                getbyte i_tmpb, i_ax, #0        ' | | c d | | g h
                call    #\i_writeiob            ' | | c d | | g h
                add     i_ea, #1                ' | | | d | | | h
                getbyte i_tmpb, i_ax, #1        ' | | | d | | | h
                call    #\i_writeiob            ' | | | d | | | h
i_nop
                ret                             ' a b c d e f g h

i_into
                testb   i_flags, #I_OF_BIT  wz  ' %11_00
        if_x1   mov     i_tmpb, #4

i_int3          mov     i_tmpb, #3
i_int           call    #\i_readcodeb
                mov     i_temp0, i_tmpb
                getword i_data, i_flags, #0
                call    #\i_push
                getword i_data, i_cs, #0
                call    #\i_push
                getword i_data, i_ip, #0
                call    #\i_push
                bitl    i_flags, #I_TF_BIT
                bitl    i_flags, #I_IF_BIT
                mov     i_ea, i_temp0
                shl     i_ea, #2
                call    #\i_readw
                getword i_ip, i_data, #0
                call    #\i_readw
        _ret_   getword i_cs, i_data, #0

i_hlt
'        _ret_   decmod  i_ip, i_ffffh
                debug(uhex_word(i_ax,i_bx,i_cx,i_dx))
                debug(uhex_word(i_si,i_di,i_bp,i_sp))
                debug(uhex_word(i_es,i_cs,i_ss,i_ds))
                debug(uhex_word(i_ip),ubin_word(i_flags))
                cogid   pa
                cogstop pa

' --------------------------------------------------------------------

i_readmemb
                ' i_ea   = address
                ' i_tmpb = data
                mov     i_tmpb, #$FF
                mov     pa, i_ea
                shr     pa, #12             ' get 4k-bank number
                                            ' 00000
                cmp     pa, #$40        wcz ' 3FFFF ram (256k)
        if_b    jmp     #.ram
                cmp     pa, #$F0        wcz ' F0000
        if_ae   jmp     #.rom               ' FFFFF rom (64k)
                ret     wcz
.ram
                mov     pa, i_ea
                add     pa, i_rambase
                rdbyte  i_tmpb, pa
                'debug("RAM  (R) : ", uhex_long(i_ea,pa),uhex_byte(i_tmpb),dly(#10))
                ret     wcz
.rom
                mov     pa, i_ea
                and     pa, i_ffffh
                add     pa, i_rombase
                rdbyte  i_tmpb, pa
                'debug("ROM  (R) : ", uhex_long(i_ea,pa),uhex_byte(i_tmpb),dly(#10))
                ret     wcz

i_writememb
                ' i_ea   = address
                ' i_tmpb = data
                mov     pa, i_ea
                shr     pa, #12             ' get 4k-bank number
                                            ' 00000
                cmp     pa, #$40        wcz ' 3FFFF ram (256k)
        if_b    jmp     #.ram
                ret     wcz
.ram
                mov     pa, i_ea
                add     pa, i_rambase
                wrbyte  i_tmpb, pa
                'debug("RAM  (W) : ", uhex_long(i_ea,pa),uhex_byte(i_tmpb),dly(#10))
                ret     wcz

i_readiob
                ' i_ea   = address
                ' i_tmpb = data
                mov     i_tmpb, #$FF
                cmp     i_ea, #$F6      wcz
        if_e    jmp     #\acia_data_rd
                cmp     i_ea, #$F7      wcz
        if_e    jmp     #\acia_ctl_rd
                ret     wcz

i_writeiob
                ' i_ea   = address
                ' i_tmpb = data
                cmp     i_ea, #$F6      wcz
        if_e    jmp     #\acia_data_wr
                cmp     i_ea, #$F7      wcz
        if_e    jmp     #\acia_ctl_wr
                ret     wcz

i8086_lut_end

DAT             ' 8086 Opcode Table
                orgh

i_flags8
                testb   i_data, #7          wc
                testb   i_data1, #7         xorc
                testb   i_data, #7          wz
                testb   i_data0, #7         xorz
                modz    _c_and_nz           wz
                bitz    i_flags, #I_OF_BIT
                testb   i_data0, #4         wz
                testb   i_data1, #4         xorz
                testb   i_data, #4          xorz
                bitz    i_flags, #I_AF_BIT
i_flags8_szp
                testb   i_data, #7          wz
                bitz    i_flags, #I_SF_BIT
i_flags8_zp
                testb   i_data, #8          wz
                bitz    i_flags, #I_CF_BIT
                and     i_data, #$FF        wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i_flags16
                testb   i_data, #15         wc
                testb   i_data1, #15        xorc
                testb   i_data, #15         wz
                testb   i_data0, #15        xorz
                modz    _c_and_nz           wz
                bitz    i_flags, #I_OF_BIT
                testb   i_data0, #4         wz
                testb   i_data1, #4         xorz
                testb   i_data, #4          xorz
                bitz    i_flags, #I_AF_BIT
i_flags16_szp
                testb   i_data, #15         wz
                bitz    i_flags, #I_SF_BIT
i_flags16_zp
                testb   i_data, #16         wz
                bitz    i_flags, #I_CF_BIT
                and     i_data, i_ffffh     wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i8086_optable
'
' instruction           snippet                          skip pattern         encoding
'----------------------------------------------------------------------------------------------------
                long    i_mathop8      |     %001_11111010_001_001_00 << 10 ' 00 rm    add [rm], r8
                long    i_mathop16     |     %001_11111010_001_001_00 << 10 ' 01 rm    add [rm], r16
                long    i_mathop8      |     %010_11111010_010_010_00 << 10 ' 02 rm    add r8, [rm]
                long    i_mathop16     |     %010_11111010_010_010_00 << 10 ' 03 rm    add r16, [rm]
                long    i_mathop_acc   |        %010_1111010_010_1100 << 10 ' 04 nn    add al, nn
                long    i_mathop_acc   |      %01101_1111010_001_0000 << 10 ' 05 ll hh add ax, hhll
                long    i_push_es      |                    %111111_0 << 10 ' 06       push es
                long    i_pop_r16      |                       %01110 << 10 ' 07       pop es
                long    i_mathop8      |    %0101_11011111_001_001_00 << 10 ' 08 rm    or [rm], r8
                long    i_mathop16     |    %0101_11011111_001_001_00 << 10 ' 09 rm    or [rm], r16
                long    i_mathop8      |    %0110_11011111_010_010_00 << 10 ' 0A rm    or r8, [rm]
                long    i_mathop16     |    %0110_11011111_010_010_00 << 10 ' 0B rm    or r16, [rm]
                long    i_mathop_acc   |       %0110_1011111_010_1100 << 10 ' 0C nn    or al, nn
                long    i_mathop_acc   |     %011101_1011111_001_0000 << 10 ' 0D ll hh or ax, hhll
                long    i_push_cs      |                     %11111_0 << 10 ' 0E       push cs
                long    i_pop_r16      |                      %011110 << 10 ' 0F       pop cs

                long    i_mathop8      |     %001_11111001_001_001_00 << 10 ' 10 rm    adc [rm], r8
                long    i_mathop16     |     %001_11111001_001_001_00 << 10 ' 11 rm    adc [rm], r16
                long    i_mathop8      |     %010_11111001_010_010_00 << 10 ' 12 rm    adc r8, [rm]
                long    i_mathop16     |     %010_11111001_010_010_00 << 10 ' 13 rm    adc r16, [rm]
                long    i_mathop_acc   |        %010_1111001_010_1100 << 10 ' 14 nn    adc al nn
                long    i_mathop_acc   |      %01101_1111001_001_0000 << 10 ' 15 ll hh adc ax, hhll
                long    i_push_ss      |                      %1111_0 << 10 ' 16       push ss
                long    i_pop_r16      |                     %0111110 << 10 ' 17       pop ss
                long    i_mathop8      |     %001_11110101_001_001_00 << 10 ' 18 rm    sbb [rm], r8
                long    i_mathop16     |     %001_11110101_001_001_00 << 10 ' 19 rm    sbb [rm], r16
                long    i_mathop8      |     %010_11110101_010_010_00 << 10 ' 1A rm    sbb r8, [rm]
                long    i_mathop16     |     %010_11110101_010_010_00 << 10 ' 1B rm    sbb r16, [rm]
                long    i_mathop_acc   |        %010_1110101_010_1100 << 10 ' 1C nn    sbb al, nn
                long    i_mathop_acc   |      %01101_1110101_001_0000 << 10 ' 1D ll hh sbb ax, hhll
                long    i_push_ds      |                       %111_0 << 10 ' 1E       push ds
                long    i_pop_r16      |                    %01111110 << 10 ' 1F       pop ds

                long    i_mathop8      |    %0101_11101111_001_001_00 << 10 ' 20 rm    and [rm], r8
                long    i_mathop16     |    %0101_11101111_001_001_00 << 10 ' 21 rm    and [rm], r16
                long    i_mathop8      |    %0110_11101111_010_010_00 << 10 ' 22 rm    and r8, [rm]
                long    i_mathop16     |    %0110_11101111_010_010_00 << 10 ' 23 rm    and r16, [rm]
                long    i_mathop_acc   |       %0110_1101111_010_1100 << 10 ' 24 nn    and al, nn
                long    i_mathop_acc   |     %011101_1101111_001_0000 << 10 ' 25 ll hh and ax, hhll
                long    i_seg_es       |                      %0010__ << 10 ' 26       es:
                long    i_daas         |                           %0 << 10 ' 27       daa
                long    i_mathop8      |     %001_11110110_001_001_00 << 10 ' 28 rm    sub [rm], r8
                long    i_mathop16     |     %001_11110110_001_001_00 << 10 ' 29 rm    sub [rm], r16
                long    i_mathop8      |     %010_11110110_010_010_00 << 10 ' 2A rm    sub r8, [rm]
                long    i_mathop16     |     %010_11110110_010_010_00 << 10 ' 2B rm    sub r16, [rm]
                long    i_mathop_acc   |        %010_1110110_010_1100 << 10 ' 2C nn    sub al, nn
                long    i_mathop_acc   |      %01101_1110110_001_0000 << 10 ' 2D ll hh sub ax, hhll
                long    i_seg_cs       |                      %001110 << 10 ' 2E       cs:
                long    i_daas         |                           %0 << 10 ' 2F       das

                long    i_mathop8      |    %0101_10111111_001_001_00 << 10 ' 30 rm    xor [rm], r8
                long    i_mathop16     |    %0101_10111111_001_001_00 << 10 ' 31 rm    xor [rm], r16
                long    i_mathop8      |    %0110_10111111_010_010_00 << 10 ' 32 rm    xor r8, [rm]
                long    i_mathop16     |    %0110_10111111_010_010_00 << 10 ' 33 rm    xor r16, [rm]
                long    i_mathop_acc   |       %0110_0111111_010_1100 << 10 ' 34 nn    xor al, nn
                long    i_mathop_acc   |     %011101_0111111_001_0000 << 10 ' 35 ll hh xor ax, hhll
                long    i_seg_ss       |                      %000___ << 10 ' 36       ss:
                long    i_aaas         |                           %0 << 10 ' 37       aaa
                long    i_mathop8      |     %011_11110110_001_001_00 << 10 ' 38 rm    cmp [rm], r8
                long    i_mathop16     |     %011_11110110_001_001_00 << 10 ' 39 rm    cmp [rm], r16
                long    i_mathop8      |     %011_11110110_010_010_00 << 10 ' 3A rm    cmp r8, [rm]
                long    i_mathop16     |     %011_11110110_010_010_00 << 10 ' 3B rm    cmp r16, [rm]
                long    i_mathop_acc   |        %011_1110110_010_1100 << 10 ' 3C nn    cmp al, nn
                long    i_mathop_acc   |      %01111_1110110_001_0000 << 10 ' 3D ll hh cmp ax, hhll
                long    i_seg_ds       |                      %00110_ << 10 ' 3E       ds:
                long    i_aaas         |                           %0 << 10 ' 3F       aas

                long    i_incdec       |               %0011_100_0010 << 10 ' 40       inc ax
                long    i_incdec       |               %0011_100_0010 << 10 ' 41       inc cx
                long    i_incdec       |               %0011_100_0010 << 10 ' 42       inc dx
                long    i_incdec       |               %0011_100_0010 << 10 ' 43       inc bx
                long    i_incdec       |               %0011_100_0010 << 10 ' 44       inc sp
                long    i_incdec       |               %0011_100_0010 << 10 ' 45       inc bp
                long    i_incdec       |               %0011_100_0010 << 10 ' 46       inc si
                long    i_incdec       |               %0011_100_0010 << 10 ' 47       inc di
                long    i_incdec       |               %0011_010_0010 << 10 ' 48       dec ax
                long    i_incdec       |               %0011_010_0010 << 10 ' 49       dec cx
                long    i_incdec       |               %0011_010_0010 << 10 ' 4A       dec dx
                long    i_incdec       |               %0011_010_0010 << 10 ' 4B       dec bx
                long    i_incdec       |               %0011_010_0010 << 10 ' 4C       dec sp
                long    i_incdec       |               %0011_010_0010 << 10 ' 4D       dec bp
                long    i_incdec       |               %0011_010_0010 << 10 ' 4E       dec si
                long    i_incdec       |               %0011_010_0010 << 10 ' 4F       dec di

                long    i_push_r16     |                           %0 << 10 ' 50       push ax
                long    i_push_r16     |                           %0 << 10 ' 51       push cx
                long    i_push_r16     |                           %0 << 10 ' 52       push dx
                long    i_push_r16     |                           %0 << 10 ' 53       push bx
                long    i_push_r16     |                           %0 << 10 ' 54       push sp
                long    i_push_r16     |                           %0 << 10 ' 55       push bp
                long    i_push_r16     |                           %0 << 10 ' 56       push si
                long    i_push_r16     |                           %0 << 10 ' 57       push di
                long    i_pop_r16      |                           %0 << 10 ' 58       pop ax
                long    i_pop_r16      |                           %0 << 10 ' 59       pop cx
                long    i_pop_r16      |                           %0 << 10 ' 5A       pop dx
                long    i_pop_r16      |                           %0 << 10 ' 5B       pop bx
                long    i_pop_r16      |                           %0 << 10 ' 5C       pop sp
                long    i_pop_r16      |                           %0 << 10 ' 5D       pop bp
                long    i_pop_r16      |                           %0 << 10 ' 5E       pop si
                long    i_pop_r16      |                           %0 << 10 ' 5F       pop di

                long    i_jmp_d8       |           %1_111111111101_00 << 10 ' 60 dd          jo dd   60 - 6F are aliases to 70 - 7F
                long    i_jmp_d8       |           %0_111111111101_00 << 10 ' 61 dd          jno dd
                long    i_jmp_d8       |           %1_111111111011_00 << 10 ' 62 dd          jc dd
                long    i_jmp_d8       |           %0_111111111011_00 << 10 ' 63 dd          jnc dd
                long    i_jmp_d8       |           %1_111111110111_00 << 10 ' 64 dd          jz dd
                long    i_jmp_d8       |           %0_111111110111_00 << 10 ' 65 dd          jnz dd
                long    i_jmp_d8       |           %1_110111111011_00 << 10 ' 66 dd          jce dd
                long    i_jmp_d8       |           %0_110111111011_00 << 10 ' 67 dd          jnce dd
                long    i_jmp_d8       |           %1_111111101111_00 << 10 ' 68 dd          js dd
                long    i_jmp_d8       |           %0_111111101111_00 << 10 ' 69 dd          jns dd
                long    i_jmp_d8       |           %1_111111011111_00 << 10 ' 6A dd          jp dd
                long    i_jmp_d8       |           %0_111111011111_00 << 10 ' 6B dd          jnp dd
                long    i_jmp_d8       |           %1_011100101111_00 << 10 ' 6C dd          jl dd
                long    i_jmp_d8       |           %1_111010101111_00 << 10 ' 6D dd          jnl dd
                long    i_jmp_d8       |           %1_110100101111_00 << 10 ' 6E dd          jle dd
                long    i_jmp_d8       |           %1_011010101111_00 << 10 ' 6F dd          jnle dd

                long    i_jmp_d8       |           %1_111111111101_00 << 10 ' 70 dd          jo dd
                long    i_jmp_d8       |           %0_111111111101_00 << 10 ' 71 dd          jno dd
                long    i_jmp_d8       |           %1_111111111011_00 << 10 ' 72 dd          jc dd
                long    i_jmp_d8       |           %0_111111111011_00 << 10 ' 73 dd          jnc dd
                long    i_jmp_d8       |           %1_111111110111_00 << 10 ' 74 dd          jz dd
                long    i_jmp_d8       |           %0_111111110111_00 << 10 ' 75 dd          jnz dd
                long    i_jmp_d8       |           %1_110111111011_00 << 10 ' 76 dd          jce dd
                long    i_jmp_d8       |           %0_110111111011_00 << 10 ' 77 dd          jnce dd
                long    i_jmp_d8       |           %1_111111101111_00 << 10 ' 78 dd          js dd
                long    i_jmp_d8       |           %0_111111101111_00 << 10 ' 79 dd          jns dd
                long    i_jmp_d8       |           %1_111111011111_00 << 10 ' 7A dd          jp dd
                long    i_jmp_d8       |           %0_111111011111_00 << 10 ' 7B dd          jnp dd
                long    i_jmp_d8       |           %1_011100101111_00 << 10 ' 7C dd          jl dd
                long    i_jmp_d8       |           %1_111010101111_00 << 10 ' 7D dd          jnl dd
                long    i_jmp_d8       |           %1_110100101111_00 << 10 ' 7E dd          jle dd
                long    i_jmp_d8       |           %1_011010101111_00 << 10 ' 7F dd          jnle dd

                long    i_math_pre     |           %00000_10_11100_00 << 10 ' 80 rm nn       add/or/adc/sbb/and/sub(xor/cmp [rm8], nn
                long    i_math_pre     |         %0011000_01_10000_00 << 10 ' 81 rm ll hh    add/or/adc/sbb/and/sub(xor/cmp [rm16], hhll
                long    i_math_pre     |           %00000_10_01100_00 << 10 ' 82 rm sn       add/or/adc/sbb/and/sub(xor/cmp [rm8], sn
                long    i_math_pre     |         %0011000_01_01100_00 << 10 ' 83 rm sn       add/or/adc/sbb/and/sub(xor/cmp [rm16], sn
                long    i_mathop8      |    %0111_11101111_010_010_00 << 10 ' 84 rm          test r8, [mm]
                long    i_mathop16     |    %0111_11101111_010_010_00 << 10 ' 85 rm          test r16, [mm]
                long    i_xchg_rmod    |            %00100_010_010_00 << 10 ' 86 rm          xchg r8, [mm]
                long    i_xchg_rmod    |           %010010_001_001_00 << 10 ' 87 rm          xchg r16, [mm]
                long    i_mathop8      |   %01101_01111111_001_001_00 << 10 ' 88 rm          mov [rm], r8
                long    i_mathop16     |   %01101_01111111_001_001_00 << 10 ' 89 rm          add [rm], r16
                long    i_mathop8      |   %01110_01111111_010_010_00 << 10 ' 8A rm          mov r8, [rm]
                long    i_mathop16     |   %01110_01111111_010_010_00 << 10 ' 8B rm          add r16, [rm]
                long    i_mov_sreg     |               %000_111_00000 << 10 ' 8C mm          mov [rm], sreg
                long    i_lea          |                           %0 << 10 ' 8D mm          lea r16, ofs
                long    i_mov_sreg     |                   %000_00000 << 10 ' 8E mm          mov sregs, [rm]
                long    i_pop_rmod     |                           %0 << 10 ' 8F mm          pop [rm]

                long    i_nop          |                           %0 << 10 ' 90             nop
                long    i_xchg         |                           %0 << 10 ' 91             xchg ax, cx
                long    i_xchg         |                           %0 << 10 ' 92             xchg ax, dx
                long    i_xchg         |                           %0 << 10 ' 93             xchg ax, bx
                long    i_xchg         |                           %0 << 10 ' 94             xchg ax, sp
                long    i_xchg         |                           %0 << 10 ' 95             xchg ax, bp
                long    i_xchg         |                           %0 << 10 ' 96             xchg ax, si
                long    i_xchg         |                           %0 << 10 ' 97             xchg ax, di
                long    i_cbw          |                           %0 << 10 ' 98             cbw
                long    i_cwd          |                           %0 << 10 ' 99             cwd
                long    i_branch       |             %00_1_0000_00_00 << 10 ' 9A ol oh sl sh call shsl:ohol
                long    i_nop          |                           %0 << 10 ' 9B             wait
                long    i_pushf        |                           %0 << 10 ' 9C             pushf
                long    i_pop_r16      |                        %0110 << 10 ' 9D             popf
                long    i_sahf         |                           %0 << 10 ' 9E             sahf
                long    i_lahf         |                           %0 << 10 ' 9F             lahf

                long    i_mov_acc_offs |         %0_1111_1100_00000_0 << 10 ' A0 ol oh       mov al, [DS:ohol]
                long    i_mov_acc_offs |         %0_1111_0000_00000_0 << 10 ' A1 ol oh       mov ax, [DS:ohol]
                long    i_mov_acc_offs |         %0_1100_1111_00000_0 << 10 ' A2 ol oh       mov [DS:ohol], al
                long    i_mov_acc_offs |         %0_0000_1111_00000_0 << 10 ' A3 ol oh       mov [DS:ohol], ax
                long    i_movsb        |                           %0 << 10 ' A4             movsb
                long    i_movsw        |                           %0 << 10 ' A5             movsw
                long    i_cmps         |    %0_0010010_0_10000_010000 << 10 ' A6             cmpsb
                long    i_cmps         |   %01_0000000_0_01000_001000 << 10 ' A7             cmpsw
                long    i_mathop_acc   |       %0111_1101111_010_1100 << 10 ' A8 nn          test al, nn
                long    i_mathop_acc   |     %011111_1101111_001_0000 << 10 ' A9 ll hh       test ax, hhll
                long    i_stos         |              %0010_10_10_000 << 10 ' AA             stosb
                long    i_stos         |              %0000_01_01_000 << 10 ' AB             stosw
                long    i_lods         |            %0010_10_10_00000 << 10 ' AC             lodsb
                long    i_lods         |            %0000_01_01_00000 << 10 ' AD             lodsw
                long    i_scas         |        %0_0100_0_010_010_000 << 10 ' AE             scasb
                long    i_scas         |       %01_0000_0_001_001_000 << 10 ' AF             scasw

                long    i_mov_imm      |                     %00_1100 << 10 ' B0 nn          mov al, nn
                long    i_mov_imm      |                     %00_1100 << 10 ' B1 nn          mov cl, nn
                long    i_mov_imm      |                     %00_1100 << 10 ' B2 nn          mov dl, nn
                long    i_mov_imm      |                     %00_1100 << 10 ' B3 nn          mov bl, nn
                long    i_mov_imm      |                     %00_1100 << 10 ' B4 nn          mov ah, nn
                long    i_mov_imm      |                     %00_1100 << 10 ' B5 nn          mov ch, nn
                long    i_mov_imm      |                     %00_1100 << 10 ' B6 nn          mov dh, nn
                long    i_mov_imm      |                     %00_1100 << 10 ' B7 nn          mov bh, nn
                long    i_mov_imm      |                    %010_0000 << 10 ' B8 ll hh       mov ax, hhll
                long    i_mov_imm      |                    %010_0000 << 10 ' B9 ll hh       mov cx, hhll
                long    i_mov_imm      |                    %010_0000 << 10 ' BA ll hh       mov dx, hhll
                long    i_mov_imm      |                    %010_0000 << 10 ' BB ll hh       mov bx, hhll
                long    i_mov_imm      |                    %010_0000 << 10 ' BC ll hh       mov sp, hhll
                long    i_mov_imm      |                    %010_0000 << 10 ' BD ll hh       mov bp, hhll
                long    i_mov_imm      |                    %010_0000 << 10 ' BE ll hh       mov si, hhll
                long    i_mov_imm      |                    %010_0000 << 10 ' BF ll hh       mov di, hhll

                long    i_ret_d16      |                %001100_11_00 << 10 ' C0 dl dh       ret (SP+dhdl)
                long    i_ret          |                      %011100 << 10 ' C1             ret
                long    i_ret_d16      |                %001100_11_00 << 10 ' C2 dl dh       ret (SP+dhdl)
                long    i_ret          |                      %011100 << 10 ' C3             ret
                long    i_lseg_reg     |                  %010_00_000 << 10 ' C4 rm          les [rm]
                long    i_lseg_reg     |                   %00_00_000 << 10 ' C5 rm          lds [rm]
                long    i_mov_rmod_imm |                  %0_1100_000 << 10 ' C6 rm nn       mov byte [rmod], nn
                long    i_mov_rmod_imm |                 %01_0000_000 << 10 ' C7 rm ll hh    mov word [rmod], hhll
                long    i_ret_d16      |                %000000_11_00 << 10 ' C8 dl dh       retf (SP+dhdl)
                long    i_ret          |                      %010000 << 10 ' C9             retf
                long    i_ret_d16      |                %000000_11_00 << 10 ' CA dl dh       retf (SP+dhdl)
                long    i_ret          |                      %010000 << 10 ' CB             retf
                long    i_int3         |                          %10 << 10 ' CC             int3
                long    i_int          |                           %0 << 10 ' CD             int
                long    i_into         |                       %11_00 << 10 ' CE             into
                long    i_iret         |                   %010000_00 << 10 ' CF             iret

                long    i_rotshift     |         %00_0010000_10_10_00 << 10 ' D0 rm          rol/ror/rolc/rorc/shl/shr/shra
                long    i_rotshift     |       %0011_0001000_01_10_00 << 10 ' D1 rm          rol/ror/rolc/rorc/shl/shr/shra
                long    i_rotshift     |         %00_0010000_10_01_00 << 10 ' D2 rm          rol/ror/rolc/rorc/shl/shr/shra cl
                long    i_rotshift     |       %0011_0001000_01_01_00 << 10 ' D3 rm          rol/ror/rolc/rorc/shl/shr/shra cl
                long    i_aam          |                           %0 << 10 ' D4             aam
                long    i_aad          |                           %0 << 10 ' D5             aad
                long    i_salc         |                           %0 << 10 ' D6             salc
                long    i_xlatb        |                           %0 << 10 ' D7             xlatb
                long    i_esc_op       |                           %0 << 10 ' D8 rm          esc rm
                long    i_esc_op       |                           %0 << 10 ' D9 rm          esc rm
                long    i_esc_op       |                           %0 << 10 ' DA rm          esc rm
                long    i_esc_op       |                           %0 << 10 ' DB rm          esc rm
                long    i_esc_op       |                           %0 << 10 ' DC rm          esc rm
                long    i_esc_op       |                           %0 << 10 ' DD rm          esc rm
                long    i_esc_op       |                           %0 << 10 ' DE rm          esc rm
                long    i_esc_op       |                           %0 << 10 ' DF rm          esc rm

                long    i_loop         |                   %00_01_000 << 10 ' E0 dd          loopne dd
                long    i_loop         |                   %00_10_000 << 10 ' E1 dd          loope dd
                long    i_loop         |                   %00_11_000 << 10 ' E2 dd          loop dd
                long    i_jcxz         |                           %0 << 10 ' E3 dd          jcxz dd
                long    i_inout        |          %0_11111_11100_1_00 << 10 ' E4 pp          in al, [pp]
                long    i_inout        |          %0_11111_00000_1_00 << 10 ' E5 pp          in ax, [pp]
                long    i_inout        |          %0_11100_11111_1_00 << 10 ' E6 pp          out al, [pp]
                long    i_inout        |          %0_00000_11111_1_00 << 10 ' E7 pp          out ax, [pp]
                long    i_branch       |             %01_0_0011_11_00 << 10 ' E8 ol oh       call +ohol
                long    i_branch       |             %01_0_1111_11_00 << 10 ' E9 ol oh       jmp +ohol
                long    i_branch       |             %00_1_1111_00_00 << 10 ' EA ol oh sl sh jmp shsl:ohol
                long    i_jmp_d8       |        %00_1_111111111110_00 << 10 ' EB oo          jmp +oo
                long    i_inoutdx      |             %0_11111_11100_0 << 10 ' EC             in al, [dx]
                long    i_inoutdx      |             %0_11111_00000_0 << 10 ' ED             in ax, [dx]
                long    i_inoutdx      |             %0_11100_11111_0 << 10 ' EE             out al, [dx]
                long    i_inoutdx      |             %0_00000_11111_0 << 10 ' EF             out ax, [dx]

                long    i_lock         |                           %0 << 10 ' F0             lock
                long    i_lock         |                           %0 << 10 ' F1             lock
                long    i_repne        |                           %0 << 10 ' F2             repne
                long    i_repe         |                           %0 << 10 ' F3             repe
                long    i_hlt          |                           %0 << 10 ' F4             hlt
                long    i_cmc          |                           %0 << 10 ' F5             cmc
                long    i_prefixed_op  |                 %0_110_00000 << 10 ' F6
                long    i_prefixed_op  |                 %0_101_00000 << 10 ' F7
                long    i_clc          |                           %0 << 10 ' F8             clc
                long    i_stc          |                           %0 << 10 ' F9             stc
                long    i_cli          |                           %0 << 10 ' FA             cli
                long    i_sti          |                           %0 << 10 ' FB             sti
                long    i_cld          |                           %0 << 10 ' FC             cld
                long    i_std          |                           %0 << 10 ' FD             std
                long    i_fe_pre       |                           %0 << 10 ' FE             inc/dec [rm]
                long    i_prefixed_op  |                 %0_011_00000 << 10 ' FF             inc/dec/call/call far/jmp/jmp far/push/cmp [rm]

CON             ' 8086 Constants

    I_CF_BIT = 0    ' Carry
    I_PF_BIT = 2    ' Parity
    I_AF_BIT = 4    ' Aux. Carry
    I_ZF_BIT = 6    ' Zero
    I_SF_BIT = 7    ' Sign
    I_TF_BIT = 8    ' Trap
    I_IF_BIT = 9    ' Interrupt
    I_DF_BIT = 10   ' Direction
    I_OF_BIT = 11   ' Overflow

    I_LOCK_BIT   = 30
    I_NO_INT_BIT = 31

DAT
                orgh

system_init
                fltl    #ACIA_RX                      ' configure rx smart pin
                wrpin   ##P_ASYNC_RX, #ACIA_RX
                wxpin   ##(((_CLKFREQ * $1_0000) / ACIA_BAUD) & $FFFFFC00) | 7, #ACIA_RX
                drvl    #ACIA_RX

                fltl    #ACIA_TX                      ' configure tx smart pin
                wrpin   ##(P_ASYNC_TX | P_OE), #ACIA_TX
                wxpin   ##(((_CLKFREQ * $1_0000) / ACIA_BAUD) & $FFFFFC00) | 7, #ACIA_TX
                drvl    #ACIA_TX

                waitx   ##(_CLKFREQ / 1_000) * 200
                wypin   #$0D, #ACIA_TX

                ret

system_run
                testb   acia_ctl_reg, #7    wc
                'rdword  zk_memtmp0, #@zk_irq_mem+2
                testp   #ACIA_RX            andc
                'bitc    zk_memtmp0, #8
                'wrword  zk_memtmp0, #@zk_irq_mem+2
                bitc    acia_ctl_reg, #7 + 16
                ret

acia_data_rd
                rdpin   i_tmpb, #ACIA_RX
                shr     i_tmpb, #24
                bitl    acia_ctl_reg, #7 + 16
                'debug("I/O  (R) : ", uhex_long(i_ea),uhex_byte(i_tmpb),dly(#200))
                ret     wcz

acia_data_wr
                'debug("I/O  (W) : ", uhex_long(i_ea),uhex_byte(i_tmpb),dly(#200))
                and     i_tmpb, #$7F
                wypin   i_tmpb, #ACIA_TX
                ret     wcz

acia_ctl_rd
                getbyte i_tmpb, acia_ctl_reg, #2
                testp   #ACIA_RX    wc
                bitc    i_tmpb, #0
                testp   #ACIA_TX    wc
                bitc    i_tmpb, #1
                'debug("I/O  (R) : ", uhex_long(i_ea),uhex_byte(i_tmpb),dly(#200))
                ret     wcz

acia_ctl_wr
                'debug("I/O  (W) : ", uhex_long(i_ea),uhex_byte(i_tmpb))
                setbyte acia_ctl_reg, i_tmpb, #0
                ret     wcz

                fit     RAM_BASE

                orgh    $02000

system_rom
                file    "MONITOR.ROM"

CON

    RAM_BASE    = $2_0000
