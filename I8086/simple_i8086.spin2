{
    INTEL 8086 CPU Emulator
    Copyright (c) 2022 by Marco Maccaferri <macca@maccasoft.com>

    Monitor code based on SCP 8086 Monitor by Seattle Computer Products, Inc.

    Memory Map:

        00000-3FFFF ram (256k)
        F0000-FFFFF rom (64k)

    I/O Map:

        00F6 ACIA data port
        00F7 ACIA status register
}

CON

    _CLKFREQ = 160_000_000

    ACIA_RX     = 8 '63 '8  { I }
    ACIA_TX     = 9 '62 '9  { O }
    ACIA_BAUD   = 115_200

DAT             ' 8086
                org     $000

i8086
                asmclk

                add     ptrb, ##@i8086_lut - @i8086
                setq2   #(@i8086_lut_end - @i8086_lut) / 4 -1
                rdlong  0, ptrb

                call    #\@@system_init

                mov     i_optable, ##@@i8086_optable
                getct   i_lastwait

.nextop
                getct   i_total
                sub     i_total, i_lastwait

                'add     i_total, i_cycles
                bitl    i_flags, #I_SEG_BIT

                call    #\@@system_run

                bitl    i_flags, #I_NO_INT_BIT  wcz
                testb   i_flags, #I_TF_BIT      wz
        if_01   mov     i_temp0, #1
        if_01   call    #\@@i_trap

                getct   i_lastwait
                mov     i_cycles, #0
                getword i_ip_start, i_ip, #0

.loop
                call    #\i_readcodeb
                mov     i_opcode, i_tmpb

                cmp     i_opcode, #$26      wz
        if_ne   cmp     i_opcode, #$2E      wz
        if_ne   cmp     i_opcode, #$36      wz
        if_ne   cmp     i_opcode, #$3E      wz
        if_e    jmp     #.seg

                cmp     i_opcode, #$F2      wz
        if_ne   cmp     i_opcode, #$F3      wz
        if_e    jmp     #.rep

                shl     i_tmpb, #2
                add     i_tmpb, i_optable
                rdlong  i_opimpl, i_tmpb

                bitl    i_flags, #I_REP_BIT wcz
        if_11   call    #.rep_valid
        if_11   jmp     #.repeat

                push    #.nextop
                jmp     i_opimpl

.seg
                cmp     i_opcode, #$26      wz
        if_e    mov     i_override, i_es
                cmp     i_opcode, #$2E      wz
        if_e    mov     i_override, i_cs
                cmp     i_opcode, #$36      wz
        if_e    mov     i_override, i_ss
                cmp     i_opcode, #$3E      wz
        if_e    mov     i_override, i_ds
                bith    i_flags, #I_SEG_BIT
                add     i_cycles, #2
                jmp     #.loop

.rep
                bith    i_flags, #I_REP_BIT

                testb   i_opcode, #0        wz
                bitz    i_flags, #I_REP_ZF_BIT

                add     i_cycles, #2
                jmp     #.loop

.rep_valid
                cmp     i_opcode, #$A4        wz
        if_ne   cmp     i_opcode, #$A5        wz
        if_ne   cmp     i_opcode, #$AA        wz
        if_ne   cmp     i_opcode, #$AB        wz
        if_ne   cmp     i_opcode, #$AC        wz
        if_ne   cmp     i_opcode, #$AD        wz
        if_ne   cmp     i_opcode, #$A6        wz
        if_ne   cmp     i_opcode, #$A7        wz
        if_ne   cmp     i_opcode, #$AE        wz
        if_ne   cmp     i_opcode, #$AF        wz
                ret

.repeat
                cmp     i_cx, #0            wz
        if_z    jmp     #.nextop

                call    i_opimpl
                sub     i_cx, #1

                cmp     i_opcode, #$A4      wz
        if_ne   cmp     i_opcode, #$A5      wz
        if_ne   cmp     i_opcode, #$AA      wz
        if_ne   cmp     i_opcode, #$AB      wz
        if_ne   cmp     i_opcode, #$AC      wz
        if_ne   cmp     i_opcode, #$AD      wz
        if_e    jmp     #.repeat

                testb   i_flags, #I_REP_ZF_BIT  wc
                testb   i_flags, #I_ZF_BIT      wz
    if_c_eq_z   jmp     #.repeat

                jmp     #.nextop

i_esc_op
                ' fall-through
i_readcodeb
                getword i_ea, i_cs, #0
                shl     i_ea, #4
                add     i_ea, i_ip
                incmod  i_ip, i_ffffh
                jmp     #\i_readmemb

i_readimmb
                call    #\i_readcodeb
        _ret_   getbyte i_data, i_tmpb, #0

i_readimmw
                call    #\i_readcodeb
                getbyte i_data, i_tmpb, #0
                call    #\i_readcodeb
        _ret_   setbyte i_data, i_tmpb, #1

' +-----+---------------+------------------+-------------------+---------+---------+
' | mod |      00       |       01         |        10         |   11    |         |
' +-----+---------------+------------------+-------------------+---------+---------+
' | r/m |               |                  |                   |         |   reg   |
' +-----+---------------+------------------+-------------------+---------+----+----+
' | 000 | [DS:BX+SI]    | [DS:BX+SI+disp8] | [DS:BX+SI+disp16] | [DS:AX] | AL | AX |
' | 001 | [DS:BX+DI]    | [DS:BX+DI+disp8] | [DS:BX+DI+disp16] | [DS:CX] | CL | CX |
' | 010 | [SS:BP+SI]    | [SS:BP+SI+disp8] | [SS:BP+SI+disp16] | [DS:DX] | DL | DX |
' | 011 | [SS:BP+DI]    | [SS:BP+DI+disp8] | [SS:BP+DI+disp16] | [DS:BX] | BL | BX |
' | 100 | [DS:SI]       | [DS:SI+disp8]    | [DS:SI+disp16]    | [DS:SP] | AH | SP |
' | 101 | [DS:DI]       | [DS:DI+disp8]    | [DS:DI+disp16]    | [DS:BP] | CH | BP |
' | 110 | [DS:disp16]   | [SS:BP+disp8]    | [SS:BP+disp16]    | [DS:SI] | DH | SI |
' | 111 | [DS:BX]       | [DS:BX+disp8]    | [DS:BX+disp16]    | [DS:DI] | BH | DI |
' +-----+---------------+------------------+-------------------+---------+----+----+

'   setup i_ea based on i_modrm bits

i_setupmodrm
                call    #\i_readcodeb
                mov     i_modrm, i_tmpb
i_setupmodrm2
                getword i_segment, i_ds, #0
                mov     i_offset, #0
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
                mov     i_modrm0, i_modrm
                and     i_modrm0, #%00_000_111
        if_00   call    #\_mod00
        if_01   call    #\_mod01
        if_10   call    #\_mod10
        if_11   call    #\_mod11
        _ret_   getword i_offset, i_offset, #0

i_setupea
                add     i_cycles, #2
                testb   i_flags, #I_SEG_BIT wz
        if_x1   getword i_ea, i_override, #0
        if_x0   getword i_ea, i_segment, #0
                shl     i_ea, #4
        _ret_   add     i_ea, i_offset

_mod00
                altgw   i_modrm0, #i_modrm_00
                getword i_modrm0
                jmp     i_modrm0
_mod01
                add     i_cycles, #4
                call    #\i_readcodeb
                signx   i_tmpb, #7
                add     i_offset, i_tmpb
                jmp     #_modxx
_mod10
                add     i_cycles, #4
                call    #\i_readcodeb
                getbyte i_temp0, i_tmpb, #0
                call    #\i_readcodeb
                setbyte i_temp0, i_tmpb, #1
                add     i_offset, i_temp0
_modxx
                altgw   i_modrm0, #i_modrm_xx
                getword i_modrm0
                jmp     i_modrm0
_mod11
                jmprel  i_modrm0
        _ret_   getword i_offset, i_ax, #0
        _ret_   getword i_offset, i_cx, #0
        _ret_   getword i_offset, i_dx, #0
        _ret_   getword i_offset, i_bx, #0
        _ret_   getword i_offset, i_sp, #0
        _ret_   getword i_offset, i_bp, #0
        _ret_   getword i_offset, i_si, #0
        _ret_   getword i_offset, i_di, #0

i_modrm_00      word    i_modrm_00_xxx_000, i_modrm_00_xxx_001, i_modrm_00_xxx_010, i_modrm_00_xxx_011
                word    i_modrm_00_xxx_100, i_modrm_00_xxx_101, i_modrm_00_xxx_110, i_modrm_00_xxx_111

i_modrm_xx      word    i_modrm_00_xxx_000, i_modrm_00_xxx_001, i_modrm_00_xxx_010, i_modrm_00_xxx_011
                word    i_modrm_00_xxx_100, i_modrm_00_xxx_101, i_modrm_xx_xxx_110, i_modrm_00_xxx_111

i_modrm_00_xxx_000
                add     i_cycles, #7
                add     i_offset, i_bx
        _ret_   add     i_offset, i_si
i_modrm_00_xxx_001
                add     i_cycles, #8
                add     i_offset, i_bx
        _ret_   add     i_offset, i_di
i_modrm_00_xxx_010
                add     i_cycles, #8
                getword i_segment, i_ss, #0
                add     i_offset, i_bp
        _ret_   add     i_offset, i_si
i_modrm_00_xxx_011
                add     i_cycles, #7
                getword i_segment, i_ss, #0
                add     i_offset, i_bp
        _ret_   add     i_offset, i_di
i_modrm_00_xxx_100
                add     i_cycles, #5
        _ret_   add     i_offset, i_si
i_modrm_00_xxx_101
                add     i_cycles, #5
        _ret_   add     i_offset, i_di
i_modrm_00_xxx_110
                add     i_cycles, #6 + 4
                call    #\i_readcodeb
                getbyte i_temp0, i_tmpb, #0
                call    #\i_readcodeb
                setbyte i_temp0, i_tmpb, #1
        _ret_   add     i_offset, i_temp0
i_modrm_00_xxx_111
                add     i_cycles, #5
        _ret_   add     i_offset, i_bx

i_modrm_xx_xxx_110
                add     i_cycles, #5
                getword i_segment, i_ss, #0
        _ret_   add     i_offset, i_bp

' get 8-bit register based on i_modrm bits 5..3

i_getmodr8
                mov     pa, i_modrm
                shr     pa, #3
i_getr8
                and     pa, #7
                jmprel  pa
        _ret_   getbyte i_data, i_ax, #0
        _ret_   getbyte i_data, i_cx, #0
        _ret_   getbyte i_data, i_dx, #0
        _ret_   getbyte i_data, i_bx, #0
        _ret_   getbyte i_data, i_ax, #1
        _ret_   getbyte i_data, i_cx, #1
        _ret_   getbyte i_data, i_dx, #1
        _ret_   getbyte i_data, i_bx, #1

' get 16-bit register based on i_modrm bits 5..3

i_getmodr16
                mov     pa, i_modrm
                shr     pa, #3
i_getr16
                and     pa, #7
                jmprel  pa
        _ret_   getword i_data, i_ax, #0
        _ret_   getword i_data, i_cx, #0
        _ret_   getword i_data, i_dx, #0
        _ret_   getword i_data, i_bx, #0
        _ret_   getword i_data, i_sp, #0
        _ret_   getword i_data, i_bp, #0
        _ret_   getword i_data, i_si, #0
        _ret_   getword i_data, i_di, #0


' set 8-bit register based on i_modrm bits 5..3

i_setmodr8
                mov     pa, i_modrm
                shr     pa, #3
i_setr8
                and     pa, #7
                jmprel  pa
        _ret_   setbyte i_ax, i_data, #0
        _ret_   setbyte i_cx, i_data, #0
        _ret_   setbyte i_dx, i_data, #0
        _ret_   setbyte i_bx, i_data, #0
        _ret_   setbyte i_ax, i_data, #1
        _ret_   setbyte i_cx, i_data, #1
        _ret_   setbyte i_dx, i_data, #1
        _ret_   setbyte i_bx, i_data, #1

' set 16-bit register based on i_modrm bits 5..3

i_setmodr16
                mov     pa, i_modrm
                shr     pa, #3
i_setr16
                and     pa, #7
                jmprel  pa
        _ret_   getword i_ax, i_data, #0
        _ret_   getword i_cx, i_data, #0
        _ret_   getword i_dx, i_data, #0
        _ret_   getword i_bx, i_data, #0
        _ret_   getword i_sp, i_data, #0
        _ret_   getword i_bp, i_data, #0
        _ret_   getword i_si, i_data, #0
        _ret_   getword i_di, i_data, #0

' get segment register based on i_modrm bits 5..3

i_getmodsreg
                mov     pa, i_modrm
i_getsreg
                shr     pa, #3
                and     pa, #3
                jmprel  pa
        _ret_   getword i_data, i_es, #0
        _ret_   getword i_data, i_cs, #0
        _ret_   getword i_data, i_ss, #0
        _ret_   getword i_data, i_ds, #0

' set segment register based on i_modrm bits 5..3

i_setmodsreg
                mov     pa, i_modrm
i_setsreg
                shr     pa, #3
                and     pa, #3
                jmprel  pa
        _ret_   getword i_es, i_data, #0
        _ret_   getword i_cs, i_data, #0
        _ret_   getword i_ss, i_data, #0
        _ret_   getword i_ds, i_data, #0

' --------------------------------------------------------------------

i_readopb
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_getr8
                call    #\i_setupea
                jmp     #\i_readb

i_writeopb
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_setr8
                call    #\i_setupea
                jmp     #\i_writeb

' --------------------------------------------------------------------

i_readopw
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_getr16
                call    #\i_setupea
                jmp     #\i_readw

i_writeopw
                testb   i_modrm, #7         wc
                testb   i_modrm, #6         wz
        if_11   mov     pa, i_modrm
        if_11   jmp     #\i_setr16
                call    #\i_setupea
                jmp     #\i_writew

' --------------------------------------------------------------------

i_readb
                add     i_cycles, #4
                call    #\i_readmemb
        _ret_   getbyte i_data, i_tmpb, #0

i_writeb
                add     i_cycles, #4
                getbyte i_tmpb, i_data, #0
                jmp     #\i_writememb

i_readw
                add     i_cycles, #4
                testb   i_ea, #0            wc
        if_c    add     i_cycles, #4
                call    #\i_readmemb
                getbyte i_data, i_tmpb, #0
                add     i_ea, #1
                call    #\i_readmemb
                setbyte i_data, i_tmpb, #1
        _ret_   add     i_ea, #1

i_writew
                add     i_cycles, #4
                testb   i_ea, #0            wc
        if_c    add     i_cycles, #4
                getbyte i_tmpb, i_data, #0
                call    #\i_writememb
                add     i_ea, #1
                getbyte i_tmpb, i_data, #1
                jmp     #\i_writememb

' --------------------------------------------------------------------

i_add_flags16
                testb   i_data0, #15        wc      ' (resultDst ^ resultSrc)
                testb   i_data1, #15        xorc    ' |
                testb   i_data1, #15        wz      ' (resultSrc ^ resultArith)
                testb   i_data, #15         xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                testb   i_data0, #15        xorz    ' (resultDst ^ ((resultDst ^ resultSrc) & (resultSrc ^ resultArith)))
                bitz    i_flags, #I_CF_BIT
i_add_flags16_nc
                testb   i_data0, #15        wc      ' (resultDst ^ resultArith)
                testb   i_data, #15         xorc    ' |
                testb   i_data1, #15        wz      ' (resultSrc ^ resultArith)
                testb   i_data, #15         xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                bitz    i_flags, #I_OF_BIT

                testb   i_data0, #4         wz
                testb   i_data1, #4         xorz
                testb   i_data, #4          xorz
                bitz    i_flags, #I_AF_BIT

                test    i_data, #$FF        wcz
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #15         wz
                bitz    i_flags, #I_SF_BIT
                and     i_data, i_ffffh     wcz
        _ret_   bitz    i_flags, #I_ZF_BIT

i_sub_flags16
                testb   i_data, #15         wc      ' (resultDst ^ resultSrc)
                testb   i_data1, #15        xorc    ' |
                testb   i_data1, #15        wz      ' (resultSrc ^ resultArith)
                testb   i_data0, #15        xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                testb   i_data, #15         xorz    ' (resultDst ^ ((resultDst ^ resultSrc) & (resultSrc ^ resultArith)))
                bitz    i_flags, #I_CF_BIT
i_sub_flags16_nc
                testb   i_data, #15         wc      ' (resultDst ^ resultArith)
                testb   i_data0, #15        xorc    ' |
                testb   i_data1, #15        wz      ' (resultSrc ^ resultArith)
                testb   i_data0, #15        xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                bitz    i_flags, #I_OF_BIT

                testb   i_data0, #4         wz
                testb   i_data1, #4         xorz
                testb   i_data, #4          xorz
                bitz    i_flags, #I_AF_BIT

                test    i_data, #$FF        wcz
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #15         wz
                bitz    i_flags, #I_SF_BIT
                and     i_data, i_ffffh     wcz
        _ret_   bitz    i_flags, #I_ZF_BIT

i_add_flags8
                testb   i_data0, #7         wc      ' (resultDst ^ resultSrc)
                testb   i_data1, #7         xorc    ' |
                testb   i_data1, #7         wz      ' (resultSrc ^ resultArith)
                testb   i_data, #7          xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                testb   i_data0, #7         xorz    ' (resultDst ^ ((resultDst ^ resultSrc) & (resultSrc ^ resultArith)))
                bitz    i_flags, #I_CF_BIT
i_add_flags8_nc
                testb   i_data0, #7         wc      ' (resultDst ^ resultArith)
                testb   i_data, #7          xorc    ' |
                testb   i_data1, #7         wz      ' (resultSrc ^ resultArith)
                testb   i_data, #7          xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                bitz    i_flags, #I_OF_BIT

                testb   i_data0, #4         wz
                testb   i_data1, #4         xorz
                testb   i_data, #4          xorz
                bitz    i_flags, #I_AF_BIT

                testb   i_data, #7          wz
                bitz    i_flags, #I_SF_BIT
                and     i_data, #$FF        wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i_sub_flags8
                testb   i_data, #7          wc      ' (resultDst ^ resultSrc)
                testb   i_data1, #7         xorc    ' |
                testb   i_data1, #7         wz      ' (resultSrc ^ resultArith)
                testb   i_data0, #7         xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                testb   i_data, #7          xorz    ' (resultDst ^ ((resultDst ^ resultSrc) & (resultSrc ^ resultArith)))
                bitz    i_flags, #I_CF_BIT
i_sub_flags8_nc
                testb   i_data, #7          wc      ' (resultDst ^ resultArith)
                testb   i_data0, #7         xorc    ' |
                testb   i_data1, #7         wz      ' (resultSrc ^ resultArith)
                testb   i_data0, #7         xorz    ' |
                modz    _c_and_z            wz      ' ((resultDst ^ resultSrc) & (resultSrc ^ resultArith))
                bitz    i_flags, #I_OF_BIT

                testb   i_data0, #4         wz
                testb   i_data1, #4         xorz
                testb   i_data, #4          xorz
                bitz    i_flags, #I_AF_BIT

                testb   i_data, #7          wz
                bitz    i_flags, #I_SF_BIT
                and     i_data, #$FF        wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i_logic_flags8
                bitl    i_flags, #I_CF_BIT
                bitl    i_flags, #I_OF_BIT

                testb   i_data, #7          wz
                bitz    i_flags, #I_SF_BIT
                and     i_data, #$FF        wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i_logic_flags16
                bitl    i_flags, #I_CF_BIT
                bitl    i_flags, #I_OF_BIT

                test    i_data, #$FF        wcz
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #15         wz
                bitz    i_flags, #I_SF_BIT
                and     i_data, i_ffffh     wcz
        _ret_   bitz    i_flags, #I_ZF_BIT

' --------------------------------------------------------------------

i_ax            long    $0000
i_bx            long    $0000
i_cx            long    $0000
i_dx            long    $0000

i_sp            long    $0000
i_bp            long    $0000
i_si            long    $0000
i_di            long    $0000

i_cs            long    $F000
i_ds            long    $0000
i_es            long    $0000
i_ss            long    $0000

i_flags         long    $0000
i_flags_pre     long    $0002
i_ip            long    $FFF0

i_cycles        long    0
i_total         long    0

i_ffffh         long    $FFFF
i_eamask        long    $FFFFF
i_optable       long    0

i_rambase       long    @ram_00000
i_rombase       long    @rom_F0000

acia_ctl_reg    long    0

i_opcode        res     1
i_modrm         res     1
i_modrm0        res     1

i_override      res     1
i_segment       res     1
i_offset        res     1
i_ea            res     1

i_tmpb          res     1
i_data          res     1
i_data0         res     1
i_data1         res     1

i_temp0         res     1
i_temp1         res     1
i_opimpl        res     1
i_rep_cnt       res     1
i_ip_start      res     1
i_lastwait      res     1

DAT             ' 8086 LUT
                org     $200
i8086_lut

i_readmemb
                ' i_ea   = address
                ' i_tmpb = data
                and     i_ea, i_eamask
                mov     i_tmpb, #$FF
                mov     pa, i_ea
                shr     pa, #12             ' get 4k-bank number
                                            ' 00000
                cmp     pa, #$40        wcz ' 3FFFF ram (256k)
        if_b    jmp     #.ram
                cmp     pa, #$F0        wcz ' F0000
        if_ae   jmp     #.rom               ' FFFFF rom (64k)
                ret     wcz
.ram
                mov     pa, i_ea
                add     pa, i_rambase
                rdbyte  i_tmpb, pa
                ret     wcz
.rom
                mov     pa, i_ea
                sub     pa, ##$F0000
                add     pa, i_rombase
                rdbyte  i_tmpb, pa
                ret     wcz

i_writememb
                ' i_ea   = address
                ' i_tmpb = data
                and     i_ea, i_eamask
                mov     pa, i_ea
                shr     pa, #12             ' get 4k-bank number
                                            ' 00000
                cmp     pa, #$40        wcz ' 0FFFF ram (64k)
        if_b    jmp     #.ram
                ret     wcz
.ram
                mov     pa, i_ea
                add     pa, i_rambase
                wrbyte  i_tmpb, pa
                ret     wcz

i_readiob
                ' i_ea   = address
                ' i_tmpb = data
                mov     i_tmpb, #$FF
                cmp     i_ea, #$F6      wcz
        if_e    jmp     #\@@acia_data_rd
                cmp     i_ea, #$F7      wcz
        if_e    jmp     #\@@acia_ctl_rd
                ret     wcz

i_writeiob
                ' i_ea   = address
                ' i_tmpb = data
                cmp     i_ea, #$F6      wcz
        if_e    jmp     #\@@acia_data_wr
                cmp     i_ea, #$F7      wcz
        if_e    jmp     #\@@acia_ctl_wr
                ret     wcz

i8086_lut_end

DAT             ' 8086 HUB
                orgh

i8086_optable
                long    @@i_math_modrm_r8       ' 00 rm                 add [rm], r8
                long    @@i_math_modrm_r16      ' 01 rm                 add [rm], r16
                long    @@i_math_r8_modrm       ' 02 rm                 add r16, [rm]
                long    @@i_math_r16_modrm      ' 03 rm                 add r8, [rm]
                long    @@i_math_al_imm8        ' 04 nn                 add al, nn
                long    @@i_math_ax_imm16       ' 05 ll hh              add ax, hhll
                long    @@i_push_sreg           ' 06                    push es
                long    @@i_pop_sreg            ' 07                    pop es
                long    @@i_math_modrm_r8       ' 08 rm                 or  [rm], r8
                long    @@i_math_modrm_r16      ' 09 rm                 or  [rm], r16
                long    @@i_math_r8_modrm       ' 0A rm                 or  r16, [rm]
                long    @@i_math_r16_modrm      ' 0B rm                 or  r8, [rm]
                long    @@i_math_al_imm8        ' 0C nn                 or  al, nn
                long    @@i_math_ax_imm16       ' 0D ll hh              or  ax, hhll
                long    @@i_push_sreg           ' 0E                    push cs
                long    @@i_pop_sreg            ' 0F                    pop cs

                long    @@i_math_modrm_r8       ' 10 rm                 adc [rm], r8
                long    @@i_math_modrm_r16      ' 11 rm                 adc [rm], r16
                long    @@i_math_r8_modrm       ' 12 rm                 adc r16, [rm]
                long    @@i_math_r16_modrm      ' 13 rm                 adc r8, [rm]
                long    @@i_math_al_imm8        ' 14 nn                 adc al, nn
                long    @@i_math_ax_imm16       ' 15 ll hh              adc ax, hhll
                long    @@i_push_sreg           ' 16                    push ss
                long    @@i_pop_sreg            ' 17                    pop ss
                long    @@i_math_modrm_r8       ' 18 rm                 sbb [rm], r8
                long    @@i_math_modrm_r16      ' 19 rm                 sbb [rm], r16
                long    @@i_math_r8_modrm       ' 1A rm                 sbb r16, [rm]
                long    @@i_math_r16_modrm      ' 1B rm                 sbb r8, [rm]
                long    @@i_math_al_imm8        ' 1C nn                 sbb al, nn
                long    @@i_math_ax_imm16       ' 1D ll hh              sbb ax, hhll
                long    @@i_push_sreg           ' 1E                    push ds
                long    @@i_pop_sreg            ' 1F                    pop ds

                long    @@i_math_modrm_r8       ' 20 rm                 and [rm], r8
                long    @@i_math_modrm_r16      ' 21 rm                 and [rm], r16
                long    @@i_math_r8_modrm       ' 22 rm                 and r16, [rm]
                long    @@i_math_r16_modrm      ' 23 rm                 and r8, [rm]
                long    @@i_math_al_imm8        ' 24 nn                 and al, nn
                long    @@i_math_ax_imm16       ' 25 ll hh              and ax, hhll
                long    @@i_hlt                 ' 26                    es:
                long    @@i_daas                ' 27                    daa
                long    @@i_math_modrm_r8       ' 28 rm                 sub [rm], r8
                long    @@i_math_modrm_r16      ' 29 rm                 sub [rm], r16
                long    @@i_math_r8_modrm       ' 2A rm                 sub r16, [rm]
                long    @@i_math_r16_modrm      ' 2B rm                 sub r8, [rm]
                long    @@i_math_al_imm8        ' 2C nn                 sub al, nn
                long    @@i_math_ax_imm16       ' 2D ll hh              sub ax, hhll
                long    @@i_hlt                 ' 2E                    cs:
                long    @@i_daas                ' 2F                    das

                long    @@i_math_modrm_r8       ' 30 rm                 xor [rm], r8
                long    @@i_math_modrm_r16      ' 31 rm                 xor [rm], r16
                long    @@i_math_r8_modrm       ' 32 rm                 xor r16, [rm]
                long    @@i_math_r16_modrm      ' 33 rm                 xor r8, [rm]
                long    @@i_math_al_imm8        ' 34 nn                 xor al, nn
                long    @@i_math_ax_imm16       ' 35 ll hh              xor ax, hhll
                long    @@i_hlt                 ' 26                    ss:
                long    @@i_aaas                ' 37                    aaa
                long    @@i_math_modrm_r8       ' 38 rm                 cmp [rm], r8
                long    @@i_math_modrm_r16      ' 39 rm                 cmp [rm], r16
                long    @@i_math_r8_modrm       ' 3A rm                 cmp r16, [rm]
                long    @@i_math_r16_modrm      ' 3B rm                 cmp r8, [rm]
                long    @@i_math_al_imm8        ' 3C nn                 cmp al, nn
                long    @@i_math_ax_imm16       ' 3D ll hh              cmp ax, hhll
                long    @@i_hlt                 ' 3E                    ds:
                long    @@i_aaas                ' 3F                    aas

                long    @@i_inc16               ' 40                    inc ax
                long    @@i_inc16               ' 41                    inc cx
                long    @@i_inc16               ' 42                    inc dx
                long    @@i_inc16               ' 43                    inc bx
                long    @@i_inc16               ' 44                    inc sp
                long    @@i_inc16               ' 45                    inc bp
                long    @@i_inc16               ' 46                    inc si
                long    @@i_inc16               ' 47                    inc di
                long    @@i_dec16               ' 48                    dec ax
                long    @@i_dec16               ' 49                    dec cx
                long    @@i_dec16               ' 4A                    dec dx
                long    @@i_dec16               ' 4B                    dec bx
                long    @@i_dec16               ' 4C                    dec sp
                long    @@i_dec16               ' 4D                    dec bp
                long    @@i_dec16               ' 4E                    dec si
                long    @@i_dec16               ' 4F                    dec di

                long    @@i_push_r16            ' 50                    push ax
                long    @@i_push_r16            ' 51                    push cx
                long    @@i_push_r16            ' 52                    push dx
                long    @@i_push_r16            ' 53                    push bx
                long    @@i_push_r16            ' 54                    push sp
                long    @@i_push_r16            ' 55                    push bp
                long    @@i_push_r16            ' 56                    push si
                long    @@i_push_r16            ' 57                    push di
                long    @@i_pop_r16             ' 58                    pop ax
                long    @@i_pop_r16             ' 59                    pop cx
                long    @@i_pop_r16             ' 5A                    pop dx
                long    @@i_pop_r16             ' 5B                    pop bx
                long    @@i_pop_r16             ' 5C                    pop sp
                long    @@i_pop_r16             ' 5D                    pop bp
                long    @@i_pop_r16             ' 5E                    pop si
                long    @@i_pop_r16             ' 5F                    pop di

                long    @@i_jo                  ' 60 dd                 jo dd   60 - 6F are aliases to 70 - 7F
                long    @@i_jo                  ' 61 dd                 jno dd
                long    @@i_jc                  ' 62 dd                 jc dd
                long    @@i_jc                  ' 63 dd                 jnc dd
                long    @@i_jz                  ' 64 dd                 jz dd
                long    @@i_jz                  ' 65 dd                 jnz dd
                long    @@i_jce                 ' 66 dd                 jce dd
                long    @@i_jce                 ' 67 dd                 jnce dd
                long    @@i_js                  ' 68 dd                 js dd
                long    @@i_js                  ' 69 dd                 jns dd
                long    @@i_jp                  ' 6A dd                 jp dd
                long    @@i_jp                  ' 6B dd                 jnp dd
                long    @@i_jl                  ' 6C dd                 jl dd
                long    @@i_jnl                 ' 6D dd                 jnl dd
                long    @@i_jle                 ' 6E dd                 jle dd
                long    @@i_jnle                ' 6F dd                 jnle dd

                long    @@i_jo                  ' 70 dd                 jo dd   60 - 6F are aliases to 70 - 7F
                long    @@i_jo                  ' 71 dd                 jno dd
                long    @@i_jc                  ' 72 dd                 jc dd
                long    @@i_jc                  ' 73 dd                 jnc dd
                long    @@i_jz                  ' 74 dd                 jz dd
                long    @@i_jz                  ' 75 dd                 jnz dd
                long    @@i_jce                 ' 76 dd                 jce dd
                long    @@i_jce                 ' 77 dd                 jnce dd
                long    @@i_js                  ' 78 dd                 js dd
                long    @@i_js                  ' 79 dd                 jns dd
                long    @@i_jp                  ' 7A dd                 jp dd
                long    @@i_jp                  ' 7B dd                 jnp dd
                long    @@i_jl                  ' 7C dd                 jl dd
                long    @@i_jnl                 ' 7D dd                 jnl dd
                long    @@i_jle                 ' 7E dd                 jle dd
                long    @@i_jnle                ' 7F dd                 jnle dd

                long    @@i_math_imm8           ' 80 rm nn              add/or/adc/sbb/and/sub/xor/cmp [rm8], nn
                long    @@i_math_imm16          ' 81 rm ll hh           add/or/adc/sbb/and/sub/xor/cmp [rm16], hhll
                long    @@i_math_imm8s          ' 82 rm sn              add/or/adc/sbb/and/sub/xor/cmp [rm8], sn
                long    @@i_math_imm16s         ' 83 rm sn              add/or/adc/sbb/and/sub/xor/cmp [rm16], sn
                long    @@i_test_r8_modrm       ' 84 rm                 test r8, [mm]
                long    @@i_test_r16_modrm      ' 85 rm                 test r16, [mm]
                long    @@i_xchg_modrm8         ' 86 rm                 xchg r8, [mm]
                long    @@i_xchg_modrm16        ' 87 rm                 xchg r16, [mm]
                long    @@i_mov_modrm_r8        ' 88 rm                 mov [rm], r8
                long    @@i_mov_modrm_r16       ' 89 rm                 mov [rm], r16
                long    @@i_mov_r8_modrm        ' 8A rm                 mov r8, [rm]
                long    @@i_mov_r16_modrm       ' 8B rm                 mov r16, [rm]
                long    @@i_mov_modrm_sreg      ' 8C rm                 mov [rm], sreg
                long    @@i_lea                 ' 8D oo                 lea r16, oo
                long    @@i_mov_sreg_modrm      ' 8E rm                 mov sregs, [rm]
                long    @@i_pop_modrm           ' 8F mm                 pop [rm]

                long    @@i_xchg                ' 90                    xchg ax, cx
                long    @@i_xchg                ' 91                    xchg ax, cx
                long    @@i_xchg                ' 92                    xchg ax, dx
                long    @@i_xchg                ' 93                    xchg ax, bx
                long    @@i_xchg                ' 94                    xchg ax, sp
                long    @@i_xchg                ' 95                    xchg ax, bp
                long    @@i_xchg                ' 96                    xchg ax, si
                long    @@i_xchg                ' 97                    xchg ax, di
                long    @@i_cbw                 ' 98                    cbw
                long    @@i_cwd                 ' 99                    cwd
                long    @@i_call_far            ' 9A ol oh sl sh        call shsl:ohol
                long    @@i_wait                ' 9B                    wait
                long    @@i_pushf               ' 9C                    pushf
                long    @@i_popf                ' 9C                    popf
                long    @@i_sahf                ' 9E                    sahf
                long    @@i_lahf                ' 9F                    lahf

                long    @@i_mov_al_offs         ' A0 ol oh              mov al, [DS:ohol]
                long    @@i_mov_ax_offs         ' A1 ol oh              mov ax, [DS:ohol]
                long    @@i_mov_offs_al         ' A2 ol oh              mov [DS:ohol], al
                long    @@i_mov_offs_ax         ' A3 ol oh              mov [DS:ohol], ax
                long    @@i_movsb               ' A4                    movsb
                long    @@i_movsw               ' A5                    movsw
                long    @@i_cmpsb               ' A6                    cmpsb
                long    @@i_cmpsw               ' A7                    cmpsw
                long    @@i_test_al_imm         ' A8 nn                 test al, nn
                long    @@i_test_ax_imm         ' A9 ll hh              test ax, hhll
                long    @@i_stosb               ' AA                    stosb
                long    @@i_stosw               ' AB                    stosw
                long    @@i_lodsb               ' AC                    lodsb
                long    @@i_lodsw               ' AD                    lodsw
                long    @@i_scasb               ' AE                    scasb
                long    @@i_scasw               ' AF                    scasw

                long    @@i_mov_immb            ' B0 nn                 mov al, nn
                long    @@i_mov_immb            ' B1 nn                 mov cl, nn
                long    @@i_mov_immb            ' B2 nn                 mov dl, nn
                long    @@i_mov_immb            ' B3 nn                 mov bl, nn
                long    @@i_mov_immb            ' B4 nn                 mov ah, nn
                long    @@i_mov_immb            ' B5 nn                 mov ch, nn
                long    @@i_mov_immb            ' B6 nn                 mov dh, nn
                long    @@i_mov_immb            ' B7 nn                 mov bh, nn
                long    @@i_mov_immw            ' B8 ll hh              mov ax, hhll
                long    @@i_mov_immw            ' B9 ll hh              mov cx, hhll
                long    @@i_mov_immw            ' BA ll hh              mov dx, hhll
                long    @@i_mov_immw            ' BB ll hh              mov bx, hhll
                long    @@i_mov_immw            ' BC ll hh              mov sp, hhll
                long    @@i_mov_immw            ' BD ll hh              mov bp, hhll
                long    @@i_mov_immw            ' BE ll hh              mov si, hhll
                long    @@i_mov_immw            ' BF ll hh              mov di, hhll

                long    @@i_ret_near_sp         ' C0 dl dh              ret (SP+dhdl)
                long    @@i_ret_near            ' C1                    ret
                long    @@i_ret_near_sp         ' C2 dl dh              ret (SP+dhdl)
                long    @@i_ret_near            ' C3                    ret
                long    @@i_les                 ' C4 rm                 les [rm]
                long    @@i_lds                 ' C5 rm                 lds [rm]
                long    @@i_mov_modrm_imm8      ' C6 rm nn              mov byte [rm], nn
                long    @@i_mov_modrm_imm16     ' C7 rm ll hh           mov word [rm], hhll
                long    @@i_ret_far_sp          ' C8 dl dh              retf (SP+dhdl)
                long    @@i_ret_far             ' C9                    retf
                long    @@i_ret_far_sp          ' CA dl dh              retf (SP+dhdl)
                long    @@i_ret_far             ' CB                    retf
                long    @@i_int3                ' CC                    int3
                long    @@i_int                 ' CD                    int
                long    @@i_into                ' CE                    into
                long    @@i_iret                ' CF                    iret

                long    @@i_d0_prefix           ' D0 rm                 rol/ror/rolc/rorc/shl/shr/shra byte[rm]
                long    @@i_d1_prefix           ' D1 rm                 rol/ror/rolc/rorc/shl/shr/shraw word[rm]
                long    @@i_d2_prefix           ' D2 rm                 rol/ror/rolc/rorc/shl/shr/shrab byte[rm], cl
                long    @@i_d3_prefix           ' D3 rm                 rol/ror/rolc/rorc/shl/shr/shraw word[rm], cl
                long    @@i_aam                 ' D4                    aam
                long    @@i_aad                 ' D5                    aad
                long    @@i_salc                ' D6                    salc
                long    @@i_xlatb               ' D7                    xlatb
                long    i_esc_op                ' D8 rm                 esc rm
                long    i_esc_op                ' D9 rm                 esc rm
                long    i_esc_op                ' DA rm                 esc rm
                long    i_esc_op                ' DB rm                 esc rm
                long    i_esc_op                ' DC rm                 esc rm
                long    i_esc_op                ' DD rm                 esc rm
                long    i_esc_op                ' DE rm                 esc rm
                long    i_esc_op                ' DF rm                 esc rm

                long    @@i_loopne              ' E0 dd                 loopne dd
                long    @@i_loope               ' E1 dd                 loope dd
                long    @@i_loop                ' E2 dd                 loop dd
                long    @@i_jcxz                ' E3 dd                 jcxz dd
                long    @@i_in_al_imm           ' E4 pp                 in al, [pp]
                long    @@i_in_ax_imm           ' E5 pp                 in ax, [pp]
                long    @@i_out_imm_al          ' E6 pp                 out [pp], al
                long    @@i_out_imm_ax          ' E7 pp                 out [pp], ax
                long    @@i_call_displ          ' E8 dl dh              call +dhdl
                long    @@i_jmp_displ           ' E9 dl dh              jmp +dhdl
                long    @@i_jmp_far             ' EA ol oh sl sh        jmp shsl:ohol
                long    @@i_jmp_displ8          ' EB dd                 jmp +dd
                long    @@i_in_al_dx            ' EC pp                 in al, [dx]
                long    @@i_in_ax_dx            ' ED pp                 in ax, [dx]
                long    @@i_out_dx_al           ' EE pp                 out [dx], al
                long    @@i_out_dx_ax           ' EF pp                 out [dx], ax

                long    @@i_lock                ' F0                    lock
                long    @@i_lock                ' F1                    lock
                long    @@i_hlt                 ' F2                    repne
                long    @@i_hlt                 ' F3                    repe
                long    @@i_hlt                 ' F4                    hlt
                long    @@i_cmc                 ' F5                    cmc
                long    @@i_f6_prefix           ' F6 rm                 test/not/net/mul/imul/div/idiv [rm8]
                long    @@i_f7_prefix           ' F7 rm                 test/not/net/mul/imul/div/idiv [rm16]
                long    @@i_clc                 ' F8                    clc
                long    @@i_stc                 ' F9                    stc
                long    @@i_cli                 ' FA                    cli
                long    @@i_sti                 ' FB                    sti
                long    @@i_cld                 ' FC                    cld
                long    @@i_std                 ' FD                    std
                long    @@i_fe_prefix           ' FF rm                 inc/dec [rm]
                long    @@i_ff_prefix           ' FF rm                 inc/dec/call/call far/jmp/jmp far/push/cmp [rm]

i_hlt
                bith    i_flags, #I_HALT_BIT
        _ret_   decmod  i_ip, i_ffffh

'   add [modrm], r8
'   or  [modrm], r8
'   adc [modrm], r8
'   sbb [modrm], r8
'   and [modrm], r8
'   sub [modrm], r8
'   xor [modrm], r8
'   cmp [modrm], r8

i_math_modrm_r8
                call    #\i_setupmodrm
                call    #\i_getmodr8
                mov     i_data1, i_data
                call    #\i_readopb
                mov     i_data0, i_data
                mov     i_temp0, i_opcode
_do_modrm_op8
                and     i_temp0, #%00_111_000   wz
        if_z    jmp     #.add
                cmp     i_temp0, #%00_001_000   wz
        if_z    jmp     #.or
                cmp     i_temp0, #%00_010_000   wz
        if_z    jmp     #.adc
                cmp     i_temp0, #%00_011_000   wz
        if_z    jmp     #.sbb
                cmp     i_temp0, #%00_100_000   wz
        if_z    jmp     #.and
                cmp     i_temp0, #%00_101_000   wz
        if_z    jmp     #.sub
                cmp     i_temp0, #%00_110_000   wz
        if_z    jmp     #.xor
                cmp     i_temp0, #%00_111_000   wz
        if_z    jmp     #.cmp
                ret

.add
                add     i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_add_flags8
.or
                or      i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_logic_flags8
.adc
                testb   i_flags, #I_CF_BIT      wc
                addx    i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_add_flags8
.sbb
                testb   i_flags, #I_CF_BIT      wc
                subx    i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_sub_flags8
.and
                and     i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_logic_flags8
.sub
                sub     i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_sub_flags8
.xor
                xor     i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_logic_flags8
.cmp
                sub     i_data, i_data1
                jmp     #\i_sub_flags8

i_math_imm8s
                call    #\i_setupmodrm
                call    #\i_readopb
                mov     i_data0, i_data
                call    #\i_readcodeb
                getbyte i_data1, i_tmpb, #0
                signx   i_data1, #7
                mov     i_temp0, i_modrm
                jmp     #_do_modrm_op8

i_math_imm8
                call    #\i_setupmodrm
                call    #\i_readopb
                mov     i_data0, i_data
                call    #\i_readcodeb
                getbyte i_data1, i_tmpb, #0
                mov     i_temp0, i_modrm
                jmp     #_do_modrm_op8

' --------------------------------------------------------------------

'   add r8, [modrm]
'   or  r8, [modrm]
'   adc r8, [modrm]
'   sbb r8, [modrm]
'   and r8, [modrm]
'   sub r8, [modrm]
'   xor r8, [modrm]
'   cmp r8, [modrm]

i_math_al_imm8
                call    #\i_readimmb
                mov     i_data1, i_data
                mov     i_modrm, #%00_000_110
                skipf   #%111
i_math_r8_modrm
                call    #\i_setupmodrm
                call    #\i_readopb
                mov     i_data1, i_data
                call    #\i_getmodr8
                mov     i_data0, i_data
                mov     i_temp0, i_opcode

                and     i_temp0, #%00_111_000   wz
        if_z    jmp     #.add
                cmp     i_temp0, #%00_001_000   wz
        if_z    jmp     #.or
                cmp     i_temp0, #%00_010_000   wz
        if_z    jmp     #.adc
                cmp     i_temp0, #%00_011_000   wz
        if_z    jmp     #.sbb
                cmp     i_temp0, #%00_100_000   wz
        if_z    jmp     #.and
                cmp     i_temp0, #%00_101_000   wz
        if_z    jmp     #.sub
                cmp     i_temp0, #%00_110_000   wz
        if_z    jmp     #.xor
                cmp     i_temp0, #%00_111_000   wz
        if_z    jmp     #.cmp
                ret

.add
                add     i_data, i_data1
                call    #\i_setmodr8
                jmp     #\i_add_flags8
.or
                or      i_data, i_data1
                call    #\i_setmodr8
                jmp     #\i_logic_flags8
.adc
                testb   i_flags, #I_CF_BIT      wc
                addx    i_data, i_data1
                call    #\i_setmodr8
                jmp     #\i_add_flags8
.sbb
                testb   i_flags, #I_CF_BIT      wc
                subx    i_data, i_data1
                call    #\i_setmodr8
                jmp     #\i_sub_flags8
.and
                and     i_data, i_data1
                call    #\i_setmodr8
                jmp     #\i_logic_flags8
.sub
                sub     i_data, i_data1
                call    #\i_setmodr8
                jmp     #\i_sub_flags8
.xor
                xor     i_data, i_data1
                call    #\i_setmodr8
                jmp     #\i_logic_flags8
.cmp
                sub     i_data, i_data1
                jmp     #\i_sub_flags8

i_test_r8_modrm
                call    #\i_setupmodrm
                call    #\i_readopb
                mov     i_data1, i_data
                call    #\i_getmodr8
                mov     i_data0, i_data
                and     i_data, i_data1
                jmp     #\i_logic_flags8

i_test_al_imm
                call    #\i_readimmb
                mov     i_data1, i_data
                getbyte i_data, i_ax, #0
                mov     i_data0, i_data
                and     i_data, i_data1
                jmp     #\i_logic_flags8

' --------------------------------------------------------------------

'   add [modrm], r16
'   or  [modrm], r16
'   adc [modrm], r16
'   sbb [modrm], r16
'   and [modrm], r16
'   sub [modrm], r16
'   xor [modrm], r16
'   cmp [modrm], r16

i_math_modrm_r16
                call    #\i_setupmodrm
                call    #\i_getmodr16
                mov     i_data1, i_data
                call    #\i_readopw
                mov     i_data0, i_data
                mov     i_temp0, i_opcode
_do_modrm_op16
                and     i_temp0, #%00_111_000   wz
        if_z    jmp     #.add16
                cmp     i_temp0, #%00_001_000   wz
        if_z    jmp     #.or16
                cmp     i_temp0, #%00_010_000   wz
        if_z    jmp     #.adc16
                cmp     i_temp0, #%00_011_000   wz
        if_z    jmp     #.sbb16
                cmp     i_temp0, #%00_100_000   wz
        if_z    jmp     #.and16
                cmp     i_temp0, #%00_101_000   wz
        if_z    jmp     #.sub16
                cmp     i_temp0, #%00_110_000   wz
        if_z    jmp     #.xor16
                cmp     i_temp0, #%00_111_000   wz
        if_z    jmp     #.cmp16
                ret

.add16
                add     i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_add_flags16
.or16
                or      i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_logic_flags16
.adc16
                testb   i_flags, #I_CF_BIT      wc
                addx    i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_add_flags16
.sbb16
                testb   i_flags, #I_CF_BIT      wc
                subx    i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_sub_flags16
.and16
                and     i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_logic_flags16
.sub16
                sub     i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_sub_flags16
.xor16
                xor     i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_logic_flags16
.cmp16
                sub     i_data, i_data1
                jmp     #\i_sub_flags16

i_math_imm16s
                call    #\i_setupmodrm
                call    #\i_readopw
                mov     i_data0, i_data
                call    #\i_readcodeb
                getbyte i_data1, i_tmpb, #0
                signx   i_data1, #7
                mov     i_temp0, i_modrm
                jmp     #_do_modrm_op16

i_math_imm16
                call    #\i_setupmodrm
                call    #\i_readopw
                mov     i_data0, i_data
                call    #\i_readcodeb
                getbyte i_data1, i_tmpb, #0
                call    #\i_readcodeb
                setbyte i_data1, i_tmpb, #1
                mov     i_temp0, i_modrm
                jmp     #_do_modrm_op16

' --------------------------------------------------------------------

'   add r16, [modrm]
'   or  r16, [modrm]
'   adc r16, [modrm]
'   sbb r16, [modrm]
'   and r16, [modrm]
'   sub r16, [modrm]
'   xor r16, [modrm]
'   cmp r16, [modrm]

i_math_ax_imm16
                call    #\i_readimmw
                mov     i_data1, i_data
                mov     i_modrm, #%00_000_110
                skipf   #%111
i_math_r16_modrm
                call    #\i_setupmodrm
                call    #\i_readopw
                mov     i_data1, i_data
                call    #\i_getmodr16
                mov     i_data0, i_data
                mov     i_temp0, i_opcode

                and     i_temp0, #%00_111_000   wz
        if_z    jmp     #.add16
                cmp     i_temp0, #%00_001_000    wz
        if_z    jmp     #.or16
                cmp     i_temp0, #%00_010_000    wz
        if_z    jmp     #.adc16
                cmp     i_temp0, #%00_011_000    wz
        if_z    jmp     #.sbb16
                cmp     i_temp0, #%00_100_000    wz
        if_z    jmp     #.and16
                cmp     i_temp0, #%00_101_000    wz
        if_z    jmp     #.sub16
                cmp     i_temp0, #%00_110_000    wz
        if_z    jmp     #.xor16
                cmp     i_temp0, #%00_111_000    wz
        if_z    jmp     #.cmp16
                ret

.add16
                add     i_data, i_data1
                call    #\i_setmodr16
                jmp     #\i_add_flags16
.or16
                or      i_data, i_data1
                call    #\i_setmodr16
                jmp     #\i_logic_flags16
.adc16
                testb   i_flags, #I_CF_BIT      wc
                addx    i_data, i_data1
                call    #\i_setmodr16
                jmp     #\i_add_flags16
.sbb16
                testb   i_flags, #I_CF_BIT      wc
                subx    i_data, i_data1
                call    #\i_setmodr16
                jmp     #\i_sub_flags16
.and16
                and     i_data, i_data1
                call    #\i_setmodr16
                jmp     #\i_logic_flags16
.sub16
                sub     i_data, i_data1
                call    #\i_setmodr16
                jmp     #\i_sub_flags16
.xor16
                xor     i_data, i_data1
                call    #\i_setmodr16
                jmp     #\i_logic_flags16
.cmp16
                sub     i_data, i_data1
                jmp     #\i_sub_flags16

i_test_r16_modrm
                call    #\i_setupmodrm
                call    #\i_readopw
                mov     i_data1, i_data
                call    #\i_getmodr16
                mov     i_data0, i_data
                and     i_data, i_data1
                jmp     #\i_logic_flags16

i_test_ax_imm
                call    #\i_readimmw
                mov     i_data1, i_data
                getword i_data, i_ax, #0
                mov     i_data0, i_data
                and     i_data, i_data1
                jmp     #\i_logic_flags16

' --------------------------------------------------------------------

i_inc16
                mov     pa, i_opcode
                call    #\i_getr16
                mov     i_data0, i_data
                mov     i_data1, #1
                add     i_data, i_data1
                call    #\i_setr16
                jmp     #\i_add_flags16_nc

i_dec16
                mov     pa, i_opcode
                call    #\i_getr16
                mov     i_data0, i_data
                mov     i_data1, #1
                sub     i_data, i_data1
                call    #\i_setr16
                jmp     #\i_sub_flags16_nc

' --------------------------------------------------------------------

i_mov_modrm_sreg
                call    #\i_setupmodrm
                call    #\i_getmodsreg
                jmp     #\i_writeopw

i_mov_sreg_modrm
                call    #\i_setupmodrm
                call    #\i_readopw
                jmp     #\i_setmodsreg

i_mov_modrm_r16
                call    #\i_setupmodrm
                call    #\i_getmodr16
                jmp     #\i_writeopw

i_mov_r16_modrm
                call    #\i_setupmodrm
                call    #\i_readopw
                jmp     #\i_setmodr16

i_mov_modrm_r8
                call    #\i_setupmodrm
                call    #\i_getmodr8
                jmp     #\i_writeopb

i_mov_r8_modrm
                call    #\i_setupmodrm
                call    #\i_readopb
                jmp     #\i_setmodr8

i_mov_immb
                call    #\i_readimmb
                mov     pa, i_opcode
                jmp     #\i_setr8

i_mov_immw
                call    #\i_readimmw
                mov     pa, i_opcode
                jmp     #\i_setr16

i_mov_al_offs
                mov     i_modrm, #%00_000_110
                call    #\i_setupmodrm2
                call    #\i_readopb
                jmp     #\i_setmodr8

i_mov_ax_offs
                mov     i_modrm, #%00_000_110
                call    #\i_setupmodrm2
                call    #\i_readopw
                jmp     #\i_setmodr16

i_mov_offs_al
                mov     i_modrm, #%00_000_110
                call    #\i_setupmodrm2
                call    #\i_getmodr8
                jmp     #\i_writeopb

i_mov_offs_ax
                mov     i_modrm, #%00_000_110
                call    #\i_setupmodrm2
                call    #\i_getmodr16
                jmp     #\i_writeopw

i_mov_modrm_imm8
                call    #\i_setupmodrm
                call    #\i_readimmb
                jmp     #\i_writeopb

i_mov_modrm_imm16
                call    #\i_setupmodrm
                call    #\i_readimmw
                jmp     #\i_writeopw

' --------------------------------------------------------------------

i_push
                decmod  i_sp, i_ffffh
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                getbyte i_tmpb, i_data, #1
                call    #\i_writememb
                decmod  i_sp, i_ffffh
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                getbyte i_tmpb, i_data, #0
                jmp     #\i_writememb

i_pop
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                call    #\i_readmemb
                getbyte i_data, i_tmpb, #0
                incmod  i_sp, i_ffffh
                getword i_ea, i_ss, #0
                shl     i_ea, #4
                add     i_ea, i_sp
                call    #\i_readmemb
                setbyte i_data, i_tmpb, #1
        _ret_   incmod  i_sp, i_ffffh

i_pop_modrm
                call    #\i_setupmodrm
                call    #i_pop
                jmp     #\i_writeopw

i_pushf
                getword i_data, i_flags, #0
                and     i_data, ##ALL_FLAGS
                or      i_data, i_flags_pre
                jmp     #i_push

i_popf
                call    #i_pop
                and     i_data, ##ALL_FLAGS
                or      i_data, i_flags_pre
        _ret_   setword i_flags, i_data, #0

' --------------------------------------------------------------------

i_fe_prefix
                call    #\i_setupmodrm
                mov     i_temp0, i_modrm
                and     i_temp0, #%00_111_000   wz  ' INC
        if_z    jmp     #.inc
                cmp     i_temp0, #%00_001_000   wz  ' DEC
        if_z    jmp     #.dec
                ret

.inc
                call    #\i_readopb
                mov     i_data0, i_data
                mov     i_data1, #1
                add     i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_add_flags8_nc

.dec
                call    #\i_readopb
                mov     i_data0, i_data
                mov     i_data1, #1
                sub     i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_sub_flags8_nc

' --------------------------------------------------------------------

i_f6_prefix
                call    #\i_setupmodrm
                mov     i_temp0, i_modrm
                and     i_temp0, #%00_111_000   wz  ' TEST
        if_nz   cmp     i_temp0, #%00_001_000   wz  ' TEST (alias)
        if_z    jmp     #.test
                cmp     i_temp0, #%00_010_000   wz  ' NOT
        if_z    jmp     #.not
                cmp     i_temp0, #%00_011_000   wz  ' NEG
        if_z    jmp     #.neg
                cmp     i_temp0, #%00_100_000   wz  ' MUL
        if_z    jmp     #.mul
                cmp     i_temp0, #%00_101_000   wz  ' IMUL
        if_z    jmp     #.imul
                cmp     i_temp0, #%00_110_000   wz  ' DIV
        if_z    jmp     #.div
                cmp     i_temp0, #%00_111_000   wz  ' IDIV
        if_z    jmp     #.idiv
                ret

.test
                call    #\i_readimmb
                mov     i_data1, i_data
                call    #\i_readopb
                mov     i_data0, i_data
                and     i_data, i_data1
                jmp     #\i_logic_flags8

.not
                call    #\i_readopb
                not     i_data
                jmp     #\i_writeopb

.neg
                call    #\i_readopb
                mov     i_data1, i_data
                mov     i_data, #0
                mov     i_data0, i_data
                sub     i_data, i_data1
                call    #\i_writeopb
                jmp     #\i_sub_flags8

.mul
                call    #\i_readopb
                mov     i_data1, i_data

                getbyte i_data, i_ax, #0

                mul     i_data, i_data1         wz
                getword i_ax, i_data, #0

                bitz    i_flags, #I_ZF_BIT

                testb   i_ax, #7                wz
                bitz    i_flags, #I_SF_BIT
                test    i_ax, #$FF              wc
                bitnc   i_flags, #I_PF_BIT

                testn   i_ax, #$FF              wz
                bitnz   i_flags, #I_CF_BIT
        _ret_   bitnz   i_flags, #I_OF_BIT

.imul
                call    #\i_readopb
                mov     i_data1, i_data
                signx   i_data1, #7

                getbyte i_data, i_ax, #0
                signx   i_data, #7

                muls    i_data, i_data1         wz
                getword i_ax, i_data, #0

                bitz    i_flags, #I_ZF_BIT

                testb   i_ax, #7                wz
                bitz    i_flags, #I_SF_BIT
                test    i_ax, #$FF              wc
                bitnc   i_flags, #I_PF_BIT

                bitl    i_flags, #I_CF_BIT
                bitl    i_flags, #I_OF_BIT

                cmps    i_data, #127            wcz
        if_gt   bith    i_flags, #I_CF_BIT
        if_gt   bith    i_flags, #I_OF_BIT

                cmps    i_data, ##-128          wcz
        if_lt   bith    i_flags, #I_CF_BIT
        if_lt   bith    i_flags, #I_OF_BIT

                ret

.div
                call    #\i_readopb
                mov     i_data1, i_data         wz
        if_z    jmp     #i_divzero

                getword i_data, i_ax, #0

                qdiv    i_data, i_data1
                getqx   i_temp0
                getqy   i_temp1

                testn   i_temp0, #$FF           wz
        if_nz   jmp     #i_divzero

                setbyte i_ax, i_temp0, #0
        _ret_   setbyte i_ax, i_temp1, #1

.idiv
                call    #\i_readopb
                mov     i_data1, i_data         wz
        if_z    jmp     #i_divzero

                signx   i_data1, #7
                testb   i_data1, #31            wc
        if_c    abs     i_data1

                getword i_data, i_ax, #0
                cmp     i_data, ##$8000         wz
        if_z    jmp     #i_divzero
                signx   i_data, #15
                testb   i_data, #31             wz
        if_z    abs     i_data

                qdiv    i_data, i_data1
                getqx   i_temp0
                getqy   i_temp1
    if_c_ne_z   neg     i_temp0
    if_c_ne_z   neg     i_temp1

                testn   i_temp0, #$FF           wz
        if_nz   jmp     #i_divzero

                setbyte i_ax, i_temp0, #0
        _ret_   setbyte i_ax, i_temp1, #1

' --------------------------------------------------------------------

i_f7_prefix
                call    #\i_setupmodrm
                mov     i_temp0, i_modrm
                and     i_temp0, #%00_111_000   wz  ' TEST
        if_nz   cmp     i_temp0, #%00_001_000   wz  ' TEST (alias)
        if_z    jmp     #.test
                cmp     i_temp0, #%00_010_000   wz  ' NOT
        if_z    jmp     #.not
                cmp     i_temp0, #%00_011_000   wz  ' NEG
        if_z    jmp     #.neg
                cmp     i_temp0, #%00_100_000   wz  ' MUL
        if_z    jmp     #.mul
                cmp     i_temp0, #%00_101_000   wz  ' IMUL
        if_z    jmp     #.imul
                cmp     i_temp0, #%00_110_000   wz  ' DIV
        if_z    jmp     #.div
                cmp     i_temp0, #%00_111_000   wz  ' IDIV
        if_z    jmp     #.idiv
                ret

.test
                call    #\i_readimmw
                mov     i_data1, i_data
                call    #\i_readopw
                mov     i_data0, i_data
                and     i_data, i_data1
                jmp     #\i_logic_flags16

.not
                call    #\i_readopw
                not     i_data
                jmp     #\i_writeopw

.neg
                call    #\i_readopw
                mov     i_data1, i_data
                mov     i_data, #0
                mov     i_data0, i_data
                sub     i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_sub_flags16

.mul
                call    #\i_readopw
                mov     i_data1, i_data

                getword i_data, i_ax, #0

                mul     i_data, i_data1         wz
                getword i_ax, i_data, #0
                getword i_dx, i_data, #1

                bitz    i_flags, #I_ZF_BIT

                testb   i_ax, #15               wz
                bitz    i_flags, #I_SF_BIT
                test    i_ax, #$FF              wc
                bitnc   i_flags, #I_PF_BIT

                cmp     i_dx, #0                wz
                bitnz   i_flags, #I_CF_BIT
        _ret_   bitnz   i_flags, #I_OF_BIT

.imul
                call    #\i_readopw
                mov     i_data1, i_data
                signx   i_data1, #15

                getword i_data, i_ax, #0
                signx   i_data, #15

                muls    i_data, i_data1         wz
                getword i_ax, i_data, #0
                getword i_dx, i_data, #1

                bitz    i_flags, #I_ZF_BIT

                testb   i_ax, #15               wz
                bitz    i_flags, #I_SF_BIT
                test    i_ax, #$FF              wc
                bitnc   i_flags, #I_PF_BIT

                bitl    i_flags, #I_CF_BIT
                bitl    i_flags, #I_OF_BIT

                cmps    i_data, ##32767         wcz
        if_gt   bith    i_flags, #I_CF_BIT
        if_gt   bith    i_flags, #I_OF_BIT

                cmps    i_data, ##-32768        wcz
        if_lt   bith    i_flags, #I_CF_BIT
        if_lt   bith    i_flags, #I_OF_BIT
                ret

.div
                call    #\i_readopw
                mov     i_data1, i_data         wz
        if_z    jmp     #i_divzero

                getword i_data, i_ax, #0
                setword i_data, i_dx, #1

                qdiv    i_data, i_data1
                getqx   i_temp0
                getqy   i_temp1

                testn   i_temp0, i_ffffh        wz
        if_nz   jmp     #i_divzero

                getword i_ax, i_temp0, #0
        _ret_   getword i_dx, i_temp1, #0

.idiv
                call    #\i_readopw
                mov     i_data1, i_data         wz
        if_z    jmp     #i_divzero

                signx   i_data1, #15
                testb   i_data1, #31            wc
        if_c    abs     i_data1

                getword i_data, i_ax, #0
                setword i_data, i_dx, #1
                cmp     i_data, ##$8000_0000    wz
        if_z    jmp     #i_divzero

                testb   i_data, #31             wz
        if_z    abs     i_data

                qdiv    i_data, i_data1
                getqx   i_temp0
                getqy   i_temp1
    if_c_ne_z   neg     i_temp0
    if_c_ne_z   neg     i_temp1

                testn   i_temp0, i_ffffh        wz
        if_nz   jmp     #i_divzero

                getword i_ax, i_temp0, #0
        _ret_   getword i_dx, i_temp1, #0

' --------------------------------------------------------------------

i_ff_prefix
                call    #\i_setupmodrm
                mov     i_temp0, i_modrm
                and     i_temp0, #%00_111_000   wz  ' INC
        if_z    jmp     #.inc
                cmp     i_temp0, #%00_001_000   wz  ' DEC
        if_z    jmp     #.dec
                cmp     i_temp0, #%00_010_000   wz  ' CALL
        if_z    jmp     #.call_near
                cmp     i_temp0, #%00_011_000   wz  ' CALL FAR
        if_z    jmp     #.call_far
                cmp     i_temp0, #%00_100_000   wz  ' JMP
        if_z    jmp     #.jmp_near
                cmp     i_temp0, #%00_101_000   wz  ' JMP FAR
        if_z    jmp     #.jmp_far
                cmp     i_temp0, #%00_110_000   wz  ' PUSH
        if_z    jmp     #.push
                cmp     i_temp0, #%00_111_000   wz  ' PUSH
        if_z    jmp     #.push
                ret

.inc
                call    #\i_readopw
                mov     i_data0, i_data
                mov     i_data1, #1
                add     i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_add_flags16_nc

.dec
                call    #\i_readopw
                mov     i_data0, i_data
                mov     i_data1, #1
                sub     i_data, i_data1
                call    #\i_writeopw
                jmp     #\i_sub_flags16_nc

.call_near
                getword i_data, i_ip, #0
                call    #i_push
.jmp_near
                call    #\i_readopw
        _ret_   getword i_ip, i_data, #0

.call_far
                getword i_data, i_cs, #0
                call    #i_push
                getword i_data, i_ip, #0
                call    #i_push
.jmp_far
                call    #\i_setupea
                call    #\i_readw
                getword i_data0, i_data, #0
                call    #\i_readw
                getword i_cs, i_data, #0
        _ret_   getword i_ip, i_data0, #0

.push
                call    #\i_readopw
                jmp     #i_push

' --------------------------------------------------------------------

i_ret_near
                call    #i_pop
        _ret_   getword i_ip, i_data, #0

i_ret_near_sp
                call    #\i_readimmw
                mov     i_data0, i_data
                call    #i_pop
                getword i_ip, i_data, #0
                add     i_sp, i_data0
        _ret_   getword i_sp, i_sp, #0

i_ret_far
                call    #i_pop
                getword i_ip, i_data, #0
                call    #i_pop
        _ret_   getword i_cs, i_data, #0

i_ret_far_sp
                call    #\i_readimmw
                mov     i_data0, i_data
                call    #i_pop
                getword i_ip, i_data, #0
                call    #i_pop
                getword i_cs, i_data, #0
                add     i_sp, i_data0
        _ret_   getword i_sp, i_sp, #0

' --------------------------------------------------------------------

i_push_r16
                mov     pa, i_opcode
                call    #\i_getr16
                jmp     #i_push

i_pop_r16
                call    #i_pop
                mov     pa, i_opcode
                jmp     #\i_setr16

i_push_sreg
                mov     pa, i_opcode
                call    #\i_getsreg
                jmp     #i_push

i_pop_sreg
                call    #i_pop
                mov     pa, i_opcode
                jmp     #\i_setsreg

' --------------------------------------------------------------------

i_daas
                getnib  i_temp1, i_ax, #0
                cmpr    i_temp1, #$9        wc
                testb   i_flags, #I_AF_BIT  orc

                testb   i_opcode, #3        wz
                getbyte i_data, i_ax, #0
        if_c    sumz    i_data, #6
                setbyte i_ax, i_data, #0
                bitc    i_flags, #I_AF_BIT

                cmpr    i_data, #$9F        wc
                testb   i_flags, #I_CF_BIT  orc
        if_c    sumz    i_data, #$60
                setbyte i_ax, i_data, #0
                bitc    i_flags, #I_CF_BIT

                bitl    i_flags, #I_OF_BIT

                testb   i_ax, #7            wz
                bitz    i_flags, #I_SF_BIT
                test    i_ax, #$FF          wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i_aaas
                getnib  i_temp1, i_ax, #0
                cmpr    i_temp1, #$9        wc
                testb   i_flags, #I_AF_BIT  orc

                testb   i_opcode, #3        wz
                getbyte i_data, i_ax, #0
        if_c    sumz    i_data, #6
                setbyte i_ax, i_data, #0

                getbyte i_data, i_ax, #1
        if_c    sumz    i_data, #1
                setbyte i_ax, i_data, #1

                muxc    i_flags, #(1 << I_CF_BIT) | (1 << I_AF_BIT)

                test    i_ax, #$0F          wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i_aam
                call    #\i_readcodeb
                getbyte i_data, i_ax, #0

                qdiv    i_data, i_tmpb
                getqx   i_temp0
                getqy   i_temp1
                setbyte i_ax, i_temp0, #1
                setbyte i_ax, i_temp1, #0

                bitl    i_flags, #I_CF_BIT
                bitl    i_flags, #I_OF_BIT
                bitl    i_flags, #I_AF_BIT

                testb   i_ax, #7            wz
                bitz    i_flags, #I_SF_BIT
                test    i_ax, #$FF          wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

i_aad
                call    #\i_readcodeb
                getbyte i_data, i_ax, #1
                mul     i_data, i_tmpb

                getbyte i_temp0, i_ax, #0
                add     i_data, i_temp0

                getbyte i_ax, i_data, #0

                bitl    i_flags, #I_CF_BIT
                bitl    i_flags, #I_OF_BIT
                bitl    i_flags, #I_AF_BIT

                testb   i_ax, #7            wz
                bitz    i_flags, #I_SF_BIT
                test    i_ax, #$FF          wcz
                bitz    i_flags, #I_ZF_BIT
        _ret_   bitnc   i_flags, #I_PF_BIT

' --------------------------------------------------------------------

i_call_far
                call    #\i_readimmw
                getword i_data0, i_data, #0
                call    #\i_readimmw
                getword i_data1, i_data, #0

                getword i_data, i_cs, #0
                call    #i_push
                getword i_data, i_ip, #0
                call    #i_push

                getword i_cs, i_data1, #0
        _ret_   getword i_ip, i_data0, #0

i_jmp_far
                call    #\i_readimmw
                getword i_data0, i_data, #0
                call    #\i_readimmw
                getword i_cs, i_data, #0
        _ret_   getword i_ip, i_data0, #0

i_call_near
                call    #\i_readimmw
                getword i_data0, i_data, #0

                getword i_data, i_ip, #0
                call    #i_push

        _ret_   getword i_ip, i_data0, #0

i_jmp_near
                call    #\i_readimmw
        _ret_   getword i_ip, i_data, #0


i_call_displ
                call    #\i_readimmw
                getword i_data0, i_data, #0

                getword i_data, i_ip, #0
                call    #i_push

                add     i_ip, i_data0
        _ret_   getword i_ip, i_ip, #0

i_jmp_displ
                call    #\i_readimmw
                add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_jmp_displ8
                call    #\i_readimmb
                signx   i_data, #7
                add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_loop
                call    #\i_readcodeb
                signx   i_tmpb, #7
                decmod  i_cx, i_ffffh       wz
        if_nz   add     i_ip, i_tmpb
        _ret_   getword i_ip, i_ip, #0

i_loope
                call    #\i_readcodeb
                signx   i_tmpb, #7
                decmod  i_cx, i_ffffh       wz
                testb   i_flags, #I_ZF_BIT  wc
  if_nz_and_c   add     i_ip, i_tmpb
        _ret_   getword i_ip, i_ip, #0

i_loopne
                call    #\i_readcodeb
                signx   i_tmpb, #7
                decmod  i_cx, i_ffffh       wz
                testb   i_flags, #I_ZF_BIT  wc
  if_nz_and_nc  add     i_ip, i_tmpb
        _ret_   getword i_ip, i_ip, #0

i_jcxz
                call    #\i_readcodeb
                signx   i_tmpb, #7
                cmp     i_cx, #0            wz
        if_z    add     i_ip, i_tmpb
        _ret_   getword i_ip, i_ip, #0

' --------------------------------------------------------------------

i_jo
                call    #\i_readimmb
                signx   i_data, #7
                testbn  i_opcode, #0        wc
                testb   i_flags, #I_OF_BIT  wz
    if_c_eq_z   add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_jc
                call    #\i_readimmb
                signx   i_data, #7
                testbn  i_opcode, #0        wc
                testb   i_flags, #I_CF_BIT  wz
    if_c_eq_z   add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_jz
                call    #\i_readimmb
                signx   i_data, #7
                testbn  i_opcode, #0        wc
                testb   i_flags, #I_ZF_BIT  wz
    if_c_eq_z   add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_js
                call    #\i_readimmb
                signx   i_data, #7
                testbn  i_opcode, #0        wc
                testb   i_flags, #I_SF_BIT  wz
    if_c_eq_z   add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_jp
                call    #\i_readimmb
                signx   i_data, #7
                testbn  i_opcode, #0        wc
                testb   i_flags, #I_PF_BIT  wz
    if_c_eq_z   add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_jce
                call    #\i_readimmb
                signx   i_data, #7
                testbn  i_opcode, #0        wc
                testb   i_flags, #I_CF_BIT  wz
                testb   i_flags, #I_ZF_BIT  orz
    if_c_eq_z   add     i_ip, i_data
        _ret_   getword i_ip, i_ip, #0

i_jl
                call    #\i_readimmb
                signx   i_data, #7
                testb   i_flags, #I_SF_BIT  wc  ' (SF != OF)
                testb   i_flags, #I_OF_BIT  wz  ' |
                modc    _c_ne_z             wc  ' | -> (C)
                testbn  i_flags, #I_ZF_BIT  wz  ' (!ZF) -> (Z)
    if_c_and_z  add     i_ip, i_data            ' ((SF != OF) && (!ZF))
        _ret_   getword i_ip, i_ip, #0

i_jle
                call    #\i_readimmb
                signx   i_data, #7
                testb   i_flags, #I_SF_BIT  wc  ' (SF != OF)
                testb   i_flags, #I_OF_BIT  wz  ' |
                modc    _c_ne_z             wc  ' | -> (C)
                testb   i_flags, #I_ZF_BIT  wz  ' (ZF) -> (Z)
    if_c_or_z   add     i_ip, i_data            ' ((SF != OF) || (ZF))
        _ret_   getword i_ip, i_ip, #0

i_jnl
                call    #\i_readimmb
                signx   i_data, #7
                testb   i_flags, #I_SF_BIT  wc
                testb   i_flags, #I_OF_BIT  wz
    if_c_eq_z   add     i_ip, i_data            ' (SF == OF)
        _ret_   getword i_ip, i_ip, #0

i_jnle
                call    #\i_readimmb
                signx   i_data, #7
                testb   i_flags, #I_SF_BIT  wc  ' (SF == OF)
                testb   i_flags, #I_OF_BIT  wz  ' |
                modc    _c_eq_z             wc  ' | -> (C)
                testbn  i_flags, #I_ZF_BIT  wz  ' (!ZF) -> (Z)
    if_c_and_z  add     i_ip, i_data            ' ((SF == OF) && (!ZF))
        _ret_   getword i_ip, i_ip, #0

' --------------------------------------------------------------------

i_in_al_imm
                call    #\i_readcodeb
                getbyte i_ea, i_tmpb, #0
                call    #\i_readiob
        _ret_   setbyte i_ax, i_tmpb, #0

i_in_ax_imm
                call    #\i_readcodeb
                getbyte i_ea, i_tmpb, #0
                call    #\i_readiob
                setbyte i_ax, i_tmpb, #0
                add     i_ea, #1
                call    #\i_readiob
        _ret_   setbyte i_ax, i_tmpb, #1

i_in_al_dx
                getword i_ea, i_dx, #0
                call    #\i_readiob
        _ret_   setbyte i_ax, i_tmpb, #0

i_in_ax_dx
                getword i_ea, i_dx, #0
                call    #\i_readiob
                setbyte i_ax, i_tmpb, #0
                add     i_ea, #1
                call    #\i_readiob
        _ret_   setbyte i_ax, i_tmpb, #1

i_out_imm_al
                call    #\i_readcodeb
                getbyte i_ea, i_tmpb, #0
                getbyte i_tmpb, i_ax, #0
                jmp     #\i_writeiob

i_out_imm_ax
                call    #\i_readcodeb
                getbyte i_ea, i_tmpb, #0
                getbyte i_tmpb, i_ax, #0
                call    #\i_writeiob
                add     i_ea, #1
                getbyte i_tmpb, i_ax, #1
                jmp     #\i_writeiob

i_out_dx_al
                getword i_ea, i_dx, #0
                getbyte i_tmpb, i_ax, #0
                jmp     #\i_writeiob

i_out_dx_ax
                getword i_ea, i_dx, #0
                getbyte i_tmpb, i_ax, #0
                call    #\i_writeiob
                add     i_ea, #1
                getbyte i_tmpb, i_ax, #1
                jmp     #\i_writeiob

' --------------------------------------------------------------------

i_xlatb
                getbyte i_temp0, i_ax, #0
                add     i_temp0, i_bx
                getword i_temp0, i_temp0, #0
                testb   i_flags, #I_SEG_BIT wz
        if_x1   getword i_ea, i_override, #0
        if_x0   getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_temp0
                call    #\i_readmemb
        _ret_   setbyte i_ax, i_tmpb, #0

i_les
                call    #\i_setupmodrm
                call    #\i_setupea
                call    #\i_readw
                call    #\i_setmodr16
                call    #\i_readw
        _ret_   mov     i_es, i_data

i_lds
                call    #\i_setupmodrm
                call    #\i_setupea
                call    #\i_readw
                call    #\i_setmodr16
                call    #\i_readw
        _ret_   mov     i_ds, i_data

i_movsb
                testb   i_flags, #I_SEG_BIT wz
        if_x1   getword i_ea, i_override, #0
        if_x0   getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_si
                call    #\i_readb

                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di
                call    #\i_writeb

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_si, #1
                getword i_si, i_si, #0
                sumz    i_di, #1
        _ret_   getword i_di, i_di, #0

i_movsw
                testb   i_flags, #I_SEG_BIT wz
        if_x1   getword i_ea, i_override, #0
        if_x0   getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_si
                call    #\i_readw

                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di
                call    #\i_writew

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_si, #2
                getword i_si, i_si, #0
                sumz    i_di, #2
        _ret_   getword i_di, i_di, #0

i_lodsb
                testb   i_flags, #I_SEG_BIT wz
        if_x1   getword i_ea, i_override, #0
        if_x0   getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_si

                call    #\i_readb
                setbyte i_ax, i_data, #0

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_si, #1
        _ret_   getword i_si, i_si, #0

i_lodsw
                testb   i_flags, #I_SEG_BIT wz
        if_x1   getword i_ea, i_override, #0
        if_x0   getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_si

                call    #\i_readw
                getword i_ax, i_data, #0

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_si, #2
        _ret_   getword i_si, i_si, #0

i_stosb
                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di

                getbyte i_data, i_ax, #0
                call    #\i_writeb

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_di, #1
        _ret_   getword i_di, i_di, #0

i_stosw
                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di

                getword i_data, i_ax, #0
                call    #\i_writew

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_di, #2
        _ret_   getword i_di, i_di, #0

i_scasb
                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di

                call    #\i_readb
                mov     i_data1, i_data

                getbyte i_data, i_ax, #0
                mov     i_data0, i_data

                sub     i_data, i_data1

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_di, #1
                getword i_di, i_di, #0

                jmp     #\i_sub_flags8

i_scasw
                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di

                call    #\i_readw
                mov     i_data1, i_data

                getword i_data, i_ax, #0
                mov     i_data0, i_data

                sub     i_data, i_data1

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_di, #2
                getword i_di, i_di, #0

                jmp     #\i_sub_flags16

i_cmpsb
                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di
                call    #\i_readb
                mov     i_data1, i_data

                getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_si
                call    #\i_readb
                mov     i_data0, i_data

                sub     i_data, i_data1

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_di, #1
                getword i_di, i_di, #0
                sumz    i_si, #1
                getword i_si, i_si, #0

                jmp     #\i_sub_flags8

i_cmpsw
                getword i_ea, i_es, #0
                shl     i_ea, #4
                add     i_ea, i_di
                call    #\i_readw
                mov     i_data1, i_data

                getword i_ea, i_ds, #0
                shl     i_ea, #4
                add     i_ea, i_si
                call    #\i_readw
                mov     i_data0, i_data

                sub     i_data, i_data1

                testb   i_flags, #I_DF_BIT  wz
                sumz    i_di, #2
                getword i_di, i_di, #0
                sumz    i_si, #2
                getword i_si, i_si, #0

                jmp     #\i_sub_flags16

' --------------------------------------------------------------------

i_divzero
                getword i_ip, i_ip_start, #0
                mov     i_temp0, #0
                jmp     #i_trap

i_into
                testb   i_flags, #I_OF_BIT  wz
        if_x1   mov     i_temp0, #4
        if_x1   jmp     #i_trap
                ret

i_int3          mov     i_temp0, #3
                jmp     #i_trap

i_int           call    #\i_readcodeb
                mov     i_temp0, i_tmpb
i_trap          getword i_data, i_flags, #0
                call    #i_push
                getword i_data, i_cs, #0
                call    #i_push
                getword i_data, i_ip, #0
                call    #i_push
                bitl    i_flags, #I_TF_BIT
                bitl    i_flags, #I_IF_BIT
                mov     i_ea, i_temp0
                shl     i_ea, #2
                call    #\i_readw
                getword i_ip, i_data, #0
                call    #\i_readw
        _ret_   getword i_cs, i_data, #0

i_iret
                call    #i_pop
                getword i_ip, i_data, #0
                call    #i_pop
                getword i_cs, i_data, #0
                call    #i_pop
                setword i_flags, i_data, #0
        _ret_   bith    i_flags, #I_NO_INT_BIT

' --------------------------------------------------------------------

i_d2_prefix
                getbyte i_rep_cnt, i_cx, #0
                skip    #%1
i_d0_prefix
                mov     i_rep_cnt, #1

                call    #\i_setupmodrm
                call    #\i_readopb

                cmp     i_rep_cnt, #0           wz
        if_z    ret
                and     i_rep_cnt, #$1F             ' *** 286 ***

                mov     i_temp0, i_modrm
                and     i_temp0, #%00_111_000   wz  ' ROL
        if_z    jmp     #.rol
                cmp     i_temp0, #%00_001_000   wz  ' ROR
        if_z    jmp     #.ror
                cmp     i_temp0, #%00_010_000   wz  ' ROLC
        if_z    jmp     #.rolc
                cmp     i_temp0, #%00_011_000   wz  ' RORC
        if_z    jmp     #.rorc
                cmp     i_temp0, #%00_100_000   wz  ' SHL
        if_z    jmp     #.shl
                cmp     i_temp0, #%00_101_000   wz  ' SHR
        if_z    jmp     #.shr
                cmp     i_temp0, #%00_110_000   wz
        if_z    jmp     #\@@i_hlt
                cmp     i_temp0, #%00_111_000   wz  ' SHRA
        if_z    jmp     #.shra
                ret

.rol
                testb   i_data, #7          wc

                shl     i_data, #1
                bitc    i_data, #0

                djnz    i_rep_cnt, #.rol

                bitc    i_flags, #I_CF_BIT

                testb   i_flags, #I_CF_BIT  wz
                testb   i_data, #7          xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopb

.ror
                testb   i_data, #0          wc

                shr     i_data, #1
                bitc    i_data, #7

                djnz    i_rep_cnt, #.ror

                bitc    i_flags, #I_CF_BIT

                testb   i_data, #7          wz
                testb   i_data, #6          xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopb

.rolc
                testb   i_data, #7          wc

                shl     i_data, #1
                testb   i_flags, #I_CF_BIT  wz
                bitz    i_data, #0

                bitc    i_flags, #I_CF_BIT
                djnz    i_rep_cnt, #.rolc

                testb   i_flags, #I_CF_BIT  wz
                testb   i_data, #7          xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopb

.rorc
                testb   i_data, #0          wc

                shr     i_data, #1
                testb   i_flags, #I_CF_BIT  wz
                bitz    i_data, #7

                bitc    i_flags, #I_CF_BIT
                djnz    i_rep_cnt, #.rorc

                testb   i_data, #7          wz
                testb   i_data, #6          xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopb

.shl
                testb   i_data, #7          wc
                shl     i_data, #1
                djnz    i_rep_cnt, #.shl

                bitc    i_flags, #I_CF_BIT

                testb   i_data, #8          wz
                testb   i_data, #7          xorz
                bitz    i_flags, #I_OF_BIT

                test    i_data, #$FF        wcz
                bitz    i_flags, #I_ZF_BIT
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #7          wz
                bitz    i_flags, #I_SF_BIT

                jmp     #\i_writeopb

.shr
                testb   i_data, #0          wc
                shr     i_data, #1
                djnz    i_rep_cnt, #.shr

                bitc    i_flags, #I_CF_BIT

                testb   i_data0, #7         wz
                testb   i_data, #7          xorz
                bitz    i_flags, #I_OF_BIT

                test    i_data, #$FF        wcz
                bitz    i_flags, #I_ZF_BIT
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #7          wz
                bitz    i_flags, #I_SF_BIT

                jmp     #\i_writeopb

.shra
                testb   i_data, #0          wc
                testb   i_data, #7          wz
                shr     i_data, #1
                bitz    i_data, #7
                djnz    i_rep_cnt, #.shra

                bitc    i_flags, #I_CF_BIT

                bitl    i_flags, #I_OF_BIT

                test    i_data, #$FF        wcz
                bitz    i_flags, #I_ZF_BIT
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #7          wz
                bitz    i_flags, #I_SF_BIT

                jmp     #\i_writeopb

i_d3_prefix
                getbyte i_rep_cnt, i_cx, #0
                skip    #%1
i_d1_prefix
                mov     i_rep_cnt, #1

                call    #\i_setupmodrm
                call    #\i_readopw

                cmp     i_rep_cnt, #0           wz
        if_z    ret
                and     i_rep_cnt, #$1F             ' *** 286 ***

                mov     i_temp0, i_modrm
                and     i_temp0, #%00_111_000   wz  ' ROL
        if_z    jmp     #.rol
                cmp     i_temp0, #%00_001_000   wz  ' ROR
        if_z    jmp     #.ror
                cmp     i_temp0, #%00_010_000   wz  ' ROLC
        if_z    jmp     #.rolc
                cmp     i_temp0, #%00_011_000   wz  ' RORC
        if_z    jmp     #.rorc
                cmp     i_temp0, #%00_100_000   wz  ' SHL
        if_z    jmp     #.shl
                cmp     i_temp0, #%00_101_000   wz  ' SHR
        if_z    jmp     #.shr
                cmp     i_temp0, #%00_110_000   wz
        if_z    jmp     #\@@i_hlt
                cmp     i_temp0, #%00_111_000   wz  ' SHRA
        if_z    jmp     #.shra
                ret

.rol
                testb   i_data, #15         wc

                shl     i_data, #1
                bitc    i_data, #0

                djnz    i_rep_cnt, #.rol

                bitc    i_flags, #I_CF_BIT

                testb   i_flags, #I_CF_BIT  wz
                testb   i_data, #15         xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopw

.ror
                testb   i_data, #0          wc

                shr     i_data, #1
                bitc    i_data, #15

                djnz    i_rep_cnt, #.ror

                bitc    i_flags, #I_CF_BIT

                testb   i_data, #15         wz
                testb   i_data, #14         xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopw

.rolc
                testb   i_data, #15         wc

                shl     i_data, #1
                testb   i_flags, #I_CF_BIT  wz
                bitz    i_data, #0

                bitc    i_flags, #I_CF_BIT
                djnz    i_rep_cnt, #.rolc

                testb   i_flags, #I_CF_BIT  wz
                testb   i_data, #15         xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopw

.rorc
                testb   i_data, #0          wc

                shr     i_data, #1
                testb   i_flags, #I_CF_BIT  wz
                bitz    i_data, #15

                bitc    i_flags, #I_CF_BIT
                djnz    i_rep_cnt, #.rorc

                testb   i_data, #15         wz
                testb   i_data, #14         xorz
                bitz    i_flags, #I_OF_BIT

                jmp     #\i_writeopw

.shl
                testb   i_data, #15         wc
                shl     i_data, #1
                djnz    i_rep_cnt, #.shl

                bitc    i_flags, #I_CF_BIT

                testb   i_data, #16         wz
                testb   i_data, #15         xorz
                bitz    i_flags, #I_OF_BIT

                test    i_data, i_ffffh     wz
                bitz    i_flags, #I_ZF_BIT

                test    i_data, #$FF        wc
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #15         wz
                bitz    i_flags, #I_SF_BIT

                jmp     #\i_writeopw

.shr
                testb   i_data, #0          wc
                shr     i_data, #1
                djnz    i_rep_cnt, #.shr

                bitc    i_flags, #I_CF_BIT

                testb   i_data0, #15        wz
                testb   i_data, #15         xorz
                bitz    i_flags, #I_OF_BIT

                test    i_data, i_ffffh     wz
                bitz    i_flags, #I_ZF_BIT

                test    i_data, #$FF        wc
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #15         wz
                bitz    i_flags, #I_SF_BIT

                jmp     #\i_writeopw

.shra
                testb   i_data, #0          wc
                testb   i_data, #15         wz
                shr     i_data, #1
                bitz    i_data, #15
                djnz    i_rep_cnt, #.shra

                bitc    i_flags, #I_CF_BIT

                bitl    i_flags, #I_OF_BIT

                test    i_data, i_ffffh     wz
                bitz    i_flags, #I_ZF_BIT

                test    i_data, #$FF        wc
                bitnc   i_flags, #I_PF_BIT

                testb   i_data, #15         wz
                bitz    i_flags, #I_SF_BIT

                jmp     #\i_writeopw

' --------------------------------------------------------------------

i_lock
i_wait
                ret

i_cmc   _ret_   bitnot  i_flags, #I_CF_BIT

i_clc   _ret_   bitl    i_flags, #I_CF_BIT

i_stc   _ret_   bith    i_flags, #I_CF_BIT

i_cli   _ret_   bitl    i_flags, #I_IF_BIT

i_sti           bith    i_flags, #I_NO_INT_BIT
        _ret_   bith    i_flags, #I_IF_BIT

i_cld   _ret_   bitl    i_flags, #I_DF_BIT

i_std   _ret_   bith    i_flags, #I_DF_BIT

i_cbw
                signx   i_ax, #7
        _ret_   getword i_ax, i_ax, #0

i_cwd
                testb   i_ax, #15           wc
        _ret_   muxc    i_dx, i_ffffh

i_salc
                testb   i_flags, #I_CF_BIT  wc
        _ret_   muxc    i_ax, #$FF

i_sahf
                getbyte i_data, i_ax, #1
                and     i_data, ##ALL_FLAGS
                or      i_data, i_flags_pre
        _ret_   setbyte i_flags, i_data, #0

i_lahf
                getword i_data, i_flags, #0
                or      i_data, i_flags_pre
        _ret_   setbyte i_ax, i_data, #1

i_lea
                call    #\i_setupmodrm
                getword i_data, i_offset, #0
                jmp     #\i_setmodr16

i_xchg
                mov     pa, i_opcode
                call    #\i_getr16
                mov     i_data0, i_data
                getword i_data, i_ax, #0
                getword i_ax, i_data0, #0
                jmp     #\i_setr16

i_xchg_modrm8
                call    #\i_setupmodrm

                call    #\i_readopb
                mov     i_data1, i_data

                call    #\i_getmodr8
                mov     i_data0, i_data

                mov     i_data, i_data1
                call    #\i_setmodr8
                mov     i_data, i_data0
                jmp     #\i_writeopb

i_xchg_modrm16
                call    #\i_setupmodrm

                call    #\i_readopw
                mov     i_data1, i_data

                call    #\i_getmodr16
                mov     i_data0, i_data

                mov     i_data, i_data1
                call    #\i_setmodr16
                mov     i_data, i_data0
                jmp     #\i_writeopw

CON             ' 8086 Constants

    I_CF_BIT = 0    ' Carry
    I_PF_BIT = 2    ' Parity
    I_AF_BIT = 4    ' Aux. Carry
    I_ZF_BIT = 6    ' Zero
    I_SF_BIT = 7    ' Sign
    I_TF_BIT = 8    ' Trap
    I_IF_BIT = 9    ' Interrupt
    I_DF_BIT = 10   ' Direction
    I_OF_BIT = 11   ' Overflow

    ALL_FLAGS = (1 << I_CF_BIT) | (1 << I_PF_BIT) | (1 << I_AF_BIT) | (1 << I_ZF_BIT) | (1 << I_SF_BIT) | (1 << I_TF_BIT) | (1 << I_IF_BIT) | (1 << I_DF_BIT) | (1 << I_OF_BIT)

    I_REP_BIT    = 26
    I_REP_ZF_BIT = 27

    I_SEG_BIT    = 28
    I_HALT_BIT   = 29
    I_LOCK_BIT   = 30
    I_NO_INT_BIT = 31

DAT             ' System
                orgh

system_init
                fltl    #ACIA_RX                      ' configure rx smart pin
                wrpin   ##P_ASYNC_RX, #ACIA_RX
                wxpin   ##(((_CLKFREQ * $1_0000) / ACIA_BAUD) & $FFFFFC00) | 7, #ACIA_RX
                drvl    #ACIA_RX

                fltl    #ACIA_TX                      ' configure tx smart pin
                wrpin   ##(P_ASYNC_TX | P_OE), #ACIA_TX
                wxpin   ##(((_CLKFREQ * $1_0000) / ACIA_BAUD) & $FFFFFC00) | 7, #ACIA_TX
                drvl    #ACIA_TX

                waitx   ##(_CLKFREQ / 1_000) * 200
                wypin   #$0D, #ACIA_TX

                ret

system_run
                testp   #ACIA_RX            wc
        if_nc   ret     wcz

                testb   i_flags, #I_NO_INT_BIT  wc
                testb   i_flags, #I_IF_BIT      wz
   if_not_01    ret     wcz

                mov     i_temp0, #$19
                jmp     #\@@i_trap

                ret     wcz

acia_data_rd
                rdpin   i_tmpb, #ACIA_RX
                shr     i_tmpb, #24
                bitl    acia_ctl_reg, #7 + 16
                ret     wcz

acia_data_wr
                and     i_tmpb, #$7F
                wypin   i_tmpb, #ACIA_TX
                ret     wcz

acia_ctl_rd
                getbyte i_tmpb, acia_ctl_reg, #2
                testp   #ACIA_RX    wc
                bitc    i_tmpb, #0
                testp   #ACIA_TX    wc
                bitc    i_tmpb, #1
                ret     wcz

acia_ctl_wr
                setbyte acia_ctl_reg, i_tmpb, #0
                ret     wcz

rom_F0000       file    "MONITOR.ROM"
ram_00000
